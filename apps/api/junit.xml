<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="951" failures="0" errors="0" time="23.241">
  <testsuite name="ParticipationService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:06" time="13.117" tests="22">
    <testcase classname="ParticipationService create should create a solo participation" name="ParticipationService create should create a solo participation" time="0.056">
    </testcase>
    <testcase classname="ParticipationService create should create a group participation" name="ParticipationService create should create a group participation" time="0.004">
    </testcase>
    <testcase classname="ParticipationService create should throw BadRequestException when neither userId nor groupId is provided" name="ParticipationService create should throw BadRequestException when neither userId nor groupId is provided" time="0.06">
    </testcase>
    <testcase classname="ParticipationService create should throw BadRequestException when creation fails" name="ParticipationService create should throw BadRequestException when creation fails" time="0.02">
    </testcase>
    <testcase classname="ParticipationService findAll should return all participations" name="ParticipationService findAll should return all participations" time="0.003">
    </testcase>
    <testcase classname="ParticipationService findOne should return a single participation" name="ParticipationService findOne should return a single participation" time="0.004">
    </testcase>
    <testcase classname="ParticipationService findOne should throw NotFoundException when participation not found" name="ParticipationService findOne should throw NotFoundException when participation not found" time="0.003">
    </testcase>
    <testcase classname="ParticipationService findOneWithoutThrow should return participation if found" name="ParticipationService findOneWithoutThrow should return participation if found" time="0.01">
    </testcase>
    <testcase classname="ParticipationService findOneWithoutThrow should return null if participation not found" name="ParticipationService findOneWithoutThrow should return null if participation not found" time="0.003">
    </testcase>
    <testcase classname="ParticipationService findOneWithoutThrow should use BASE response type by default" name="ParticipationService findOneWithoutThrow should use BASE response type by default" time="0.003">
    </testcase>
    <testcase classname="ParticipationService update should update a participation" name="ParticipationService update should update a participation" time="0.002">
    </testcase>
    <testcase classname="ParticipationService update should throw NotFoundException when participation not found" name="ParticipationService update should throw NotFoundException when participation not found" time="0.006">
    </testcase>
    <testcase classname="ParticipationService update should throw NotFoundException when update fails" name="ParticipationService update should throw NotFoundException when update fails" time="0.002">
    </testcase>
    <testcase classname="ParticipationService entityExists should return true if participation exists" name="ParticipationService entityExists should return true if participation exists" time="0.003">
    </testcase>
    <testcase classname="ParticipationService entityExists should return false if participation does not exist" name="ParticipationService entityExists should return false if participation does not exist" time="0.01">
    </testcase>
    <testcase classname="ParticipationService remove should remove a participation" name="ParticipationService remove should remove a participation" time="0.002">
    </testcase>
    <testcase classname="ParticipationService remove should throw NotFoundException when participation not found" name="ParticipationService remove should throw NotFoundException when participation not found" time="0.015">
    </testcase>
    <testcase classname="ParticipationService isParticipant should return true if user is a participant" name="ParticipationService isParticipant should return true if user is a participant" time="0.004">
    </testcase>
    <testcase classname="ParticipationService isParticipant should return true if group is a participant" name="ParticipationService isParticipant should return true if group is a participant" time="0.017">
    </testcase>
    <testcase classname="ParticipationService isParticipant should return false if neither user nor group is provided" name="ParticipationService isParticipant should return false if neither user nor group is provided" time="0.003">
    </testcase>
    <testcase classname="ParticipationService isParticipant should return false if no participations found" name="ParticipationService isParticipant should return false if no participations found" time="0.004">
    </testcase>
    <testcase classname="ParticipationService getManagedParticipationsForPlayer should call repository.getManagedParticipationsForPlayer with correct parameters" name="ParticipationService getManagedParticipationsForPlayer should call repository.getManagedParticipationsForPlayer with correct parameters" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="RosterService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:06" time="13.593" tests="28">
    <testcase classname="RosterService create should successfully create a roster" name="RosterService create should successfully create a roster" time="0.055">
    </testcase>
    <testcase classname="RosterService create should throw UnprocessableEntityException when creation fails" name="RosterService create should throw UnprocessableEntityException when creation fails" time="0.132">
    </testcase>
    <testcase classname="RosterService findAll should return an array of rosters with MINI response type" name="RosterService findAll should return an array of rosters with MINI response type" time="0.021">
    </testcase>
    <testcase classname="RosterService findAll should return an array of rosters with players for non-MINI response type" name="RosterService findAll should return an array of rosters with players for non-MINI response type" time="0.004">
    </testcase>
    <testcase classname="RosterService findByPlayer should return rosters for a player" name="RosterService findByPlayer should return rosters for a player" time="0.005">
    </testcase>
    <testcase classname="RosterService findByGroup should return rosters for a group" name="RosterService findByGroup should return rosters for a group" time="0.037">
    </testcase>
    <testcase classname="RosterService findByTournament should return rosters for a tournament" name="RosterService findByTournament should return rosters for a tournament" time="0.003">
    </testcase>
    <testcase classname="RosterService findByParticipation should return rosters for a participation" name="RosterService findByParticipation should return rosters for a participation" time="0.025">
    </testcase>
    <testcase classname="RosterService findByStage should return rosters for a stage" name="RosterService findByStage should return rosters for a stage" time="0.005">
    </testcase>
    <testcase classname="RosterService findOne should return a single roster" name="RosterService findOne should return a single roster" time="0.01">
    </testcase>
    <testcase classname="RosterService findOne should throw NotFoundException when roster not found" name="RosterService findOne should throw NotFoundException when roster not found" time="0.017">
    </testcase>
    <testcase classname="RosterService update should successfully update a roster" name="RosterService update should successfully update a roster" time="0.016">
    </testcase>
    <testcase classname="RosterService update should throw NotFoundException when roster not found" name="RosterService update should throw NotFoundException when roster not found" time="0.008">
    </testcase>
    <testcase classname="RosterService isAnyMemberInAnotherRoster should check if any member is in another roster" name="RosterService isAnyMemberInAnotherRoster should check if any member is in another roster" time="0.007">
    </testcase>
    <testcase classname="RosterService isAnyMemberInAnotherRoster should check with excluded roster IDs" name="RosterService isAnyMemberInAnotherRoster should check with excluded roster IDs" time="0.005">
    </testcase>
    <testcase classname="RosterService remove should successfully delete a roster" name="RosterService remove should successfully delete a roster" time="0.003">
    </testcase>
    <testcase classname="RosterService remove should throw NotFoundException when roster not found" name="RosterService remove should throw NotFoundException when roster not found" time="0.003">
    </testcase>
    <testcase classname="RosterService createForSinglePlayer should create a roster for a single player" name="RosterService createForSinglePlayer should create a roster for a single player" time="0.003">
    </testcase>
    <testcase classname="RosterService createForSinglePlayerForNewStage should create rosters for single players in a new stage" name="RosterService createForSinglePlayerForNewStage should create rosters for single players in a new stage" time="0.003">
    </testcase>
    <testcase classname="RosterService getOnlyPlayers should return only players for a roster" name="RosterService getOnlyPlayers should return only players for a roster" time="0.003">
    </testcase>
    <testcase classname="RosterService getChangeAmount should calculate the change amount when adding players" name="RosterService getChangeAmount should calculate the change amount when adding players" time="0.002">
    </testcase>
    <testcase classname="RosterService getChangeAmount should calculate the change amount when removing players" name="RosterService getChangeAmount should calculate the change amount when removing players" time="0.002">
    </testcase>
    <testcase classname="RosterService getChangeAmount should calculate the change amount when replacing players" name="RosterService getChangeAmount should calculate the change amount when replacing players" time="0.003">
    </testcase>
    <testcase classname="RosterService isEachMemberTournamentEligible should return false if not all members have careers" name="RosterService isEachMemberTournamentEligible should return false if not all members have careers" time="0.002">
    </testcase>
    <testcase classname="RosterService isEachMemberTournamentEligible should return false if any player has invalid ELO" name="RosterService isEachMemberTournamentEligible should return false if any player has invalid ELO" time="0.003">
    </testcase>
    <testcase classname="RosterService isEachMemberTournamentEligible should return false if fake players are not allowed" name="RosterService isEachMemberTournamentEligible should return false if fake players are not allowed" time="0.019">
    </testcase>
    <testcase classname="RosterService isEachMemberTournamentEligible should return true if fake players are allowed" name="RosterService isEachMemberTournamentEligible should return true if fake players are allowed" time="0.027">
    </testcase>
    <testcase classname="RosterService isEachMemberTournamentEligible should return false if all conditions are met and fake players not allowed" name="RosterService isEachMemberTournamentEligible should return false if all conditions are met and fake players not allowed" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="GroupMembershipService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:06" time="13.64" tests="18">
    <testcase classname="GroupMembershipService should be defined" name="GroupMembershipService should be defined" time="0.022">
    </testcase>
    <testcase classname="GroupMembershipService create should create a group membership" name="GroupMembershipService create should create a group membership" time="0.006">
    </testcase>
    <testcase classname="GroupMembershipService findAll should return all group memberships" name="GroupMembershipService findAll should return all group memberships" time="0.005">
    </testcase>
    <testcase classname="GroupMembershipService findOne should return a single group membership" name="GroupMembershipService findOne should return a single group membership" time="0.003">
    </testcase>
    <testcase classname="GroupMembershipService findOne should return a single group membership with custom response type" name="GroupMembershipService findOne should return a single group membership with custom response type" time="0.004">
    </testcase>
    <testcase classname="GroupMembershipService update should update a group membership" name="GroupMembershipService update should update a group membership" time="0.003">
    </testcase>
    <testcase classname="GroupMembershipService update should update and send admin promotion notification" name="GroupMembershipService update should update and send admin promotion notification" time="0.015">
    </testcase>
    <testcase classname="GroupMembershipService update should update and send admin demotion notification" name="GroupMembershipService update should update and send admin demotion notification" time="0.018">
    </testcase>
    <testcase classname="GroupMembershipService remove should remove a group membership and send notification" name="GroupMembershipService remove should remove a group membership and send notification" time="0.003">
    </testcase>
    <testcase classname="GroupMembershipService sendNotificationAboutPromotion should send notification about admin promotion" name="GroupMembershipService sendNotificationAboutPromotion should send notification about admin promotion" time="0.003">
    </testcase>
    <testcase classname="GroupMembershipService sendNotificationAboutDemotion should send notification about admin demotion" name="GroupMembershipService sendNotificationAboutDemotion should send notification about admin demotion" time="0.013">
    </testcase>
    <testcase classname="GroupMembershipService role checks isAdmin should return true for admin role" name="GroupMembershipService role checks isAdmin should return true for admin role" time="0.017">
    </testcase>
    <testcase classname="GroupMembershipService role checks isAdmin should return true for owner role" name="GroupMembershipService role checks isAdmin should return true for owner role" time="0.002">
    </testcase>
    <testcase classname="GroupMembershipService role checks isAdmin should return false for member role" name="GroupMembershipService role checks isAdmin should return false for member role" time="0.003">
    </testcase>
    <testcase classname="GroupMembershipService role checks isMember should return true when membership exists" name="GroupMembershipService role checks isMember should return true when membership exists" time="0.003">
    </testcase>
    <testcase classname="GroupMembershipService role checks isMember should return false when membership does not exist" name="GroupMembershipService role checks isMember should return false when membership does not exist" time="0.002">
    </testcase>
    <testcase classname="GroupMembershipService role checks isOwner should return true for owner role" name="GroupMembershipService role checks isOwner should return true for owner role" time="0.002">
    </testcase>
    <testcase classname="GroupMembershipService role checks isOwner should return false for non-owner roles" name="GroupMembershipService role checks isOwner should return false for non-owner roles" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="StageService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:06" time="13.735" tests="26">
    <testcase classname="StageService create should successfully create a stage" name="StageService create should successfully create a stage" time="0.218">
    </testcase>
    <testcase classname="StageService create should throw UnprocessableEntityException when creation fails" name="StageService create should throw UnprocessableEntityException when creation fails" time="0.04">
    </testcase>
    <testcase classname="StageService findAll should return an array of stages" name="StageService findAll should return an array of stages" time="0.016">
    </testcase>
    <testcase classname="StageService findOne should return a single stage" name="StageService findOne should return a single stage" time="0.021">
    </testcase>
    <testcase classname="StageService findOne should throw NotFoundException when stage not found" name="StageService findOne should throw NotFoundException when stage not found" time="0.026">
    </testcase>
    <testcase classname="StageService update should successfully update a stage" name="StageService update should successfully update a stage" time="0.026">
    </testcase>
    <testcase classname="StageService update should throw NotFoundException when stage not found" name="StageService update should throw NotFoundException when stage not found" time="0.02">
    </testcase>
    <testcase classname="StageService remove should successfully delete a stage" name="StageService remove should successfully delete a stage" time="0.005">
    </testcase>
    <testcase classname="StageService remove should throw NotFoundException when stage not found" name="StageService remove should throw NotFoundException when stage not found" time="0.018">
    </testcase>
    <testcase classname="StageService getFirstStage should return the first stage of a tournament" name="StageService getFirstStage should return the first stage of a tournament" time="0.012">
    </testcase>
    <testcase classname="StageService getFirstStage should return undefined if no stages exist" name="StageService getFirstStage should return undefined if no stages exist" time="0.026">
    </testcase>
    <testcase classname="StageService isFirstStage should return true if the stage is the first stage" name="StageService isFirstStage should return true if the stage is the first stage" time="0.011">
    </testcase>
    <testcase classname="StageService isFirstStage should return false if the stage is not the first stage" name="StageService isFirstStage should return false if the stage is not the first stage" time="0.005">
    </testcase>
    <testcase classname="StageService getStagesSortedByStartDate should return stages sorted by start date" name="StageService getStagesSortedByStartDate should return stages sorted by start date" time="0.046">
    </testcase>
    <testcase classname="StageService getStagesSortedByStartDate should return an empty array if no stages exist" name="StageService getStagesSortedByStartDate should return an empty array if no stages exist" time="0.019">
    </testcase>
    <testcase classname="StageService getManagedStages should return stages managed by the user" name="StageService getManagedStages should return stages managed by the user" time="0.014">
    </testcase>
    <testcase classname="StageService getManagedStages should return empty array when no stages are managed by the user" name="StageService getManagedStages should return empty array when no stages are managed by the user" time="0.004">
    </testcase>
    <testcase classname="StageService getManagedStages should work without pagination parameter" name="StageService getManagedStages should work without pagination parameter" time="0.011">
    </testcase>
    <testcase classname="StageService startStage should successfully start a stage" name="StageService startStage should successfully start a stage" time="0.005">
    </testcase>
    <testcase classname="StageService startStage should throw BadRequestException if stage is already ongoing" name="StageService startStage should throw BadRequestException if stage is already ongoing" time="0.018">
    </testcase>
    <testcase classname="StageService startStage should throw BadRequestException if no challonge tournament ID" name="StageService startStage should throw BadRequestException if no challonge tournament ID" time="0.005">
    </testcase>
    <testcase classname="StageService startStage should throw BadRequestException if no rosters found" name="StageService startStage should throw BadRequestException if no rosters found" time="0.004">
    </testcase>
    <testcase classname="StageService startStage should handle transaction failure gracefully" name="StageService startStage should handle transaction failure gracefully" time="0.008">
    </testcase>
    <testcase classname="StageService sendStageStartNotifications should send notifications to all users in stage rosters" name="StageService sendStageStartNotifications should send notifications to all users in stage rosters" time="0.005">
    </testcase>
    <testcase classname="StageService sendStageStartNotifications should not send notifications when no users are found" name="StageService sendStageStartNotifications should not send notifications when no users are found" time="0.014">
    </testcase>
    <testcase classname="StageService sendStageStartNotifications should handle errors gracefully" name="StageService sendStageStartNotifications should handle errors gracefully" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="CanCancelParticipationGuard" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:06" time="13.938" tests="9">
    <testcase classname="CanCancelParticipationGuard canActivate should allow tournament creator to cancel any participation" name="CanCancelParticipationGuard canActivate should allow tournament creator to cancel any participation" time="0.038">
    </testcase>
    <testcase classname="CanCancelParticipationGuard canActivate should allow user to cancel their own solo participation" name="CanCancelParticipationGuard canActivate should allow user to cancel their own solo participation" time="0.005">
    </testcase>
    <testcase classname="CanCancelParticipationGuard canActivate should allow group admin to cancel group participation" name="CanCancelParticipationGuard canActivate should allow group admin to cancel group participation" time="0.005">
    </testcase>
    <testcase classname="CanCancelParticipationGuard canActivate should allow affiliated group admin to cancel any participation" name="CanCancelParticipationGuard canActivate should allow affiliated group admin to cancel any participation" time="0.006">
    </testcase>
    <testcase classname="CanCancelParticipationGuard canActivate should deny non-admin user canceling other user participation" name="CanCancelParticipationGuard canActivate should deny non-admin user canceling other user participation" time="0.057">
    </testcase>
    <testcase classname="CanCancelParticipationGuard canActivate should deny non-admin user canceling group participation" name="CanCancelParticipationGuard canActivate should deny non-admin user canceling group participation" time="0.024">
    </testcase>
    <testcase classname="CanCancelParticipationGuard canActivate should deny cancellation if tournament has ended" name="CanCancelParticipationGuard canActivate should deny cancellation if tournament has ended" time="0.004">
    </testcase>
    <testcase classname="CanCancelParticipationGuard canActivate should throw error if participation not found" name="CanCancelParticipationGuard canActivate should throw error if participation not found" time="0.003">
    </testcase>
    <testcase classname="CanCancelParticipationGuard canActivate should handle missing tournament gracefully" name="CanCancelParticipationGuard canActivate should handle missing tournament gracefully" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="MatchesService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:06" time="14.707" tests="18">
    <testcase classname="MatchesService should be defined" name="MatchesService should be defined" time="0.034">
    </testcase>
    <testcase classname="MatchesService createMatchScore should create match score and update Challonge if the matchup has a Challonge ID" name="MatchesService createMatchScore should create match score and update Challonge if the matchup has a Challonge ID" time="0.14">
    </testcase>
    <testcase classname="MatchesService createMatchScore should create match score without updating Challonge if no Challonge ID" name="MatchesService createMatchScore should create match score without updating Challonge if no Challonge ID" time="0.009">
    </testcase>
    <testcase classname="MatchesService getMatchupsWithResults should return matchups with results" name="MatchesService getMatchupsWithResults should return matchups with results" time="0.005">
    </testcase>
    <testcase classname="MatchesService getMatchupWithResultsAndScores should return a matchup with results and scores" name="MatchesService getMatchupWithResultsAndScores should return a matchup with results and scores" time="0.032">
    </testcase>
    <testcase classname="MatchesService getResultsForUser should return matchups with results for a user" name="MatchesService getResultsForUser should return matchups with results for a user" time="0.004">
    </testcase>
    <testcase classname="MatchesService getResultsForRoster should return results for a roster" name="MatchesService getResultsForRoster should return results for a roster" time="0.004">
    </testcase>
    <testcase classname="MatchesService getResultsForGroup should return results for a group with pagination" name="MatchesService getResultsForGroup should return results for a group with pagination" time="0.004">
    </testcase>
    <testcase classname="MatchesService importChallongeMatchesToStage should import Challonge matches to stage" name="MatchesService importChallongeMatchesToStage should import Challonge matches to stage" time="0.012">
    </testcase>
    <testcase classname="MatchesService getManagedMatchups should return managed matchups for a user" name="MatchesService getManagedMatchups should return managed matchups for a user" time="0.005">
    </testcase>
    <testcase classname="MatchesService canUserEditMatchup should check if a user can edit a matchup" name="MatchesService canUserEditMatchup should check if a user can edit a matchup" time="0.005">
    </testcase>
    <testcase classname="MatchesService isMatchupInTournament should check if a matchup is in a tournament" name="MatchesService isMatchupInTournament should check if a matchup is in a tournament" time="0.002">
    </testcase>
    <testcase classname="MatchesService updateMatchScore should update match score and update Challonge if the matchup has a Challonge ID" name="MatchesService updateMatchScore should update match score and update Challonge if the matchup has a Challonge ID" time="0.004">
    </testcase>
    <testcase classname="MatchesService updateMatchScore should update match score without updating Challonge if no Challonge ID" name="MatchesService updateMatchScore should update match score without updating Challonge if no Challonge ID" time="0.003">
    </testcase>
    <testcase classname="MatchesService deleteMatchScore should delete match score and update Challonge if the matchup has a Challonge ID" name="MatchesService deleteMatchScore should delete match score and update Challonge if the matchup has a Challonge ID" time="0.026">
    </testcase>
    <testcase classname="MatchesService deleteMatchScore should delete match score without updating Challonge if no Challonge ID" name="MatchesService deleteMatchScore should delete match score without updating Challonge if no Challonge ID" time="0.003">
    </testcase>
    <testcase classname="MatchesService getResultsForRoster should return matchups with results for a roster" name="MatchesService getResultsForRoster should return matchups with results for a roster" time="0.003">
    </testcase>
    <testcase classname="MatchesService getManagedMatchups should return matchups managed by the user" name="MatchesService getManagedMatchups should return matchups managed by the user" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="RosterController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:20" time="1.148" tests="8">
    <testcase classname="RosterController findAll should return rosters with metadata" name="RosterController findAll should return rosters with metadata" time="0.012">
    </testcase>
    <testcase classname="RosterController findOne should return a single roster" name="RosterController findOne should return a single roster" time="0.008">
    </testcase>
    <testcase classname="RosterController update should update a roster" name="RosterController update should update a roster" time="0.004">
    </testcase>
    <testcase classname="RosterController findByStage should return rosters for a stage with metadata" name="RosterController findByStage should return rosters for a stage with metadata" time="0.005">
    </testcase>
    <testcase classname="RosterController findByParticipation should return rosters for a participation with metadata" name="RosterController findByParticipation should return rosters for a participation with metadata" time="0.004">
    </testcase>
    <testcase classname="RosterController findByUser should return rosters for a user with metadata" name="RosterController findByUser should return rosters for a user with metadata" time="0.003">
    </testcase>
    <testcase classname="RosterController findByGroup should return rosters for a group with metadata" name="RosterController findByGroup should return rosters for a group with metadata" time="0.003">
    </testcase>
    <testcase classname="RosterController create should create a roster" name="RosterController create should create a roster" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="TournamentController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:20" time="1.064" tests="10">
    <testcase classname="TournamentController findAll should return tournaments with metadata" name="TournamentController findAll should return tournaments with metadata" time="0.027">
    </testcase>
    <testcase classname="TournamentController findOne should return a single tournament" name="TournamentController findOne should return a single tournament" time="0.015">
    </testcase>
    <testcase classname="TournamentController create should create a tournament" name="TournamentController create should create a tournament" time="0.013">
    </testcase>
    <testcase classname="TournamentController update should update a tournament" name="TournamentController update should update a tournament" time="0.003">
    </testcase>
    <testcase classname="TournamentController remove should remove a tournament" name="TournamentController remove should remove a tournament" time="0.011">
    </testcase>
    <testcase classname="TournamentController getManagedTournaments should return tournaments managed by the user" name="TournamentController getManagedTournaments should return tournaments managed by the user" time="0.003">
    </testcase>
    <testcase classname="TournamentController getManagedTournaments should pass the correct user ID to the service" name="TournamentController getManagedTournaments should pass the correct user ID to the service" time="0.002">
    </testcase>
    <testcase classname="TournamentController guard combinations create endpoint guards should require ConditionalAdminGuard" name="TournamentController guard combinations create endpoint guards should require ConditionalAdminGuard" time="0.004">
    </testcase>
    <testcase classname="TournamentController guard combinations update endpoint guards should require both ConditionalAdminGuard and TournamentAdminGuard" name="TournamentController guard combinations update endpoint guards should require both ConditionalAdminGuard and TournamentAdminGuard" time="0.027">
    </testcase>
    <testcase classname="TournamentController guard combinations remove endpoint guards should require AdminAuthGuard and ConditionalAdminGuard" name="TournamentController guard combinations remove endpoint guards should require AdminAuthGuard and ConditionalAdminGuard" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="MatchesController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:20" time="1.23" tests="10">
    <testcase classname="MatchesController should be defined" name="MatchesController should be defined" time="0.015">
    </testcase>
    <testcase classname="MatchesController createScore should create a score for a matchup" name="MatchesController createScore should create a score for a matchup" time="0.004">
    </testcase>
    <testcase classname="MatchesController updateScore should update a score for a matchup" name="MatchesController updateScore should update a score for a matchup" time="0.003">
    </testcase>
    <testcase classname="MatchesController deleteMatchScore should delete a score for a matchup" name="MatchesController deleteMatchScore should delete a score for a matchup" time="0.015">
    </testcase>
    <testcase classname="MatchesController getMatchupsWithResults should return matchups with results" name="MatchesController getMatchupsWithResults should return matchups with results" time="0.004">
    </testcase>
    <testcase classname="MatchesController getMatchupWithResultsAndScores should return a matchup with results and scores" name="MatchesController getMatchupWithResultsAndScores should return a matchup with results and scores" time="0.003">
    </testcase>
    <testcase classname="MatchesController getResultsForUser should return results for a user" name="MatchesController getResultsForUser should return results for a user" time="0.004">
    </testcase>
    <testcase classname="MatchesController getResultsForRoster should return results for a roster" name="MatchesController getResultsForRoster should return results for a roster" time="0.002">
    </testcase>
    <testcase classname="MatchesController getManagedMatchups should return matchups managed by the user" name="MatchesController getManagedMatchups should return matchups managed by the user" time="0.004">
    </testcase>
    <testcase classname="MatchesController getResultsForGroup should return results for a group" name="MatchesController getResultsForGroup should return results for a group" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="StageController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:20" time="0.942" tests="8">
    <testcase classname="StageController findAll should return stages with metadata" name="StageController findAll should return stages with metadata" time="0.016">
    </testcase>
    <testcase classname="StageController findOne should return a single stage" name="StageController findOne should return a single stage" time="0.004">
    </testcase>
    <testcase classname="StageController create should create a stage" name="StageController create should create a stage" time="0.007">
    </testcase>
    <testcase classname="StageController update should update a stage" name="StageController update should update a stage" time="0.003">
    </testcase>
    <testcase classname="StageController remove should remove a stage" name="StageController remove should remove a stage" time="0.003">
    </testcase>
    <testcase classname="StageController getManagedStages should return stages managed by the user" name="StageController getManagedStages should return stages managed by the user" time="0.003">
    </testcase>
    <testcase classname="StageController getManagedStages should pass the correct user ID to the service" name="StageController getManagedStages should pass the correct user ID to the service" time="0.007">
    </testcase>
    <testcase classname="StageController startStage should start a stage" name="StageController startStage should start a stage" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="CanRosterBeUsedGuard" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:06" time="15.395" tests="16">
    <testcase classname="CanRosterBeUsedGuard should be defined" name="CanRosterBeUsedGuard should be defined" time="0.021">
    </testcase>
    <testcase classname="CanRosterBeUsedGuard canActivate should return true for admin user regardless of other conditions" name="CanRosterBeUsedGuard canActivate should return true for admin user regardless of other conditions" time="0.006">
    </testcase>
    <testcase classname="CanRosterBeUsedGuard canActivate should throw BadRequestException if rosterId is provided but roster not found" name="CanRosterBeUsedGuard canActivate should throw BadRequestException if rosterId is provided but roster not found" time="0.08">
    </testcase>
    <testcase classname="CanRosterBeUsedGuard canActivate should use roster participationId and stageId if rosterId is provided" name="CanRosterBeUsedGuard canActivate should use roster participationId and stageId if rosterId is provided" time="0.008">
    </testcase>
    <testcase classname="CanRosterBeUsedGuard canActivate should throw BadRequestException if participationId and stageId are missing" name="CanRosterBeUsedGuard canActivate should throw BadRequestException if participationId and stageId are missing" time="0.009">
    </testcase>
    <testcase classname="CanRosterBeUsedGuard canActivate should throw BadRequestException if members are missing or empty" name="CanRosterBeUsedGuard canActivate should throw BadRequestException if members are missing or empty" time="0.004">
    </testcase>
    <testcase classname="CanRosterBeUsedGuard canActivate should throw ForbiddenException if participation does not exist" name="CanRosterBeUsedGuard canActivate should throw ForbiddenException if participation does not exist" time="0.003">
    </testcase>
    <testcase classname="CanRosterBeUsedGuard canActivate should throw ForbiddenException if stage does not exist" name="CanRosterBeUsedGuard canActivate should throw ForbiddenException if stage does not exist" time="0.008">
    </testcase>
    <testcase classname="CanRosterBeUsedGuard canActivate should throw ForbiddenException if stage tournamentId does not match participation tournamentId" name="CanRosterBeUsedGuard canActivate should throw ForbiddenException if stage tournamentId does not match participation tournamentId" time="0.005">
    </testcase>
    <testcase classname="CanRosterBeUsedGuard canActivate should validate solo participation (user is the only member)" name="CanRosterBeUsedGuard canActivate should validate solo participation (user is the only member)" time="0.004">
    </testcase>
    <testcase classname="CanRosterBeUsedGuard canActivate should throw ForbiddenException for solo participation with different user" name="CanRosterBeUsedGuard canActivate should throw ForbiddenException for solo participation with different user" time="0.007">
    </testcase>
    <testcase classname="CanRosterBeUsedGuard canActivate should validate team participation (user is admin and all members are in group)" name="CanRosterBeUsedGuard canActivate should validate team participation (user is admin and all members are in group)" time="0.003">
    </testcase>
    <testcase classname="CanRosterBeUsedGuard canActivate should throw ForbiddenException if user is not admin of the group" name="CanRosterBeUsedGuard canActivate should throw ForbiddenException if user is not admin of the group" time="0.003">
    </testcase>
    <testcase classname="CanRosterBeUsedGuard canActivate should throw ForbiddenException if any member is not in the group" name="CanRosterBeUsedGuard canActivate should throw ForbiddenException if any member is not in the group" time="0.033">
    </testcase>
    <testcase classname="CanRosterBeUsedGuard canActivate should throw ForbiddenException if any member is already in another roster" name="CanRosterBeUsedGuard canActivate should throw ForbiddenException if any member is already in another roster" time="0.004">
    </testcase>
    <testcase classname="CanRosterBeUsedGuard canActivate should throw ForbiddenException if any member is not tournament eligible" name="CanRosterBeUsedGuard canActivate should throw ForbiddenException if any member is not tournament eligible" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="ParticipationController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:20" time="2.096" tests="9">
    <testcase classname="ParticipationController should be defined" name="ParticipationController should be defined" time="0.034">
    </testcase>
    <testcase classname="ParticipationController findAll should return participations with metadata" name="ParticipationController findAll should return participations with metadata" time="0.02">
    </testcase>
    <testcase classname="ParticipationController findOne should return a single participation" name="ParticipationController findOne should return a single participation" time="0.017">
    </testcase>
    <testcase classname="ParticipationController getManagedParticipationsForPlayer should return participations managed by the player" name="ParticipationController getManagedParticipationsForPlayer should return participations managed by the player" time="0.042">
    </testcase>
    <testcase classname="ParticipationController createSolo should create a solo participation" name="ParticipationController createSolo should create a solo participation" time="0.021">
    </testcase>
    <testcase classname="ParticipationController createTeam should create a team participation" name="ParticipationController createTeam should create a team participation" time="0.017">
    </testcase>
    <testcase classname="ParticipationController createForFakePlayer should create a participation for a fake player" name="ParticipationController createForFakePlayer should create a participation for a fake player" time="0.038">
    </testcase>
    <testcase classname="ParticipationController createForFakeTeam should create a participation for a fake team" name="ParticipationController createForFakeTeam should create a participation for a fake team" time="0.017">
    </testcase>
    <testcase classname="ParticipationController remove should remove a participation" name="ParticipationController remove should remove a participation" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="LfgController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:21" time="0.494" tests="6">
    <testcase classname="LfgController should be defined" name="LfgController should be defined" time="0.009">
    </testcase>
    <testcase classname="LfgController findMyLFG should return user LFG posts" name="LfgController findMyLFG should return user LFG posts" time="0.003">
    </testcase>
    <testcase classname="LfgController findPlayers should return players for a group" name="LfgController findPlayers should return players for a group" time="0.008">
    </testcase>
    <testcase classname="LfgController create should create an LFG post" name="LfgController create should create an LFG post" time="0.003">
    </testcase>
    <testcase classname="LfgController update should update an LFG post" name="LfgController update should update an LFG post" time="0.018">
    </testcase>
    <testcase classname="LfgController delete should delete an LFG post" name="LfgController delete should delete an LFG post" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="GroupController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:21" time="0.561" tests="13">
    <testcase classname="GroupController should be defined" name="GroupController should be defined" time="0.008">
    </testcase>
    <testcase classname="GroupController create should create a group" name="GroupController create should create a group" time="0.004">
    </testcase>
    <testcase classname="GroupController findAll should return array of groups with metadata" name="GroupController findAll should return array of groups with metadata" time="0.023">
    </testcase>
    <testcase classname="GroupController findOne should return a group with BASE response type" name="GroupController findOne should return a group with BASE response type" time="0.004">
    </testcase>
    <testcase classname="GroupController findOne should return a group with MINI response type" name="GroupController findOne should return a group with MINI response type" time="0.002">
    </testcase>
    <testcase classname="GroupController findOne should return a group with MINI_WITH_LOGO response type" name="GroupController findOne should return a group with MINI_WITH_LOGO response type" time="0.008">
    </testcase>
    <testcase classname="GroupController findOne should return a group with MINI_WITH_COUNTRY response type" name="GroupController findOne should return a group with MINI_WITH_COUNTRY response type" time="0.006">
    </testcase>
    <testcase classname="GroupController findOne should return a group with EXTENDED response type" name="GroupController findOne should return a group with EXTENDED response type" time="0.003">
    </testcase>
    <testcase classname="GroupController update should update a group" name="GroupController update should update a group" time="0.003">
    </testcase>
    <testcase classname="GroupController remove should remove a group" name="GroupController remove should remove a group" time="0.005">
    </testcase>
    <testcase classname="GroupController getGroupMembers should return group members" name="GroupController getGroupMembers should return group members" time="0.003">
    </testcase>
    <testcase classname="GroupController getGroupTournaments should return group tournaments" name="GroupController getGroupTournaments should return group tournaments" time="0.01">
    </testcase>
    <testcase classname="GroupController getGroupFollowers should return group followers" name="GroupController getGroupFollowers should return group followers" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="UsersService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:22" time="0.698" tests="19">
    <testcase classname="UsersService should be defined" name="UsersService should be defined" time="0.007">
    </testcase>
    <testcase classname="UsersService should create a user" name="UsersService should create a user" time="0.004">
    </testcase>
    <testcase classname="UsersService should throw an unprocessable entity exception when creating a user fails" name="UsersService should throw an unprocessable entity exception when creating a user fails" time="0.051">
    </testcase>
    <testcase classname="UsersService should throw an error when creating a user with an existing email" name="UsersService should throw an error when creating a user with an existing email" time="0.003">
    </testcase>
    <testcase classname="UsersService should update a user" name="UsersService should update a user" time="0.003">
    </testcase>
    <testcase classname="UsersService should delete a user" name="UsersService should delete a user" time="0.004">
    </testcase>
    <testcase classname="UsersService should throw an error when deleting a user with a wrong id" name="UsersService should throw an error when deleting a user with a wrong id" time="0.005">
    </testcase>
    <testcase classname="UsersService should find a user" name="UsersService should find a user" time="0.003">
    </testcase>
    <testcase classname="UsersService should throw an error when finding a user with a wrong id" name="UsersService should throw an error when finding a user with a wrong id" time="0.019">
    </testcase>
    <testcase classname="UsersService findAll should return an array of users" name="UsersService findAll should return an array of users" time="0.003">
    </testcase>
    <testcase classname="UsersService findByEmail should return a user if found by email" name="UsersService findByEmail should return a user if found by email" time="0.002">
    </testcase>
    <testcase classname="UsersService findByEmail should return null if user not found by email" name="UsersService findByEmail should return null if user not found by email" time="0.003">
    </testcase>
    <testcase classname="UsersService update should throw NotFoundException if user not found" name="UsersService update should throw NotFoundException if user not found" time="0.003">
    </testcase>
    <testcase classname="UsersService update should update and return the user" name="UsersService update should update and return the user" time="0.003">
    </testcase>
    <testcase classname="UsersService remove should throw NotFoundException if user not found" name="UsersService remove should throw NotFoundException if user not found" time="0.003">
    </testcase>
    <testcase classname="UsersService remove should delete the user and return undefined" name="UsersService remove should delete the user and return undefined" time="0.002">
    </testcase>
    <testcase classname="UsersService updateUserPassword should throw NotFoundException if user not found" name="UsersService updateUserPassword should throw NotFoundException if user not found" time="0.003">
    </testcase>
    <testcase classname="UsersService updateUserPassword should update user password with hashed password" name="UsersService updateUserPassword should update user password with hashed password" time="0.002">
    </testcase>
    <testcase classname="UsersService confirmEmail should confirm user email" name="UsersService confirmEmail should confirm user email" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="AuthService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:22" time="0.747" tests="18">
    <testcase classname="AuthService verifyAsyncWithCredentials should throw NotFoundException if user not found" name="AuthService verifyAsyncWithCredentials should throw NotFoundException if user not found" time="0.04">
    </testcase>
    <testcase classname="AuthService verifyAsyncWithCredentials should throw UnauthorizedException if password is incorrect" name="AuthService verifyAsyncWithCredentials should throw UnauthorizedException if password is incorrect" time="0.003">
    </testcase>
    <testcase classname="AuthService verifyAsyncWithCredentials should return tokens if credentials are valid" name="AuthService verifyAsyncWithCredentials should return tokens if credentials are valid" time="0.003">
    </testcase>
    <testcase classname="AuthService getTokens should generate access and refresh tokens" name="AuthService getTokens should generate access and refresh tokens" time="0.003">
    </testcase>
    <testcase classname="AuthService refreshTokens should throw UnauthorizedException if refresh token is invalid" name="AuthService refreshTokens should throw UnauthorizedException if refresh token is invalid" time="0.005">
    </testcase>
    <testcase classname="AuthService refreshTokens should return new tokens if refresh token is valid" name="AuthService refreshTokens should return new tokens if refresh token is valid" time="0.009">
    </testcase>
    <testcase classname="AuthService validateUser should return user if found by email" name="AuthService validateUser should return user if found by email" time="0.002">
    </testcase>
    <testcase classname="AuthService validateUser should return null if user not found" name="AuthService validateUser should return null if user not found" time="0.002">
    </testcase>
    <testcase classname="AuthService passwordResetRequest should throw NotFoundException if user not found" name="AuthService passwordResetRequest should throw NotFoundException if user not found" time="0.002">
    </testcase>
    <testcase classname="AuthService passwordResetRequest should generate reset token and send email" name="AuthService passwordResetRequest should generate reset token and send email" time="0.015">
    </testcase>
    <testcase classname="AuthService passwordReset should throw UnauthorizedException if token is invalid" name="AuthService passwordReset should throw UnauthorizedException if token is invalid" time="0.004">
    </testcase>
    <testcase classname="AuthService passwordReset should throw UnauthorizedException if token type is not password-reset" name="AuthService passwordReset should throw UnauthorizedException if token type is not password-reset" time="0.003">
    </testcase>
    <testcase classname="AuthService passwordReset should throw NotFoundException if user not found" name="AuthService passwordReset should throw NotFoundException if user not found" time="0.002">
    </testcase>
    <testcase classname="AuthService passwordReset should update user password if token is valid" name="AuthService passwordReset should update user password if token is valid" time="0.002">
    </testcase>
    <testcase classname="AuthService emailConfirmation should throw UnauthorizedException if token is invalid" name="AuthService emailConfirmation should throw UnauthorizedException if token is invalid" time="0.004">
    </testcase>
    <testcase classname="AuthService emailConfirmation should throw UnauthorizedException if token type is not email-confirmation" name="AuthService emailConfirmation should throw UnauthorizedException if token type is not email-confirmation" time="0.002">
    </testcase>
    <testcase classname="AuthService emailConfirmation should throw NotFoundException if user not found" name="AuthService emailConfirmation should throw NotFoundException if user not found" time="0.002">
    </testcase>
    <testcase classname="AuthService emailConfirmation should confirm user email if token is valid" name="AuthService emailConfirmation should confirm user email if token is valid" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="AuthController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:21" time="1.255" tests="12">
    <testcase classname="AuthController login should return tokens on successful login" name="AuthController login should return tokens on successful login" time="0.028">
    </testcase>
    <testcase classname="AuthController login should propagate errors from auth service" name="AuthController login should propagate errors from auth service" time="0.014">
    </testcase>
    <testcase classname="AuthController refresh should return new tokens on successful refresh" name="AuthController refresh should return new tokens on successful refresh" time="0.004">
    </testcase>
    <testcase classname="AuthController refresh should propagate errors from auth service" name="AuthController refresh should propagate errors from auth service" time="0.005">
    </testcase>
    <testcase classname="AuthController authCallback should return tokens for Google OAuth callback" name="AuthController authCallback should return tokens for Google OAuth callback" time="0.003">
    </testcase>
    <testcase classname="AuthController authCallback should propagate errors from auth service" name="AuthController authCallback should propagate errors from auth service" time="0.004">
    </testcase>
    <testcase classname="AuthController passwordResetRequest should call auth service with correct email" name="AuthController passwordResetRequest should call auth service with correct email" time="0.004">
    </testcase>
    <testcase classname="AuthController passwordResetRequest should propagate errors from auth service" name="AuthController passwordResetRequest should propagate errors from auth service" time="0.004">
    </testcase>
    <testcase classname="AuthController passwordReset should call auth service with correct token and password" name="AuthController passwordReset should call auth service with correct token and password" time="0.004">
    </testcase>
    <testcase classname="AuthController passwordReset should propagate errors from auth service" name="AuthController passwordReset should propagate errors from auth service" time="0.004">
    </testcase>
    <testcase classname="AuthController emailConfirmation should call auth service with correct token" name="AuthController emailConfirmation should call auth service with correct token" time="0.003">
    </testcase>
    <testcase classname="AuthController emailConfirmation should propagate errors from auth service" name="AuthController emailConfirmation should propagate errors from auth service" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="QuizAttemptController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:22" time="0.493" tests="9">
    <testcase classname="QuizAttemptController should be defined" name="QuizAttemptController should be defined" time="0.014">
    </testcase>
    <testcase classname="QuizAttemptController findAll should return results with metadata for regular users" name="QuizAttemptController findAll should return results with metadata for regular users" time="0.015">
    </testcase>
    <testcase classname="QuizAttemptController findAll should not filter by userId for admin users" name="QuizAttemptController findAll should not filter by userId for admin users" time="0.003">
    </testcase>
    <testcase classname="QuizAttemptController getMyAttempts should return attempts for current user" name="QuizAttemptController getMyAttempts should return attempts for current user" time="0.002">
    </testcase>
    <testcase classname="QuizAttemptController findOne should return attempt by id" name="QuizAttemptController findOne should return attempt by id" time="0.003">
    </testcase>
    <testcase classname="QuizAttemptController create should create a new attempt" name="QuizAttemptController create should create a new attempt" time="0.004">
    </testcase>
    <testcase classname="QuizAttemptController submitAttempt should submit attempt" name="QuizAttemptController submitAttempt should submit attempt" time="0.003">
    </testcase>
    <testcase classname="QuizAttemptController createAnswer should create a new answer" name="QuizAttemptController createAnswer should create a new answer" time="0.002">
    </testcase>
    <testcase classname="QuizAttemptController updateAnswer should update an answer" name="QuizAttemptController updateAnswer should update an answer" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="BlobService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:22" time="0.653" tests="10">
    <testcase classname="BlobService should throw an error if AWS credentials are not set" name="BlobService should throw an error if AWS credentials are not set" time="0.032">
    </testcase>
    <testcase classname="BlobService should be defined" name="BlobService should be defined" time="0.018">
    </testcase>
    <testcase classname="BlobService generateKey should generate a key with the correct format" name="BlobService generateKey should generate a key with the correct format" time="0.008">
    </testcase>
    <testcase classname="BlobService generateKey should default to txt extension if mime type is not provided" name="BlobService generateKey should default to txt extension if mime type is not provided" time="0.003">
    </testcase>
    <testcase classname="BlobService uploadFile should upload a file successfully" name="BlobService uploadFile should upload a file successfully" time="0.004">
    </testcase>
    <testcase classname="BlobService uploadFile should throw an error if upload fails" name="BlobService uploadFile should throw an error if upload fails" time="0.01">
    </testcase>
    <testcase classname="BlobService deleteFile should delete a file successfully" name="BlobService deleteFile should delete a file successfully" time="0.018">
    </testcase>
    <testcase classname="BlobService deleteFile should throw an error if delete fails" name="BlobService deleteFile should throw an error if delete fails" time="0.004">
    </testcase>
    <testcase classname="BlobService getFile should retrieve a file successfully" name="BlobService getFile should retrieve a file successfully" time="0.004">
    </testcase>
    <testcase classname="BlobService getFile should throw an error if retrieval fails" name="BlobService getFile should throw an error if retrieval fails" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="TournamentIsFakePlayersAllowedGuard" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:22" time="0.618" tests="10">
    <testcase classname="TournamentIsFakePlayersAllowedGuard canActivate - Solo Player should allow real player participation" name="TournamentIsFakePlayersAllowedGuard canActivate - Solo Player should allow real player participation" time="0.009">
    </testcase>
    <testcase classname="TournamentIsFakePlayersAllowedGuard canActivate - Solo Player should allow fake player in unranked tournament that allows fake players" name="TournamentIsFakePlayersAllowedGuard canActivate - Solo Player should allow fake player in unranked tournament that allows fake players" time="0.003">
    </testcase>
    <testcase classname="TournamentIsFakePlayersAllowedGuard canActivate - Solo Player should deny fake player in tournament that does not allow fake players" name="TournamentIsFakePlayersAllowedGuard canActivate - Solo Player should deny fake player in tournament that does not allow fake players" time="0.014">
    </testcase>
    <testcase classname="TournamentIsFakePlayersAllowedGuard canActivate - Solo Player should deny fake player in ranked tournament" name="TournamentIsFakePlayersAllowedGuard canActivate - Solo Player should deny fake player in ranked tournament" time="0.003">
    </testcase>
    <testcase classname="TournamentIsFakePlayersAllowedGuard canActivate - Solo Player should throw BadRequestException when userId is not provided" name="TournamentIsFakePlayersAllowedGuard canActivate - Solo Player should throw BadRequestException when userId is not provided" time="0.022">
    </testcase>
    <testcase classname="TournamentIsFakePlayersAllowedGuard canActivate - Team should allow real group participation" name="TournamentIsFakePlayersAllowedGuard canActivate - Team should allow real group participation" time="0.003">
    </testcase>
    <testcase classname="TournamentIsFakePlayersAllowedGuard canActivate - Team should allow fake group in unranked tournament that allows fake players" name="TournamentIsFakePlayersAllowedGuard canActivate - Team should allow fake group in unranked tournament that allows fake players" time="0.002">
    </testcase>
    <testcase classname="TournamentIsFakePlayersAllowedGuard canActivate - Team should deny fake group in tournament that does not allow fake players" name="TournamentIsFakePlayersAllowedGuard canActivate - Team should deny fake group in tournament that does not allow fake players" time="0.003">
    </testcase>
    <testcase classname="TournamentIsFakePlayersAllowedGuard canActivate - Team should deny fake group in ranked tournament" name="TournamentIsFakePlayersAllowedGuard canActivate - Team should deny fake group in ranked tournament" time="0.002">
    </testcase>
    <testcase classname="TournamentIsFakePlayersAllowedGuard canActivate - Team should throw BadRequestException when groupId is not provided" name="TournamentIsFakePlayersAllowedGuard canActivate - Team should throw BadRequestException when groupId is not provided" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="NotificationsService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:22" time="0.825" tests="8">
    <testcase classname="NotificationsService should throw an error if Firebase credentials are not set" name="NotificationsService should throw an error if Firebase credentials are not set" time="0.032">
    </testcase>
    <testcase classname="NotificationsService should be defined" name="NotificationsService should be defined" time="0.007">
    </testcase>
    <testcase classname="NotificationsService sendNotificationToUser should send notification to user" name="NotificationsService sendNotificationToUser should send notification to user" time="0.003">
    </testcase>
    <testcase classname="NotificationsService sendNotificationToUser should throw InternalServerErrorException if sending notification fails" name="NotificationsService sendNotificationToUser should throw InternalServerErrorException if sending notification fails" time="0.003">
    </testcase>
    <testcase classname="NotificationsService sendNotification should send notification" name="NotificationsService sendNotification should send notification" time="0.012">
    </testcase>
    <testcase classname="NotificationsService sendNotification should throw InternalServerErrorException if sending notification fails" name="NotificationsService sendNotification should throw InternalServerErrorException if sending notification fails" time="0.027">
    </testcase>
    <testcase classname="NotificationsService sendMulticastNotification should send multicast notification" name="NotificationsService sendMulticastNotification should send multicast notification" time="0.003">
    </testcase>
    <testcase classname="NotificationsService sendMulticastNotification should throw InternalServerErrorException if sending multicast notification fails" name="NotificationsService sendMulticastNotification should throw InternalServerErrorException if sending multicast notification fails" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="AccessTokenStrategy" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:22" time="0.406" tests="2">
    <testcase classname="AccessTokenStrategy validate should return validated user when user exists" name="AccessTokenStrategy validate should return validated user when user exists" time="0.017">
    </testcase>
    <testcase classname="AccessTokenStrategy validate should throw UnauthorizedException when user does not exist" name="AccessTokenStrategy validate should throw UnauthorizedException when user does not exist" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="UsersController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:22" time="0.589" tests="8">
    <testcase classname="UsersController should be defined" name="UsersController should be defined" time="0.021">
    </testcase>
    <testcase classname="UsersController should return a valid query" name="UsersController should return a valid query" time="0.006">
    </testcase>
    <testcase classname="UsersController should return a user" name="UsersController should return a user" time="0.019">
    </testcase>
    <testcase classname="UsersController should create a user" name="UsersController should create a user" time="0.005">
    </testcase>
    <testcase classname="UsersController should update a user" name="UsersController should update a user" time="0.005">
    </testcase>
    <testcase classname="UsersController should delete a user" name="UsersController should delete a user" time="0.006">
    </testcase>
    <testcase classname="UsersController should delete me" name="UsersController should delete me" time="0.006">
    </testcase>
    <testcase classname="UsersController should update me" name="UsersController should update me" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="QuizController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:23" time="0.47" tests="8">
    <testcase classname="QuizController should be defined" name="QuizController should be defined" time="0.009">
    </testcase>
    <testcase classname="QuizController findAll should return all quizzes with metadata" name="QuizController findAll should return all quizzes with metadata" time="0.004">
    </testcase>
    <testcase classname="QuizController findOne should return a quiz by id" name="QuizController findOne should return a quiz by id" time="0.003">
    </testcase>
    <testcase classname="QuizController create should create a new quiz" name="QuizController create should create a new quiz" time="0.007">
    </testcase>
    <testcase classname="QuizController update should update a quiz" name="QuizController update should update a quiz" time="0.003">
    </testcase>
    <testcase classname="QuizController remove should remove a quiz" name="QuizController remove should remove a quiz" time="0.004">
    </testcase>
    <testcase classname="QuizController autoComplete should return quizzes matching the search term" name="QuizController autoComplete should return quizzes matching the search term" time="0.004">
    </testcase>
    <testcase classname="QuizController getAuthoredQuizzes should return quizzes authored by the user" name="QuizController getAuthoredQuizzes should return quizzes authored by the user" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="CategoryController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:23" time="0.582" tests="10">
    <testcase classname="CategoryController should be defined" name="CategoryController should be defined" time="0.013">
    </testcase>
    <testcase classname="CategoryController should return a valid query" name="CategoryController should return a valid query" time="0.006">
    </testcase>
    <testcase classname="CategoryController should return a category" name="CategoryController should return a category" time="0.003">
    </testcase>
    <testcase classname="CategoryController should create a category" name="CategoryController should create a category" time="0.003">
    </testcase>
    <testcase classname="CategoryController should update a category" name="CategoryController should update a category" time="0.003">
    </testcase>
    <testcase classname="CategoryController should remove a category" name="CategoryController should remove a category" time="0.003">
    </testcase>
    <testcase classname="CategoryController should throw NotFoundException when category is not found" name="CategoryController should throw NotFoundException when category is not found" time="0.014">
    </testcase>
    <testcase classname="CategoryController should throw UnprocessableEntityException when category creation fails" name="CategoryController should throw UnprocessableEntityException when category creation fails" time="0.006">
    </testcase>
    <testcase classname="CategoryController should throw NotFoundException when updating non-existent category" name="CategoryController should throw NotFoundException when updating non-existent category" time="0.003">
    </testcase>
    <testcase classname="CategoryController should throw NotFoundException when removing non-existent category" name="CategoryController should throw NotFoundException when removing non-existent category" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="LocationController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:23" time="0.516" tests="11">
    <testcase classname="LocationController should be defined" name="LocationController should be defined" time="0.009">
    </testcase>
    <testcase classname="LocationController should return a valid query" name="LocationController should return a valid query" time="0.005">
    </testcase>
    <testcase classname="LocationController should return a location" name="LocationController should return a location" time="0.004">
    </testcase>
    <testcase classname="LocationController should create a location" name="LocationController should create a location" time="0.002">
    </testcase>
    <testcase classname="LocationController should update a location" name="LocationController should update a location" time="0.017">
    </testcase>
    <testcase classname="LocationController should remove a location" name="LocationController should remove a location" time="0.004">
    </testcase>
    <testcase classname="LocationController should throw NotFoundException when location is not found" name="LocationController should throw NotFoundException when location is not found" time="0.019">
    </testcase>
    <testcase classname="LocationController should throw UnprocessableEntityException when location creation fails" name="LocationController should throw UnprocessableEntityException when location creation fails" time="0.004">
    </testcase>
    <testcase classname="LocationController should throw NotFoundException when updating non-existent location" name="LocationController should throw NotFoundException when updating non-existent location" time="0.003">
    </testcase>
    <testcase classname="LocationController should throw NotFoundException when removing non-existent location" name="LocationController should throw NotFoundException when removing non-existent location" time="0.005">
    </testcase>
    <testcase classname="LocationController getMap should return all locations" name="LocationController getMap should return all locations" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="GroupInvitesController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:23" time="0.502" tests="6">
    <testcase classname="GroupInvitesController should be defined" name="GroupInvitesController should be defined" time="0.008">
    </testcase>
    <testcase classname="GroupInvitesController create should create a group invite" name="GroupInvitesController create should create a group invite" time="0.008">
    </testcase>
    <testcase classname="GroupInvitesController findAll should return an array of group invites" name="GroupInvitesController findAll should return an array of group invites" time="0.006">
    </testcase>
    <testcase classname="GroupInvitesController findOne should return a group invite" name="GroupInvitesController findOne should return a group invite" time="0.004">
    </testcase>
    <testcase classname="GroupInvitesController update should update a group invite" name="GroupInvitesController update should update a group invite" time="0.007">
    </testcase>
    <testcase classname="GroupInvitesController remove should remove a group invite" name="GroupInvitesController remove should remove a group invite" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="CanCreateRosterGuard" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:23" time="0.424" tests="9">
    <testcase classname="CanCreateRosterGuard should be defined" name="CanCreateRosterGuard should be defined" time="0.006">
    </testcase>
    <testcase classname="CanCreateRosterGuard canActivate should throw BadRequestException if stageId is missing" name="CanCreateRosterGuard canActivate should throw BadRequestException if stageId is missing" time="0.023">
    </testcase>
    <testcase classname="CanCreateRosterGuard canActivate should throw BadRequestException if participationId is missing" name="CanCreateRosterGuard canActivate should throw BadRequestException if participationId is missing" time="0.003">
    </testcase>
    <testcase classname="CanCreateRosterGuard canActivate should throw BadRequestException if members are missing" name="CanCreateRosterGuard canActivate should throw BadRequestException if members are missing" time="0.003">
    </testcase>
    <testcase classname="CanCreateRosterGuard canActivate should throw ForbiddenException if roster already exists" name="CanCreateRosterGuard canActivate should throw ForbiddenException if roster already exists" time="0.022">
    </testcase>
    <testcase classname="CanCreateRosterGuard canActivate should throw ForbiddenException if stage is not the first stage" name="CanCreateRosterGuard canActivate should throw ForbiddenException if stage is not the first stage" time="0.003">
    </testcase>
    <testcase classname="CanCreateRosterGuard canActivate should return true if all conditions are met" name="CanCreateRosterGuard canActivate should return true if all conditions are met" time="0.007">
    </testcase>
    <testcase classname="CanCreateRosterGuard checkIfRosterAlreadyExists should throw ForbiddenException if roster already exists" name="CanCreateRosterGuard checkIfRosterAlreadyExists should throw ForbiddenException if roster already exists" time="0.002">
    </testcase>
    <testcase classname="CanCreateRosterGuard checkIfRosterAlreadyExists should not throw if roster does not exist" name="CanCreateRosterGuard checkIfRosterAlreadyExists should not throw if roster does not exist" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="FollowersController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:23" time="0.49" tests="5">
    <testcase classname="FollowersController should be defined" name="FollowersController should be defined" time="0.008">
    </testcase>
    <testcase classname="FollowersController findAll should return followers with metadata" name="FollowersController findAll should return followers with metadata" time="0.004">
    </testcase>
    <testcase classname="FollowersController findOne should return a single follower relationship" name="FollowersController findOne should return a single follower relationship" time="0.003">
    </testcase>
    <testcase classname="FollowersController create should create a follower relationship" name="FollowersController create should create a follower relationship" time="0.008">
    </testcase>
    <testcase classname="FollowersController remove should remove a follower relationship" name="FollowersController remove should remove a follower relationship" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="GroupJoinRequestsController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:23" time="0.557" tests="8">
    <testcase classname="GroupJoinRequestsController should be defined" name="GroupJoinRequestsController should be defined" time="0.012">
    </testcase>
    <testcase classname="GroupJoinRequestsController create should create a group join request" name="GroupJoinRequestsController create should create a group join request" time="0.004">
    </testcase>
    <testcase classname="GroupJoinRequestsController findAll should return an array of group join requests" name="GroupJoinRequestsController findAll should return an array of group join requests" time="0.007">
    </testcase>
    <testcase classname="GroupJoinRequestsController findOne should return a group join request" name="GroupJoinRequestsController findOne should return a group join request" time="0.007">
    </testcase>
    <testcase classname="GroupJoinRequestsController update should update a group join request" name="GroupJoinRequestsController update should update a group join request" time="0.003">
    </testcase>
    <testcase classname="GroupJoinRequestsController remove should remove a group join request" name="GroupJoinRequestsController remove should remove a group join request" time="0.002">
    </testcase>
    <testcase classname="GroupJoinRequestsController accept should accept a group join request" name="GroupJoinRequestsController accept should accept a group join request" time="0.004">
    </testcase>
    <testcase classname="GroupJoinRequestsController reject should reject a group join request" name="GroupJoinRequestsController reject should reject a group join request" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="TournamentRequestsDtos" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:23" time="0.346" tests="12">
    <testcase classname="TournamentRequestsDtos CreateTournamentRequest should fail validation with empty object" name="TournamentRequestsDtos CreateTournamentRequest should fail validation with empty object" time="0.007">
    </testcase>
    <testcase classname="TournamentRequestsDtos CreateTournamentRequest should fail validation with invalid data types" name="TournamentRequestsDtos CreateTournamentRequest should fail validation with invalid data types" time="0.002">
    </testcase>
    <testcase classname="TournamentRequestsDtos CreateTournamentRequest should fail validation with invalid string lengths" name="TournamentRequestsDtos CreateTournamentRequest should fail validation with invalid string lengths" time="0.002">
    </testcase>
    <testcase classname="TournamentRequestsDtos CreateTournamentRequest should fail validation with invalid number ranges" name="TournamentRequestsDtos CreateTournamentRequest should fail validation with invalid number ranges" time="0.001">
    </testcase>
    <testcase classname="TournamentRequestsDtos CreateTournamentRequest should pass validation with valid data" name="TournamentRequestsDtos CreateTournamentRequest should pass validation with valid data" time="0.001">
    </testcase>
    <testcase classname="TournamentRequestsDtos UpdateTournamentRequest should pass validation with empty object" name="TournamentRequestsDtos UpdateTournamentRequest should pass validation with empty object" time="0.001">
    </testcase>
    <testcase classname="TournamentRequestsDtos UpdateTournamentRequest should fail validation with invalid data types" name="TournamentRequestsDtos UpdateTournamentRequest should fail validation with invalid data types" time="0.001">
    </testcase>
    <testcase classname="TournamentRequestsDtos UpdateTournamentRequest should pass validation with valid partial data" name="TournamentRequestsDtos UpdateTournamentRequest should pass validation with valid partial data" time="0.001">
    </testcase>
    <testcase classname="TournamentRequestsDtos TournamentQuery should pass validation with empty object" name="TournamentRequestsDtos TournamentQuery should pass validation with empty object" time="0.001">
    </testcase>
    <testcase classname="TournamentRequestsDtos TournamentQuery should fail validation with invalid data types" name="TournamentRequestsDtos TournamentQuery should fail validation with invalid data types" time="0.002">
    </testcase>
    <testcase classname="TournamentRequestsDtos TournamentQuery should pass validation with valid data" name="TournamentRequestsDtos TournamentQuery should pass validation with valid data" time="0.001">
    </testcase>
    <testcase classname="TournamentRequestsDtos TournamentQuery should pass validation with valid ranges" name="TournamentRequestsDtos TournamentQuery should pass validation with valid ranges" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="GroupInvitesService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:23" time="0.445" tests="16">
    <testcase classname="GroupInvitesService should be defined" name="GroupInvitesService should be defined" time="0.006">
    </testcase>
    <testcase classname="GroupInvitesService create should create a group invite and send notification" name="GroupInvitesService create should create a group invite and send notification" time="0.004">
    </testcase>
    <testcase classname="GroupInvitesService create should throw BadRequestException if user is already a member" name="GroupInvitesService create should throw BadRequestException if user is already a member" time="0.06">
    </testcase>
    <testcase classname="GroupInvitesService sendNotificationToInvitedUser should send notification to invited user" name="GroupInvitesService sendNotificationToInvitedUser should send notification to invited user" time="0.003">
    </testcase>
    <testcase classname="GroupInvitesService findAll should return an array of group invites" name="GroupInvitesService findAll should return an array of group invites" time="0.002">
    </testcase>
    <testcase classname="GroupInvitesService findOne should return a group invite" name="GroupInvitesService findOne should return a group invite" time="0.002">
    </testcase>
    <testcase classname="GroupInvitesService update should update a group invite" name="GroupInvitesService update should update a group invite" time="0.002">
    </testcase>
    <testcase classname="GroupInvitesService remove should remove a group invite" name="GroupInvitesService remove should remove a group invite" time="0.025">
    </testcase>
    <testcase classname="GroupInvitesService accept should accept invite, create membership, remove invite and send notification" name="GroupInvitesService accept should accept invite, create membership, remove invite and send notification" time="0.003">
    </testcase>
    <testcase classname="GroupInvitesService reject should reject invite, remove invite and send notification" name="GroupInvitesService reject should reject invite, remove invite and send notification" time="0.009">
    </testcase>
    <testcase classname="GroupInvitesService sendNotificationAboutAcceptance should send notification about acceptance" name="GroupInvitesService sendNotificationAboutAcceptance should send notification about acceptance" time="0.004">
    </testcase>
    <testcase classname="GroupInvitesService sendNotificationAboutRejection should send notification about rejection" name="GroupInvitesService sendNotificationAboutRejection should send notification about rejection" time="0.003">
    </testcase>
    <testcase classname="GroupInvitesService checkIfUserIsAlreadyMember should throw BadRequestException if user is already a member" name="GroupInvitesService checkIfUserIsAlreadyMember should throw BadRequestException if user is already a member" time="0.003">
    </testcase>
    <testcase classname="GroupInvitesService checkIfUserIsAlreadyMember should not throw if user is not a member" name="GroupInvitesService checkIfUserIsAlreadyMember should not throw if user is not a member" time="0.002">
    </testcase>
    <testcase classname="GroupInvitesService checkIfInviteExists should throw BadRequestException if invite already exists" name="GroupInvitesService checkIfInviteExists should throw BadRequestException if invite already exists" time="0.003">
    </testcase>
    <testcase classname="GroupInvitesService checkIfInviteExists should not throw if invite does not exist" name="GroupInvitesService checkIfInviteExists should not throw if invite does not exist" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="SseNotificationsService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:23" time="0.406" tests="19">
    <testcase classname="SseNotificationsService should be defined" name="SseNotificationsService should be defined" time="0.01">
    </testcase>
    <testcase classname="SseNotificationsService findAllForUser should call repository.getReadTimeSorted with the query" name="SseNotificationsService findAllForUser should call repository.getReadTimeSorted with the query" time="0.005">
    </testcase>
    <testcase classname="SseNotificationsService createNotificationAndLinkToUsers should call repository.createWithUsers with notification and user ids" name="SseNotificationsService createNotificationAndLinkToUsers should call repository.createWithUsers with notification and user ids" time="0.019">
    </testcase>
    <testcase classname="SseNotificationsService createNotificationAndLinkToUsers should not call eventEmitter.emitAsync" name="SseNotificationsService createNotificationAndLinkToUsers should not call eventEmitter.emitAsync" time="0.004">
    </testcase>
    <testcase classname="SseNotificationsService publishManyNotifications should call publishNotification for each user id" name="SseNotificationsService publishManyNotifications should call publishNotification for each user id" time="0.005">
    </testcase>
    <testcase classname="SseNotificationsService publishManyNotifications should resolve when all publishNotification calls resolve" name="SseNotificationsService publishManyNotifications should resolve when all publishNotification calls resolve" time="0.005">
    </testcase>
    <testcase classname="SseNotificationsService publishManyNotifications should reject if any publishNotification call rejects" name="SseNotificationsService publishManyNotifications should reject if any publishNotification call rejects" time="0.026">
    </testcase>
    <testcase classname="SseNotificationsService createWithUsers should create notifications and publish them to users" name="SseNotificationsService createWithUsers should create notifications and publish them to users" time="0.008">
    </testcase>
    <testcase classname="SseNotificationsService createWithUsers should still publish notifications if repository.createWithUsers fails" name="SseNotificationsService createWithUsers should still publish notifications if repository.createWithUsers fails" time="0.009">
    </testcase>
    <testcase classname="SseNotificationsService requestNewToken should update user token and return the updated user" name="SseNotificationsService requestNewToken should update user token and return the updated user" time="0.004">
    </testcase>
    <testcase classname="SseNotificationsService getUserIdByToken should return the user id when token is valid" name="SseNotificationsService getUserIdByToken should return the user id when token is valid" time="0.003">
    </testcase>
    <testcase classname="SseNotificationsService getUserIdByToken should throw BadRequestException when token is invalid" name="SseNotificationsService getUserIdByToken should throw BadRequestException when token is invalid" time="0.014">
    </testcase>
    <testcase classname="SseNotificationsService publishNotification should emit notification to user" name="SseNotificationsService publishNotification should emit notification to user" time="0.005">
    </testcase>
    <testcase classname="SseNotificationsService publishNotification should handle errors when emitting notification" name="SseNotificationsService publishNotification should handle errors when emitting notification" time="0.005">
    </testcase>
    <testcase classname="SseNotificationsService setAsRead should call repository.updateToRead with the notification id" name="SseNotificationsService setAsRead should call repository.updateToRead with the notification id" time="0.01">
    </testcase>
    <testcase classname="SseNotificationsService setAllAsReadForUser should call repository.updateAllToReadForUser with the user id" name="SseNotificationsService setAllAsReadForUser should call repository.updateAllToReadForUser with the user id" time="0.009">
    </testcase>
    <testcase classname="SseNotificationsService setBulkAsRead should call repository.updateBulkToRead with the notification ids" name="SseNotificationsService setBulkAsRead should call repository.updateBulkToRead with the notification ids" time="0.006">
    </testcase>
    <testcase classname="SseNotificationsService remove should call repository.deleteEntity with the notification id" name="SseNotificationsService remove should call repository.deleteEntity with the notification id" time="0.004">
    </testcase>
    <testcase classname="SseNotificationsService getNotificationStream should return an Promise since it works that way with our implementation" name="SseNotificationsService getNotificationStream should return an Promise since it works that way with our implementation" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="StageAdminGuard" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:23" time="0.454" tests="12">
    <testcase classname="StageAdminGuard JWT Authentication should deny access when JWT authentication fails" name="StageAdminGuard JWT Authentication should deny access when JWT authentication fails" time="0.008">
    </testcase>
    <testcase classname="StageAdminGuard Admin Role Access should allow access for users with ADMIN role" name="StageAdminGuard Admin Role Access should allow access for users with ADMIN role" time="0.003">
    </testcase>
    <testcase classname="StageAdminGuard Tournament Creator Access should allow access for tournament creator" name="StageAdminGuard Tournament Creator Access should allow access for tournament creator" time="0.003">
    </testcase>
    <testcase classname="StageAdminGuard Tournament Creator Access should get stageId from request body if not in params" name="StageAdminGuard Tournament Creator Access should get stageId from request body if not in params" time="0.003">
    </testcase>
    <testcase classname="StageAdminGuard Tournament Creator Access should get stageId from query if not in params or body" name="StageAdminGuard Tournament Creator Access should get stageId from query if not in params or body" time="0.003">
    </testcase>
    <testcase classname="StageAdminGuard Group Admin Access should allow access for group admin" name="StageAdminGuard Group Admin Access should allow access for group admin" time="0.003">
    </testcase>
    <testcase classname="StageAdminGuard Group Admin Access should deny access if tournament has no affiliated group" name="StageAdminGuard Group Admin Access should deny access if tournament has no affiliated group" time="0.002">
    </testcase>
    <testcase classname="StageAdminGuard Group Admin Access should deny access if user is not group admin" name="StageAdminGuard Group Admin Access should deny access if user is not group admin" time="0.001">
    </testcase>
    <testcase classname="StageAdminGuard Failed Access Scenarios should deny access when stageId is not provided" name="StageAdminGuard Failed Access Scenarios should deny access when stageId is not provided" time="0.001">
    </testcase>
    <testcase classname="StageAdminGuard Failed Access Scenarios should deny access when stage is not found" name="StageAdminGuard Failed Access Scenarios should deny access when stage is not found" time="0.002">
    </testcase>
    <testcase classname="StageAdminGuard Failed Access Scenarios should deny access when tournament is not found" name="StageAdminGuard Failed Access Scenarios should deny access when tournament is not found" time="0.002">
    </testcase>
    <testcase classname="StageAdminGuard Failed Access Scenarios should deny access when user is not creator and not group admin" name="StageAdminGuard Failed Access Scenarios should deny access when user is not creator and not group admin" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="QuizAttemptService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:24" time="0.351" tests="19">
    <testcase classname="QuizAttemptService should be defined" name="QuizAttemptService should be defined" time="0.008">
    </testcase>
    <testcase classname="QuizAttemptService create should create a new quiz attempt successfully" name="QuizAttemptService create should create a new quiz attempt successfully" time="0.003">
    </testcase>
    <testcase classname="QuizAttemptService create should return existing attempt if one exists" name="QuizAttemptService create should return existing attempt if one exists" time="0.003">
    </testcase>
    <testcase classname="QuizAttemptService create should throw NotFoundException if quiz not found" name="QuizAttemptService create should throw NotFoundException if quiz not found" time="0.022">
    </testcase>
    <testcase classname="QuizAttemptService create should throw ForbiddenException if quiz does not allow anonymous and user is anonymous" name="QuizAttemptService create should throw ForbiddenException if quiz does not allow anonymous and user is anonymous" time="0.004">
    </testcase>
    <testcase classname="QuizAttemptService create should throw UnprocessableEntityException if attempt creation fails" name="QuizAttemptService create should throw UnprocessableEntityException if attempt creation fails" time="0.003">
    </testcase>
    <testcase classname="QuizAttemptService findAll should return results from repository" name="QuizAttemptService findAll should return results from repository" time="0.002">
    </testcase>
    <testcase classname="QuizAttemptService findOne should return attempt by id" name="QuizAttemptService findOne should return attempt by id" time="0.003">
    </testcase>
    <testcase classname="QuizAttemptService findOne should throw NotFoundException if attempt not found" name="QuizAttemptService findOne should throw NotFoundException if attempt not found" time="0.002">
    </testcase>
    <testcase classname="QuizAttemptService submitAttempt should submit attempt successfully" name="QuizAttemptService submitAttempt should submit attempt successfully" time="0.003">
    </testcase>
    <testcase classname="QuizAttemptService submitAttempt should throw NotFoundException if attempt submission fails" name="QuizAttemptService submitAttempt should throw NotFoundException if attempt submission fails" time="0.002">
    </testcase>
    <testcase classname="QuizAttemptService createAnswer should create answer successfully" name="QuizAttemptService createAnswer should create answer successfully" time="0.004">
    </testcase>
    <testcase classname="QuizAttemptService createAnswer should throw UnprocessableEntityException if answer creation fails" name="QuizAttemptService createAnswer should throw UnprocessableEntityException if answer creation fails" time="0.014">
    </testcase>
    <testcase classname="QuizAttemptService updateAnswer should update answer successfully" name="QuizAttemptService updateAnswer should update answer successfully" time="0.006">
    </testcase>
    <testcase classname="QuizAttemptService updateAnswer should throw NotFoundException if answer update fails" name="QuizAttemptService updateAnswer should throw NotFoundException if answer update fails" time="0.002">
    </testcase>
    <testcase classname="QuizAttemptService getUserAttempts should return user attempts" name="QuizAttemptService getUserAttempts should return user attempts" time="0.003">
    </testcase>
    <testcase classname="QuizAttemptService checkAttempter should not throw error if user is owner of attempt" name="QuizAttemptService checkAttempter should not throw error if user is owner of attempt" time="0.003">
    </testcase>
    <testcase classname="QuizAttemptService checkAttempter should throw NotFoundException if attempt not found" name="QuizAttemptService checkAttempter should throw NotFoundException if attempt not found" time="0.008">
    </testcase>
    <testcase classname="QuizAttemptService checkAttempter should throw ForbiddenException if user is not owner" name="QuizAttemptService checkAttempter should throw ForbiddenException if user is not owner" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="GroupJoinRequestsService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:24" time="0.331" tests="14">
    <testcase classname="GroupJoinRequestsService should be defined" name="GroupJoinRequestsService should be defined" time="0.007">
    </testcase>
    <testcase classname="GroupJoinRequestsService create should create a group join request and send notifications to admins" name="GroupJoinRequestsService create should create a group join request and send notifications to admins" time="0.005">
    </testcase>
    <testcase classname="GroupJoinRequestsService sendNotificationsToAdmins should send notifications to all group admins" name="GroupJoinRequestsService sendNotificationsToAdmins should send notifications to all group admins" time="0.002">
    </testcase>
    <testcase classname="GroupJoinRequestsService findAll should return an array of group join requests" name="GroupJoinRequestsService findAll should return an array of group join requests" time="0.003">
    </testcase>
    <testcase classname="GroupJoinRequestsService findOne should return a group join request" name="GroupJoinRequestsService findOne should return a group join request" time="0.003">
    </testcase>
    <testcase classname="GroupJoinRequestsService findOne should throw NotFoundException when group join request not found" name="GroupJoinRequestsService findOne should throw NotFoundException when group join request not found" time="0.036">
    </testcase>
    <testcase classname="GroupJoinRequestsService update should update a group join request" name="GroupJoinRequestsService update should update a group join request" time="0.007">
    </testcase>
    <testcase classname="GroupJoinRequestsService remove should remove a group join request" name="GroupJoinRequestsService remove should remove a group join request" time="0.005">
    </testcase>
    <testcase classname="GroupJoinRequestsService accept should accept a join request, create membership, delete request and send notification" name="GroupJoinRequestsService accept should accept a join request, create membership, delete request and send notification" time="0.003">
    </testcase>
    <testcase classname="GroupJoinRequestsService accept should throw BadRequestException when request does not exist" name="GroupJoinRequestsService accept should throw BadRequestException when request does not exist" time="0.003">
    </testcase>
    <testcase classname="GroupJoinRequestsService reject should reject a join request, delete request and send notification" name="GroupJoinRequestsService reject should reject a join request, delete request and send notification" time="0.003">
    </testcase>
    <testcase classname="GroupJoinRequestsService reject should throw NotFoundException when request does not exist" name="GroupJoinRequestsService reject should throw NotFoundException when request does not exist" time="0.003">
    </testcase>
    <testcase classname="GroupJoinRequestsService sendAcceptanceNotification should send notification about request acceptance" name="GroupJoinRequestsService sendAcceptanceNotification should send notification about request acceptance" time="0.003">
    </testcase>
    <testcase classname="GroupJoinRequestsService sendRejectionNotification should send notification about request rejection" name="GroupJoinRequestsService sendRejectionNotification should send notification about request rejection" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="GroupService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:24" time="0.448" tests="21">
    <testcase classname="GroupService should be defined" name="GroupService should be defined" time="0.018">
    </testcase>
    <testcase classname="GroupService create should create a group successfully" name="GroupService create should create a group successfully" time="0.007">
    </testcase>
    <testcase classname="GroupService create should throw UnprocessableEntityException when creation fails" name="GroupService create should throw UnprocessableEntityException when creation fails" time="0.086">
    </testcase>
    <testcase classname="GroupService findAll should return array of groups" name="GroupService findAll should return array of groups" time="0.01">
    </testcase>
    <testcase classname="GroupService findOne should return a group" name="GroupService findOne should return a group" time="0.003">
    </testcase>
    <testcase classname="GroupService findOne should throw NotFoundException when group not found" name="GroupService findOne should throw NotFoundException when group not found" time="0.003">
    </testcase>
    <testcase classname="GroupService update should update a group successfully" name="GroupService update should update a group successfully" time="0.011">
    </testcase>
    <testcase classname="GroupService update should throw UnprocessableEntityException when update fails" name="GroupService update should throw UnprocessableEntityException when update fails" time="0.004">
    </testcase>
    <testcase classname="GroupService update should throw NotFoundException when group not found" name="GroupService update should throw NotFoundException when group not found" time="0.003">
    </testcase>
    <testcase classname="GroupService remove should remove a group successfully" name="GroupService remove should remove a group successfully" time="0.002">
    </testcase>
    <testcase classname="GroupService remove should throw UnprocessableEntityException when removal fails" name="GroupService remove should throw UnprocessableEntityException when removal fails" time="0.002">
    </testcase>
    <testcase classname="GroupService remove should throw NotFoundException when group not found" name="GroupService remove should throw NotFoundException when group not found" time="0.007">
    </testcase>
    <testcase classname="GroupService getGroupMembers should return group members" name="GroupService getGroupMembers should return group members" time="0.003">
    </testcase>
    <testcase classname="GroupService getGroupMembers should throw NotFoundException when group not found" name="GroupService getGroupMembers should throw NotFoundException when group not found" time="0.003">
    </testcase>
    <testcase classname="GroupService getGroupTournaments should return group tournaments" name="GroupService getGroupTournaments should return group tournaments" time="0.003">
    </testcase>
    <testcase classname="GroupService getGroupTournaments should throw NotFoundException when group not found" name="GroupService getGroupTournaments should throw NotFoundException when group not found" time="0.003">
    </testcase>
    <testcase classname="GroupService getGroupFollowers should return group followers" name="GroupService getGroupFollowers should return group followers" time="0.01">
    </testcase>
    <testcase classname="GroupService getGroupFollowers should throw NotFoundException when group not found" name="GroupService getGroupFollowers should throw NotFoundException when group not found" time="0.003">
    </testcase>
    <testcase classname="GroupService checkIfGroupIsReal should return void when group exists" name="GroupService checkIfGroupIsReal should return void when group exists" time="0.003">
    </testcase>
    <testcase classname="GroupService checkIfGroupIsReal should throw NotFoundException when group type is FAKE" name="GroupService checkIfGroupIsReal should throw NotFoundException when group type is FAKE" time="0.002">
    </testcase>
    <testcase classname="GroupService checkIfGroupIsReal should throw NotFoundException when group does not exist" name="GroupService checkIfGroupIsReal should throw NotFoundException when group does not exist" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="GroupMembershipController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:24" time="0.456" tests="7">
    <testcase classname="GroupMembershipController should be defined" name="GroupMembershipController should be defined" time="0.008">
    </testcase>
    <testcase classname="GroupMembershipController findAll should return paginated group memberships with metadata" name="GroupMembershipController findAll should return paginated group memberships with metadata" time="0.005">
    </testcase>
    <testcase classname="GroupMembershipController findOne should return a specific group membership" name="GroupMembershipController findOne should return a specific group membership" time="0.006">
    </testcase>
    <testcase classname="GroupMembershipController findOne should handle missing responseType" name="GroupMembershipController findOne should handle missing responseType" time="0.003">
    </testcase>
    <testcase classname="GroupMembershipController create should create a group membership" name="GroupMembershipController create should create a group membership" time="0.011">
    </testcase>
    <testcase classname="GroupMembershipController update should update a group membership" name="GroupMembershipController update should update a group membership" time="0.035">
    </testcase>
    <testcase classname="GroupMembershipController remove should remove a group membership" name="GroupMembershipController remove should remove a group membership" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="GroupRequirementsController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:24" time="0.416" tests="5">
    <testcase classname="GroupRequirementsController should be defined" name="GroupRequirementsController should be defined" time="0.007">
    </testcase>
    <testcase classname="GroupRequirementsController createRequirements should create requirements" name="GroupRequirementsController createRequirements should create requirements" time="0.004">
    </testcase>
    <testcase classname="GroupRequirementsController getRequirements should get requirements" name="GroupRequirementsController getRequirements should get requirements" time="0.003">
    </testcase>
    <testcase classname="GroupRequirementsController updateRequirements should update requirements" name="GroupRequirementsController updateRequirements should update requirements" time="0.007">
    </testcase>
    <testcase classname="GroupRequirementsController deleteRequirements should delete requirements" name="GroupRequirementsController deleteRequirements should delete requirements" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="LFPController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:23" time="0.886" tests="5">
    <testcase classname="LFPController createLFP should create an LFP post" name="LFPController createLFP should create an LFP post" time="0.01">
    </testcase>
    <testcase classname="LFPController getForGroup should get LFP posts for a group" name="LFPController getForGroup should get LFP posts for a group" time="0.02">
    </testcase>
    <testcase classname="LFPController getGroups should get groups based on query parameters" name="LFPController getGroups should get groups based on query parameters" time="0.005">
    </testcase>
    <testcase classname="LFPController updateLFP should update an LFP post" name="LFPController updateLFP should update an LFP post" time="0.008">
    </testcase>
    <testcase classname="LFPController deleteLFP should delete an LFP post" name="LFPController deleteLFP should delete an LFP post" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="QuizService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:24" time="0.438" tests="15">
    <testcase classname="QuizService should be defined" name="QuizService should be defined" time="0.016">
    </testcase>
    <testcase classname="QuizService create should create a quiz successfully" name="QuizService create should create a quiz successfully" time="0.003">
    </testcase>
    <testcase classname="QuizService create should throw UnprocessableEntityException if creation fails" name="QuizService create should throw UnprocessableEntityException if creation fails" time="0.075">
    </testcase>
    <testcase classname="QuizService findAll should return all quizzes" name="QuizService findAll should return all quizzes" time="0.013">
    </testcase>
    <testcase classname="QuizService findOne should return a quiz by id" name="QuizService findOne should return a quiz by id" time="0.003">
    </testcase>
    <testcase classname="QuizService findOne should throw NotFoundException if quiz not found" name="QuizService findOne should throw NotFoundException if quiz not found" time="0.003">
    </testcase>
    <testcase classname="QuizService update should update a quiz successfully" name="QuizService update should update a quiz successfully" time="0.002">
    </testcase>
    <testcase classname="QuizService update should throw NotFoundException if quiz not found" name="QuizService update should throw NotFoundException if quiz not found" time="0.003">
    </testcase>
    <testcase classname="QuizService remove should remove a quiz successfully" name="QuizService remove should remove a quiz successfully" time="0.003">
    </testcase>
    <testcase classname="QuizService remove should throw NotFoundException if quiz not found" name="QuizService remove should throw NotFoundException if quiz not found" time="0.002">
    </testcase>
    <testcase classname="QuizService autoComplete should return quizzes matching the search term" name="QuizService autoComplete should return quizzes matching the search term" time="0.019">
    </testcase>
    <testcase classname="QuizService getAuthoredQuizzes should return quizzes authored by the user" name="QuizService getAuthoredQuizzes should return quizzes authored by the user" time="0.002">
    </testcase>
    <testcase classname="QuizService checkAuthor should not throw an error if user is the author" name="QuizService checkAuthor should not throw an error if user is the author" time="0.007">
    </testcase>
    <testcase classname="QuizService checkAuthor should throw NotFoundException if quiz not found" name="QuizService checkAuthor should throw NotFoundException if quiz not found" time="0.002">
    </testcase>
    <testcase classname="QuizService checkAuthor should throw ForbiddenException if user is not the author" name="QuizService checkAuthor should throw ForbiddenException if user is not the author" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="SseNotificationsController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:24" time="0.539" tests="12">
    <testcase classname="SseNotificationsController should be defined" name="SseNotificationsController should be defined" time="0.015">
    </testcase>
    <testcase classname="SseNotificationsController findAll should call service.findAllForUser with correct parameters" name="SseNotificationsController findAll should call service.findAllForUser with correct parameters" time="0.005">
    </testcase>
    <testcase classname="SseNotificationsController findAll should handle empty query parameters" name="SseNotificationsController findAll should handle empty query parameters" time="0.008">
    </testcase>
    <testcase classname="SseNotificationsController requestNewToken should call service.requestNewToken with user id" name="SseNotificationsController requestNewToken should call service.requestNewToken with user id" time="0.007">
    </testcase>
    <testcase classname="SseNotificationsController markAsRead should call service.setAsRead with notification id" name="SseNotificationsController markAsRead should call service.setAsRead with notification id" time="0.008">
    </testcase>
    <testcase classname="SseNotificationsController markAllAsRead should call service.setAllAsReadForUser with user id" name="SseNotificationsController markAllAsRead should call service.setAllAsReadForUser with user id" time="0.023">
    </testcase>
    <testcase classname="SseNotificationsController markBulkAsRead should call service.setBulkAsRead with notification ids" name="SseNotificationsController markBulkAsRead should call service.setBulkAsRead with notification ids" time="0.002">
    </testcase>
    <testcase classname="SseNotificationsController markBulkAsRead should handle empty array of ids" name="SseNotificationsController markBulkAsRead should handle empty array of ids" time="0.002">
    </testcase>
    <testcase classname="SseNotificationsController remove should call service.remove with notification id" name="SseNotificationsController remove should call service.remove with notification id" time="0.007">
    </testcase>
    <testcase classname="SseNotificationsController getNotificationStream should throw UnauthorizedException when token is missing" name="SseNotificationsController getNotificationStream should throw UnauthorizedException when token is missing" time="0.038">
    </testcase>
    <testcase classname="SseNotificationsController getNotificationStream should call service.getUserIdByToken with token and return stream" name="SseNotificationsController getNotificationStream should call service.getUserIdByToken with token and return stream" time="0.003">
    </testcase>
    <testcase classname="SseNotificationsController getNotificationStream should propagate errors from getUserIdByToken" name="SseNotificationsController getNotificationStream should propagate errors from getUserIdByToken" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="LocationService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:24" time="0.335" tests="15">
    <testcase classname="LocationService getLocationByApiId should return location when found" name="LocationService getLocationByApiId should return location when found" time="0.012">
    </testcase>
    <testcase classname="LocationService getLocationByApiId should return undefined when location not found" name="LocationService getLocationByApiId should return undefined when location not found" time="0.003">
    </testcase>
    <testcase classname="LocationService create should return existing location if found by apiId" name="LocationService create should return existing location if found by apiId" time="0.003">
    </testcase>
    <testcase classname="LocationService create should create new location if not exists" name="LocationService create should create new location if not exists" time="0.01">
    </testcase>
    <testcase classname="LocationService create should throw UnprocessableEntityException when creation fails" name="LocationService create should throw UnprocessableEntityException when creation fails" time="0.066">
    </testcase>
    <testcase classname="LocationService findAll should return all locations with default response type" name="LocationService findAll should return all locations with default response type" time="0.003">
    </testcase>
    <testcase classname="LocationService findAll should return locations with specified response type" name="LocationService findAll should return locations with specified response type" time="0.002">
    </testcase>
    <testcase classname="LocationService findOne should return a single location" name="LocationService findOne should return a single location" time="0.003">
    </testcase>
    <testcase classname="LocationService findOne should throw NotFoundException when location not found" name="LocationService findOne should throw NotFoundException when location not found" time="0.002">
    </testcase>
    <testcase classname="LocationService update should update location successfully" name="LocationService update should update location successfully" time="0.003">
    </testcase>
    <testcase classname="LocationService update should throw NotFoundException when location not found" name="LocationService update should throw NotFoundException when location not found" time="0.002">
    </testcase>
    <testcase classname="LocationService update should update with coordinates when lat and lng provided" name="LocationService update should update with coordinates when lat and lng provided" time="0.002">
    </testcase>
    <testcase classname="LocationService remove should remove location successfully" name="LocationService remove should remove location successfully" time="0.003">
    </testcase>
    <testcase classname="LocationService remove should throw NotFoundException when location not found" name="LocationService remove should throw NotFoundException when location not found" time="0.004">
    </testcase>
    <testcase classname="LocationService getMap should return all locations" name="LocationService getMap should return all locations" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="InterestController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:24" time="0.339" tests="3">
    <testcase classname="InterestController createInterest should create an interest" name="InterestController createInterest should create an interest" time="0.007">
    </testcase>
    <testcase classname="InterestController deleteInterest should delete an interest" name="InterestController deleteInterest should delete an interest" time="0.003">
    </testcase>
    <testcase classname="InterestController getInterestCategories should return interest categories with metadata" name="InterestController getInterestCategories should return interest categories with metadata" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="GoogleStrategy" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:24" time="0.315" tests="5">
    <testcase classname="GoogleStrategy should be defined" name="GoogleStrategy should be defined" time="0.008">
    </testcase>
    <testcase classname="GoogleStrategy validate should return existing user if found" name="GoogleStrategy validate should return existing user if found" time="0.003">
    </testcase>
    <testcase classname="GoogleStrategy validate should create new user if not found" name="GoogleStrategy validate should create new user if not found" time="0.008">
    </testcase>
    <testcase classname="GoogleStrategy validate should throw InternalServerErrorException if user creation fails" name="GoogleStrategy validate should throw InternalServerErrorException if user creation fails" time="0.023">
    </testcase>
    <testcase classname="GoogleStrategy validate should throw InternalServerErrorException if created user cannot be found" name="GoogleStrategy validate should throw InternalServerErrorException if created user cannot be found" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="BlockedGroupsController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:24" time="0.362" tests="3">
    <testcase classname="BlockedGroupsController findAll should return blocked groups with metadata" name="BlockedGroupsController findAll should return blocked groups with metadata" time="0.01">
    </testcase>
    <testcase classname="BlockedGroupsController block should block a group" name="BlockedGroupsController block should block a group" time="0.003">
    </testcase>
    <testcase classname="BlockedGroupsController unblock should unblock a group" name="BlockedGroupsController unblock should unblock a group" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="ConditionalAdminGuard" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:24" time="0.367" tests="7">
    <testcase classname="ConditionalAdminGuard when affiliatedGroupId is provided should check group admin permissions" name="ConditionalAdminGuard when affiliatedGroupId is provided should check group admin permissions" time="0.008">
    </testcase>
    <testcase classname="ConditionalAdminGuard when affiliatedGroupId is provided should deny access when group admin check fails" name="ConditionalAdminGuard when affiliatedGroupId is provided should deny access when group admin check fails" time="0.003">
    </testcase>
    <testcase classname="ConditionalAdminGuard when affiliatedGroupId is not provided should allow access without group admin check" name="ConditionalAdminGuard when affiliatedGroupId is not provided should allow access without group admin check" time="0.002">
    </testcase>
    <testcase classname="ConditionalAdminGuard when affiliatedGroupId is not provided should allow access with empty request body" name="ConditionalAdminGuard when affiliatedGroupId is not provided should allow access with empty request body" time="0.007">
    </testcase>
    <testcase classname="ConditionalAdminGuard when affiliatedGroupId is not provided should allow access with null affiliatedGroupId" name="ConditionalAdminGuard when affiliatedGroupId is not provided should allow access with null affiliatedGroupId" time="0.003">
    </testcase>
    <testcase classname="ConditionalAdminGuard edge cases should handle undefined request" name="ConditionalAdminGuard edge cases should handle undefined request" time="0.002">
    </testcase>
    <testcase classname="ConditionalAdminGuard edge cases should handle request without body" name="ConditionalAdminGuard edge cases should handle request without body" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="BlockedUsersController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:24" time="0.411" tests="3">
    <testcase classname="BlockedUsersController findAll should return blocked users with metadata" name="BlockedUsersController findAll should return blocked users with metadata" time="0.009">
    </testcase>
    <testcase classname="BlockedUsersController block should block a user" name="BlockedUsersController block should block a user" time="0.003">
    </testcase>
    <testcase classname="BlockedUsersController unblock should unblock a user" name="BlockedUsersController unblock should unblock a user" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="FollowersService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:25" time="0.415" tests="12">
    <testcase classname="FollowersService should be defined" name="FollowersService should be defined" time="0.006">
    </testcase>
    <testcase classname="FollowersService create should create a follower relationship and emit notifications" name="FollowersService create should create a follower relationship and emit notifications" time="0.005">
    </testcase>
    <testcase classname="FollowersService create should throw error when trying to follow self" name="FollowersService create should throw error when trying to follow self" time="0.018">
    </testcase>
    <testcase classname="FollowersService findAll should return array of followers" name="FollowersService findAll should return array of followers" time="0.003">
    </testcase>
    <testcase classname="FollowersService findOne should return a follower relationship" name="FollowersService findOne should return a follower relationship" time="0.003">
    </testcase>
    <testcase classname="FollowersService findOne should throw error when follower relationship not found" name="FollowersService findOne should throw error when follower relationship not found" time="0.002">
    </testcase>
    <testcase classname="FollowersService remove should remove a follower relationship" name="FollowersService remove should remove a follower relationship" time="0.003">
    </testcase>
    <testcase classname="FollowersService remove should throw error when trying to remove non-existent relationship" name="FollowersService remove should throw error when trying to remove non-existent relationship" time="0.002">
    </testcase>
    <testcase classname="FollowersService autoCompleteFollowers should call repository with correct parameters" name="FollowersService autoCompleteFollowers should call repository with correct parameters" time="0.003">
    </testcase>
    <testcase classname="FollowersService autoCompleteFollowing should call repository with correct parameters" name="FollowersService autoCompleteFollowing should call repository with correct parameters" time="0.003">
    </testcase>
    <testcase classname="FollowersService createNotificationBodyForNewFollower should create a notification body with correct data" name="FollowersService createNotificationBodyForNewFollower should create a notification body with correct data" time="0.002">
    </testcase>
    <testcase classname="FollowersService saveAndEmitNotificationsForNewFollower should create and emit notifications for new follower" name="FollowersService saveAndEmitNotificationsForNewFollower should create and emit notifications for new follower" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="GroupInterestsController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:24" time="0.491" tests="3">
    <testcase classname="GroupInterestsController findAll should return group interests with metadata" name="GroupInterestsController findAll should return group interests with metadata" time="0.009">
    </testcase>
    <testcase classname="GroupInterestsController addInterest should add an interest to a group" name="GroupInterestsController addInterest should add an interest to a group" time="0.003">
    </testcase>
    <testcase classname="GroupInterestsController removeInterest should remove an interest from a group" name="GroupInterestsController removeInterest should remove an interest from a group" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="GroupRoleGuardMixin" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:25" time="0.432" tests="24">
    <testcase classname="GroupRoleGuardMixin isOwner Guard should be defined" name="GroupRoleGuardMixin isOwner Guard should be defined" time="0.007">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isOwner Guard canActivate should return false if JWT authentication fails" name="GroupRoleGuardMixin isOwner Guard canActivate should return false if JWT authentication fails" time="0.018">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isOwner Guard canActivate should return false if no groupId is provided" name="GroupRoleGuardMixin isOwner Guard canActivate should return false if no groupId is provided" time="0.003">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isOwner Guard canActivate should return false if groupId is not a number" name="GroupRoleGuardMixin isOwner Guard canActivate should return false if groupId is not a number" time="0.019">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isOwner Guard canActivate should return false if no user is provided" name="GroupRoleGuardMixin isOwner Guard canActivate should return false if no user is provided" time="0.006">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isOwner Guard canActivate should return true if user is an admin" name="GroupRoleGuardMixin isOwner Guard canActivate should return true if user is an admin" time="0.002">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isOwner Guard canActivate should return true if user has isOwner role" name="GroupRoleGuardMixin isOwner Guard canActivate should return true if user has isOwner role" time="0.003">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isOwner Guard canActivate should return false if user does not have isOwner role" name="GroupRoleGuardMixin isOwner Guard canActivate should return false if user does not have isOwner role" time="0.002">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isAdmin Guard should be defined" name="GroupRoleGuardMixin isAdmin Guard should be defined" time="0.003">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isAdmin Guard canActivate should return false if JWT authentication fails" name="GroupRoleGuardMixin isAdmin Guard canActivate should return false if JWT authentication fails" time="0.002">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isAdmin Guard canActivate should return false if no groupId is provided" name="GroupRoleGuardMixin isAdmin Guard canActivate should return false if no groupId is provided" time="0.004">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isAdmin Guard canActivate should return false if groupId is not a number" name="GroupRoleGuardMixin isAdmin Guard canActivate should return false if groupId is not a number" time="0.008">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isAdmin Guard canActivate should return false if no user is provided" name="GroupRoleGuardMixin isAdmin Guard canActivate should return false if no user is provided" time="0.009">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isAdmin Guard canActivate should return true if user is an admin" name="GroupRoleGuardMixin isAdmin Guard canActivate should return true if user is an admin" time="0.002">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isAdmin Guard canActivate should return true if user has isAdmin role" name="GroupRoleGuardMixin isAdmin Guard canActivate should return true if user has isAdmin role" time="0.002">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isAdmin Guard canActivate should return false if user does not have isAdmin role" name="GroupRoleGuardMixin isAdmin Guard canActivate should return false if user does not have isAdmin role" time="0.002">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isMember Guard should be defined" name="GroupRoleGuardMixin isMember Guard should be defined" time="0.003">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isMember Guard canActivate should return false if JWT authentication fails" name="GroupRoleGuardMixin isMember Guard canActivate should return false if JWT authentication fails" time="0.003">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isMember Guard canActivate should return false if no groupId is provided" name="GroupRoleGuardMixin isMember Guard canActivate should return false if no groupId is provided" time="0.002">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isMember Guard canActivate should return false if groupId is not a number" name="GroupRoleGuardMixin isMember Guard canActivate should return false if groupId is not a number" time="0.002">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isMember Guard canActivate should return false if no user is provided" name="GroupRoleGuardMixin isMember Guard canActivate should return false if no user is provided" time="0.002">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isMember Guard canActivate should return true if user is an admin" name="GroupRoleGuardMixin isMember Guard canActivate should return true if user is an admin" time="0.002">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isMember Guard canActivate should return true if user has isMember role" name="GroupRoleGuardMixin isMember Guard canActivate should return true if user has isMember role" time="0.004">
    </testcase>
    <testcase classname="GroupRoleGuardMixin isMember Guard canActivate should return false if user does not have isMember role" name="GroupRoleGuardMixin isMember Guard canActivate should return false if user does not have isMember role" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="CategoryService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:25" time="0.362" tests="11">
    <testcase classname="CategoryService should be defined" name="CategoryService should be defined" time="0.009">
    </testcase>
    <testcase classname="CategoryService should create a category" name="CategoryService should create a category" time="0.006">
    </testcase>
    <testcase classname="CategoryService should throw an unprocessable entity exception when creating a category fails" name="CategoryService should throw an unprocessable entity exception when creating a category fails" time="0.02">
    </testcase>
    <testcase classname="CategoryService should throw an error when creating a category with a duplicate name" name="CategoryService should throw an error when creating a category with a duplicate name" time="0.004">
    </testcase>
    <testcase classname="CategoryService should find all categories" name="CategoryService should find all categories" time="0.004">
    </testcase>
    <testcase classname="CategoryService should find one category" name="CategoryService should find one category" time="0.006">
    </testcase>
    <testcase classname="CategoryService should throw not found exception when category does not exist" name="CategoryService should throw not found exception when category does not exist" time="0.004">
    </testcase>
    <testcase classname="CategoryService should update a category" name="CategoryService should update a category" time="0.003">
    </testcase>
    <testcase classname="CategoryService should throw not found exception when updating non-existent category" name="CategoryService should throw not found exception when updating non-existent category" time="0.003">
    </testcase>
    <testcase classname="CategoryService should remove a category" name="CategoryService should remove a category" time="0.007">
    </testcase>
    <testcase classname="CategoryService should throw not found exception when removing non-existent category" name="CategoryService should throw not found exception when removing non-existent category" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="CanUpdateRosterGuard" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:25" time="0.311" tests="6">
    <testcase classname="CanUpdateRosterGuard should be defined" name="CanUpdateRosterGuard should be defined" time="0.022">
    </testcase>
    <testcase classname="CanUpdateRosterGuard canActivate should throw BadRequestException if stageId is missing" name="CanUpdateRosterGuard canActivate should throw BadRequestException if stageId is missing" time="0.016">
    </testcase>
    <testcase classname="CanUpdateRosterGuard canActivate should throw BadRequestException if rosterId is missing" name="CanUpdateRosterGuard canActivate should throw BadRequestException if rosterId is missing" time="0.002">
    </testcase>
    <testcase classname="CanUpdateRosterGuard canActivate should return false if current stage is the first stage" name="CanUpdateRosterGuard canActivate should return false if current stage is the first stage" time="0.004">
    </testcase>
    <testcase classname="CanUpdateRosterGuard canActivate should return true if current stage is not the first stage and changes are within limit" name="CanUpdateRosterGuard canActivate should return true if current stage is not the first stage and changes are within limit" time="0.002">
    </testcase>
    <testcase classname="CanUpdateRosterGuard canActivate should return false if changes exceed the limit" name="CanUpdateRosterGuard canActivate should return false if changes exceed the limit" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="UserDrizzleRepository" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:25" time="0.293" tests="9">
    <testcase classname="UserDrizzleRepository should be defined" name="UserDrizzleRepository should be defined" time="0.007">
    </testcase>
    <testcase classname="UserDrizzleRepository getQuery should return a valid query with base response type" name="UserDrizzleRepository getQuery should return a valid query with base response type" time="0.019">
    </testcase>
    <testcase classname="UserDrizzleRepository getQuery should return a valid query with extended response type" name="UserDrizzleRepository getQuery should return a valid query with extended response type" time="0.007">
    </testcase>
    <testcase classname="UserDrizzleRepository getSingleQuery should return a valid single query with base response type" name="UserDrizzleRepository getSingleQuery should return a valid single query with base response type" time="0.012">
    </testcase>
    <testcase classname="UserDrizzleRepository getSingleQuery should return a valid single query with extended response type" name="UserDrizzleRepository getSingleQuery should return a valid single query with extended response type" time="0.019">
    </testcase>
    <testcase classname="UserDrizzleRepository should create a valid entity given a valid request" name="UserDrizzleRepository should create a valid entity given a valid request" time="0.006">
    </testcase>
    <testcase classname="UserDrizzleRepository should update a valid entity given a valid request" name="UserDrizzleRepository should update a valid entity given a valid request" time="0.009">
    </testcase>
    <testcase classname="UserDrizzleRepository should delete a valid entity given a valid id" name="UserDrizzleRepository should delete a valid entity given a valid id" time="0.003">
    </testcase>
    <testcase classname="UserDrizzleRepository should check if an entity exists given a valid id" name="UserDrizzleRepository should check if an entity exists given a valid id" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="TournamentAdminGuard" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:25" time="0.506" tests="10">
    <testcase classname="TournamentAdminGuard JWT Authentication should deny access when JWT authentication fails" name="TournamentAdminGuard JWT Authentication should deny access when JWT authentication fails" time="0.006">
    </testcase>
    <testcase classname="TournamentAdminGuard Admin Role Access should allow access for users with ADMIN role" name="TournamentAdminGuard Admin Role Access should allow access for users with ADMIN role" time="0.004">
    </testcase>
    <testcase classname="TournamentAdminGuard Tournament Creator Access should allow access for tournament creator" name="TournamentAdminGuard Tournament Creator Access should allow access for tournament creator" time="0.003">
    </testcase>
    <testcase classname="TournamentAdminGuard Tournament Creator Access should get tournamentId from request body if not in params" name="TournamentAdminGuard Tournament Creator Access should get tournamentId from request body if not in params" time="0.007">
    </testcase>
    <testcase classname="TournamentAdminGuard Tournament Creator Access should get tournamentId from query if not in params or body" name="TournamentAdminGuard Tournament Creator Access should get tournamentId from query if not in params or body" time="0.013">
    </testcase>
    <testcase classname="TournamentAdminGuard Group Admin Access should allow access for group admin" name="TournamentAdminGuard Group Admin Access should allow access for group admin" time="0.004">
    </testcase>
    <testcase classname="TournamentAdminGuard Group Admin Access should deny access if tournament has no affiliated group" name="TournamentAdminGuard Group Admin Access should deny access if tournament has no affiliated group" time="0.003">
    </testcase>
    <testcase classname="TournamentAdminGuard Group Admin Access should deny access if user is not group admin" name="TournamentAdminGuard Group Admin Access should deny access if user is not group admin" time="0.005">
    </testcase>
    <testcase classname="TournamentAdminGuard Failed Access Scenarios should deny access when tournamentId is not provided" name="TournamentAdminGuard Failed Access Scenarios should deny access when tournamentId is not provided" time="0.003">
    </testcase>
    <testcase classname="TournamentAdminGuard Failed Access Scenarios should deny access when user is not creator and not group admin" name="TournamentAdminGuard Failed Access Scenarios should deny access when user is not creator and not group admin" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="LFP DTOs" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:25" time="0.485" tests="12">
    <testcase classname="LFP DTOs CreateLFPDto should validate a valid create DTO" name="LFP DTOs CreateLFPDto should validate a valid create DTO" time="0.005">
    </testcase>
    <testcase classname="LFP DTOs CreateLFPDto should fail validation with empty message" name="LFP DTOs CreateLFPDto should fail validation with empty message" time="0.002">
    </testcase>
    <testcase classname="LFP DTOs CreateLFPDto should fail validation with too short message" name="LFP DTOs CreateLFPDto should fail validation with too short message" time="0.001">
    </testcase>
    <testcase classname="LFP DTOs CreateLFPDto should fail validation with too long message" name="LFP DTOs CreateLFPDto should fail validation with too long message" time="0.001">
    </testcase>
    <testcase classname="LFP DTOs UpdateLFPDto should validate a valid update DTO" name="LFP DTOs UpdateLFPDto should validate a valid update DTO" time="0.001">
    </testcase>
    <testcase classname="LFP DTOs UpdateLFPDto should validate an empty update DTO" name="LFP DTOs UpdateLFPDto should validate an empty update DTO" time="0">
    </testcase>
    <testcase classname="LFP DTOs UpdateLFPDto should validate with optional fields" name="LFP DTOs UpdateLFPDto should validate with optional fields" time="0">
    </testcase>
    <testcase classname="LFP DTOs LFPQueryDto should validate a valid query DTO" name="LFP DTOs LFPQueryDto should validate a valid query DTO" time="0.001">
    </testcase>
    <testcase classname="LFP DTOs LFPQueryDto should validate an empty query DTO" name="LFP DTOs LFPQueryDto should validate an empty query DTO" time="0.001">
    </testcase>
    <testcase classname="LFP DTOs LFPQueryDto should validate with optional fields" name="LFP DTOs LFPQueryDto should validate with optional fields" time="0.001">
    </testcase>
    <testcase classname="LFP DTOs LFPQueryDto should fail validation with invalid lat/lng" name="LFP DTOs LFPQueryDto should fail validation with invalid lat/lng" time="0.001">
    </testcase>
    <testcase classname="LFP DTOs LFPQueryDto should transform string numbers to numbers" name="LFP DTOs LFPQueryDto should transform string numbers to numbers" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="InterestService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:25" time="0.331" tests="7">
    <testcase classname="InterestService checkIfInterestExists should return true if interest exists" name="InterestService checkIfInterestExists should return true if interest exists" time="0.007">
    </testcase>
    <testcase classname="InterestService checkIfInterestExists should return false if interest does not exist" name="InterestService checkIfInterestExists should return false if interest does not exist" time="0.003">
    </testcase>
    <testcase classname="InterestService createInterest should create an interest if it does not exist" name="InterestService createInterest should create an interest if it does not exist" time="0.003">
    </testcase>
    <testcase classname="InterestService createInterest should throw BadRequestException if interest already exists" name="InterestService createInterest should throw BadRequestException if interest already exists" time="0.018">
    </testcase>
    <testcase classname="InterestService deleteInterest should delete an interest if it exists" name="InterestService deleteInterest should delete an interest if it exists" time="0.003">
    </testcase>
    <testcase classname="InterestService deleteInterest should throw BadRequestException if interest does not exist" name="InterestService deleteInterest should throw BadRequestException if interest does not exist" time="0.002">
    </testcase>
    <testcase classname="InterestService getInterestCategories should return interest categories" name="InterestService getInterestCategories should return interest categories" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="CanEditQuizGuard" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:25" time="0.45" tests="5">
    <testcase classname="CanEditQuizGuard should be defined" name="CanEditQuizGuard should be defined" time="0.007">
    </testcase>
    <testcase classname="CanEditQuizGuard canActivate should return true if user is the author of the quiz" name="CanEditQuizGuard canActivate should return true if user is the author of the quiz" time="0.003">
    </testcase>
    <testcase classname="CanEditQuizGuard canActivate should throw ForbiddenException if user is not authenticated" name="CanEditQuizGuard canActivate should throw ForbiddenException if user is not authenticated" time="0.008">
    </testcase>
    <testcase classname="CanEditQuizGuard canActivate should throw NotFoundException if quizId is invalid" name="CanEditQuizGuard canActivate should throw NotFoundException if quizId is invalid" time="0.003">
    </testcase>
    <testcase classname="CanEditQuizGuard canActivate should throw ForbiddenException if user is not the author" name="CanEditQuizGuard canActivate should throw ForbiddenException if user is not the author" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="UserRequestsDtos" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:25" time="0.34" tests="9">
    <testcase classname="UserRequestsDtos should fail validation of empty CreateUserRequest object" name="UserRequestsDtos should fail validation of empty CreateUserRequest object" time="0.008">
    </testcase>
    <testcase classname="UserRequestsDtos should fail validation of invalid CreateUserRequest object" name="UserRequestsDtos should fail validation of invalid CreateUserRequest object" time="0.003">
    </testcase>
    <testcase classname="UserRequestsDtos should pass validation of valid CreateUserRequest object" name="UserRequestsDtos should pass validation of valid CreateUserRequest object" time="0.003">
    </testcase>
    <testcase classname="UserRequestsDtos should fail validation of invalid UpdateUserInfo object" name="UserRequestsDtos should fail validation of invalid UpdateUserInfo object" time="0.016">
    </testcase>
    <testcase classname="UserRequestsDtos should pass validation of valid UpdateUserInfo object" name="UserRequestsDtos should pass validation of valid UpdateUserInfo object" time="0.001">
    </testcase>
    <testcase classname="UserRequestsDtos should pass validation of empty UserQuery object" name="UserRequestsDtos should pass validation of empty UserQuery object" time="0.001">
    </testcase>
    <testcase classname="UserRequestsDtos should fail validation of invalid UserQuery object" name="UserRequestsDtos should fail validation of invalid UserQuery object" time="0.002">
    </testcase>
    <testcase classname="UserRequestsDtos should pass validation of valid UserQuery object" name="UserRequestsDtos should pass validation of valid UserQuery object" time="0.001">
    </testcase>
    <testcase classname="UserRequestsDtos should fail validation of invalid CreateUserRequest object" name="UserRequestsDtos should fail validation of invalid CreateUserRequest object" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Category DTOs" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:25" time="0.268" tests="12">
    <testcase classname="Category DTOs CreateCategoryRequest should validate a valid create request" name="Category DTOs CreateCategoryRequest should validate a valid create request" time="0.004">
    </testcase>
    <testcase classname="Category DTOs CreateCategoryRequest should fail with short name" name="Category DTOs CreateCategoryRequest should fail with short name" time="0.002">
    </testcase>
    <testcase classname="Category DTOs CreateCategoryRequest should fail with long name" name="Category DTOs CreateCategoryRequest should fail with long name" time="0.001">
    </testcase>
    <testcase classname="Category DTOs CreateCategoryRequest should fail with missing required fields" name="Category DTOs CreateCategoryRequest should fail with missing required fields" time="0.001">
    </testcase>
    <testcase classname="Category DTOs UpdateCategoryRequest should validate a valid update request with all fields" name="Category DTOs UpdateCategoryRequest should validate a valid update request with all fields" time="0.013">
    </testcase>
    <testcase classname="Category DTOs UpdateCategoryRequest should validate a valid update request with partial fields" name="Category DTOs UpdateCategoryRequest should validate a valid update request with partial fields" time="0.001">
    </testcase>
    <testcase classname="Category DTOs UpdateCategoryRequest should fail with invalid name length" name="Category DTOs UpdateCategoryRequest should fail with invalid name length" time="0.001">
    </testcase>
    <testcase classname="Category DTOs UpdateCategoryRequest should validate an empty update request" name="Category DTOs UpdateCategoryRequest should validate an empty update request" time="0">
    </testcase>
    <testcase classname="Category DTOs CategoryQuery should validate a valid query with all optional fields" name="Category DTOs CategoryQuery should validate a valid query with all optional fields" time="0.001">
    </testcase>
    <testcase classname="Category DTOs CategoryQuery should validate a query with no fields" name="Category DTOs CategoryQuery should validate a query with no fields" time="0">
    </testcase>
    <testcase classname="Category DTOs CategoryQuery should validate a query with some fields" name="Category DTOs CategoryQuery should validate a query with some fields" time="0.001">
    </testcase>
    <testcase classname="Category DTOs UploadCategoryLogoRequest should validate a valid logo upload request" name="Category DTOs UploadCategoryLogoRequest should validate a valid logo upload request" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="CanAccessAttemptGuard" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:25" time="0.367" tests="6">
    <testcase classname="CanAccessAttemptGuard should be defined" name="CanAccessAttemptGuard should be defined" time="0.009">
    </testcase>
    <testcase classname="CanAccessAttemptGuard canActivate should allow admin users without checking attempt" name="CanAccessAttemptGuard canActivate should allow admin users without checking attempt" time="0.002">
    </testcase>
    <testcase classname="CanAccessAttemptGuard canActivate should check attempt access for non-admin users" name="CanAccessAttemptGuard canActivate should check attempt access for non-admin users" time="0.035">
    </testcase>
    <testcase classname="CanAccessAttemptGuard canActivate should throw NotFoundException when attempt ID is missing" name="CanAccessAttemptGuard canActivate should throw NotFoundException when attempt ID is missing" time="0.018">
    </testcase>
    <testcase classname="CanAccessAttemptGuard canActivate should throw error when attempt access check fails" name="CanAccessAttemptGuard canActivate should throw error when attempt access check fails" time="0.005">
    </testcase>
    <testcase classname="CanAccessAttemptGuard canActivate should handle non-numeric attempt IDs" name="CanAccessAttemptGuard canActivate should handle non-numeric attempt IDs" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="BlockedUsersService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:25" time="0.289" tests="7">
    <testcase classname="BlockedUsersService checkIfUserIsBlocked should return true if user is blocked" name="BlockedUsersService checkIfUserIsBlocked should return true if user is blocked" time="0.008">
    </testcase>
    <testcase classname="BlockedUsersService checkIfUserIsBlocked should return false if user is not blocked" name="BlockedUsersService checkIfUserIsBlocked should return false if user is not blocked" time="0.002">
    </testcase>
    <testcase classname="BlockedUsersService blockUser should block a user if not already blocked" name="BlockedUsersService blockUser should block a user if not already blocked" time="0.002">
    </testcase>
    <testcase classname="BlockedUsersService blockUser should throw BadRequestException if user is already blocked" name="BlockedUsersService blockUser should throw BadRequestException if user is already blocked" time="0.015">
    </testcase>
    <testcase classname="BlockedUsersService unblockUser should unblock a user if blocked" name="BlockedUsersService unblockUser should unblock a user if blocked" time="0.007">
    </testcase>
    <testcase classname="BlockedUsersService unblockUser should throw BadRequestException if user is not blocked" name="BlockedUsersService unblockUser should throw BadRequestException if user is not blocked" time="0.004">
    </testcase>
    <testcase classname="BlockedUsersService getBlockedUsers should return blocked users" name="BlockedUsersService getBlockedUsers should return blocked users" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="QueryParticipationDto" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:26" time="0.249" tests="6">
    <testcase classname="QueryParticipationDto validation should pass with valid data" name="QueryParticipationDto validation should pass with valid data" time="0.003">
    </testcase>
    <testcase classname="QueryParticipationDto validation should pass with partial data" name="QueryParticipationDto validation should pass with partial data" time="0.001">
    </testcase>
    <testcase classname="QueryParticipationDto validation should transform string numbers to integers" name="QueryParticipationDto validation should transform string numbers to integers" time="0.002">
    </testcase>
    <testcase classname="QueryParticipationDto validation should fail with negative numbers" name="QueryParticipationDto validation should fail with negative numbers" time="0.001">
    </testcase>
    <testcase classname="QueryParticipationDto validation should fail with non-numeric values" name="QueryParticipationDto validation should fail with non-numeric values" time="0.002">
    </testcase>
    <testcase classname="QueryParticipationDto validation should inherit and validate base query properties" name="QueryParticipationDto validation should inherit and validate base query properties" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="TournamentMaximumParticipantsGuard" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:26" time="0.28" tests="5">
    <testcase classname="TournamentMaximumParticipantsGuard canActivate should allow participation when tournament has space" name="TournamentMaximumParticipantsGuard canActivate should allow participation when tournament has space" time="0.01">
    </testcase>
    <testcase classname="TournamentMaximumParticipantsGuard canActivate should deny participation when tournament is full" name="TournamentMaximumParticipantsGuard canActivate should deny participation when tournament is full" time="0.039">
    </testcase>
    <testcase classname="TournamentMaximumParticipantsGuard canActivate should find tournamentId from body if not in params" name="TournamentMaximumParticipantsGuard canActivate should find tournamentId from body if not in params" time="0.003">
    </testcase>
    <testcase classname="TournamentMaximumParticipantsGuard canActivate should find tournamentId from query if not in params or body" name="TournamentMaximumParticipantsGuard canActivate should find tournamentId from query if not in params or body" time="0.002">
    </testcase>
    <testcase classname="TournamentMaximumParticipantsGuard canActivate should handle undefined currentParticipants" name="TournamentMaximumParticipantsGuard canActivate should handle undefined currentParticipants" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Roster DTOs" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:26" time="0.299" tests="14">
    <testcase classname="Roster DTOs CreateRosterMemberDto should validate a valid member" name="Roster DTOs CreateRosterMemberDto should validate a valid member" time="0.007">
    </testcase>
    <testcase classname="Roster DTOs CreateRosterMemberDto should fail with non-numeric userId" name="Roster DTOs CreateRosterMemberDto should fail with non-numeric userId" time="0.002">
    </testcase>
    <testcase classname="Roster DTOs CreateRosterMemberDto should fail with negative userId" name="Roster DTOs CreateRosterMemberDto should fail with negative userId" time="0.001">
    </testcase>
    <testcase classname="Roster DTOs CreateRosterMemberDto should transform string userId to number" name="Roster DTOs CreateRosterMemberDto should transform string userId to number" time="0.001">
    </testcase>
    <testcase classname="Roster DTOs CreateRosterMemberDto should transform isSubstitute to boolean" name="Roster DTOs CreateRosterMemberDto should transform isSubstitute to boolean" time="0.001">
    </testcase>
    <testcase classname="Roster DTOs CreateRosterMemberDto should default isSubstitute to false if not provided" name="Roster DTOs CreateRosterMemberDto should default isSubstitute to false if not provided" time="0.001">
    </testcase>
    <testcase classname="Roster DTOs CreateRosterDto should validate a valid roster creation request" name="Roster DTOs CreateRosterDto should validate a valid roster creation request" time="0.002">
    </testcase>
    <testcase classname="Roster DTOs CreateRosterDto should fail with empty members array" name="Roster DTOs CreateRosterDto should fail with empty members array" time="0">
    </testcase>
    <testcase classname="Roster DTOs CreateRosterDto should fail with invalid members" name="Roster DTOs CreateRosterDto should fail with invalid members" time="0.001">
    </testcase>
    <testcase classname="Roster DTOs QueryRosterDto should validate a valid query with all optional fields" name="Roster DTOs QueryRosterDto should validate a valid query with all optional fields" time="0.002">
    </testcase>
    <testcase classname="Roster DTOs QueryRosterDto should validate a query with no fields" name="Roster DTOs QueryRosterDto should validate a query with no fields" time="0.001">
    </testcase>
    <testcase classname="Roster DTOs QueryRosterDto should transform string values to appropriate types" name="Roster DTOs QueryRosterDto should transform string values to appropriate types" time="0.011">
    </testcase>
    <testcase classname="Roster DTOs QueryRosterDto should fail with negative numeric values" name="Roster DTOs QueryRosterDto should fail with negative numeric values" time="0.001">
    </testcase>
    <testcase classname="Roster DTOs QueryRosterDto should fail with non-numeric values for numeric fields" name="Roster DTOs QueryRosterDto should fail with non-numeric values for numeric fields" time="0">
    </testcase>
  </testsuite>
  <testsuite name="GroupRequirementsService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:26" time="0.26" tests="8">
    <testcase classname="GroupRequirementsService should be defined" name="GroupRequirementsService should be defined" time="0.008">
    </testcase>
    <testcase classname="GroupRequirementsService createRequirements should create requirements when user is admin" name="GroupRequirementsService createRequirements should create requirements when user is admin" time="0.005">
    </testcase>
    <testcase classname="GroupRequirementsService updateRequirements should update requirements when user is admin" name="GroupRequirementsService updateRequirements should update requirements when user is admin" time="0.013">
    </testcase>
    <testcase classname="GroupRequirementsService updateRequirements should throw NotFoundException when requirements not found" name="GroupRequirementsService updateRequirements should throw NotFoundException when requirements not found" time="0.018">
    </testcase>
    <testcase classname="GroupRequirementsService getRequirements should return requirements when they exist" name="GroupRequirementsService getRequirements should return requirements when they exist" time="0.007">
    </testcase>
    <testcase classname="GroupRequirementsService getRequirements should throw NotFoundException when requirements not found" name="GroupRequirementsService getRequirements should throw NotFoundException when requirements not found" time="0.002">
    </testcase>
    <testcase classname="GroupRequirementsService deleteRequirements should delete requirements when user is admin" name="GroupRequirementsService deleteRequirements should delete requirements when user is admin" time="0.002">
    </testcase>
    <testcase classname="GroupRequirementsService deleteRequirements should throw NotFoundException when requirements not found" name="GroupRequirementsService deleteRequirements should throw NotFoundException when requirements not found" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Location DTOs" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:26" time="0.248" tests="15">
    <testcase classname="Location DTOs CreateLocationDto should validate a valid create request" name="Location DTOs CreateLocationDto should validate a valid create request" time="0.001">
    </testcase>
    <testcase classname="Location DTOs CreateLocationDto should fail with missing name" name="Location DTOs CreateLocationDto should fail with missing name" time="0">
    </testcase>
    <testcase classname="Location DTOs CreateLocationDto should fail with missing apiId" name="Location DTOs CreateLocationDto should fail with missing apiId" time="0">
    </testcase>
    <testcase classname="Location DTOs CreateLocationDto should fail with missing lat" name="Location DTOs CreateLocationDto should fail with missing lat" time="0.001">
    </testcase>
    <testcase classname="Location DTOs CreateLocationDto should fail with missing lng" name="Location DTOs CreateLocationDto should fail with missing lng" time="0">
    </testcase>
    <testcase classname="Location DTOs CreateLocationDto should fail with missing required fields" name="Location DTOs CreateLocationDto should fail with missing required fields" time="0">
    </testcase>
    <testcase classname="Location DTOs UpdateLocationDto should validate a valid update request with all fields" name="Location DTOs UpdateLocationDto should validate a valid update request with all fields" time="0.001">
    </testcase>
    <testcase classname="Location DTOs UpdateLocationDto should validate a valid update request with partial fields" name="Location DTOs UpdateLocationDto should validate a valid update request with partial fields" time="0">
    </testcase>
    <testcase classname="Location DTOs UpdateLocationDto should validate an update with only lat" name="Location DTOs UpdateLocationDto should validate an update with only lat" time="0">
    </testcase>
    <testcase classname="Location DTOs UpdateLocationDto should validate an update with only lng" name="Location DTOs UpdateLocationDto should validate an update with only lng" time="0.001">
    </testcase>
    <testcase classname="Location DTOs UpdateLocationDto should validate an empty update request" name="Location DTOs UpdateLocationDto should validate an empty update request" time="0">
    </testcase>
    <testcase classname="Location DTOs LocationQuery should validate a valid query with all optional fields" name="Location DTOs LocationQuery should validate a valid query with all optional fields" time="0.001">
    </testcase>
    <testcase classname="Location DTOs LocationQuery should validate a query with no fields" name="Location DTOs LocationQuery should validate a query with no fields" time="0">
    </testcase>
    <testcase classname="Location DTOs LocationQuery should validate a query with some fields" name="Location DTOs LocationQuery should validate a query with some fields" time="0.001">
    </testcase>
    <testcase classname="Location DTOs LocationQuery should validate a query with coordinates" name="Location DTOs LocationQuery should validate a query with coordinates" time="0">
    </testcase>
  </testsuite>
  <testsuite name="CanEditMatchupGuard" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:25" time="0.442" tests="6">
    <testcase classname="CanEditMatchupGuard should be defined" name="CanEditMatchupGuard should be defined" time="0.014">
    </testcase>
    <testcase classname="CanEditMatchupGuard canActivate should allow access when user can edit the matchup" name="CanEditMatchupGuard canActivate should allow access when user can edit the matchup" time="0.003">
    </testcase>
    <testcase classname="CanEditMatchupGuard canActivate should throw ForbiddenException when user cannot edit the matchup" name="CanEditMatchupGuard canActivate should throw ForbiddenException when user cannot edit the matchup" time="0.046">
    </testcase>
    <testcase classname="CanEditMatchupGuard canActivate should properly parse numeric matchupId" name="CanEditMatchupGuard canActivate should properly parse numeric matchupId" time="0.003">
    </testcase>
    <testcase classname="CanEditMatchupGuard canActivate should handle missing user information" name="CanEditMatchupGuard canActivate should handle missing user information" time="0.003">
    </testcase>
    <testcase classname="CanEditMatchupGuard canActivate should handle missing matchupId parameter" name="CanEditMatchupGuard canActivate should handle missing matchupId parameter" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="GroupInterestsService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:26" time="0.291" tests="7">
    <testcase classname="GroupInterestsService checkIfInterestExists should return true if interest exists" name="GroupInterestsService checkIfInterestExists should return true if interest exists" time="0.015">
    </testcase>
    <testcase classname="GroupInterestsService checkIfInterestExists should return false if interest does not exist" name="GroupInterestsService checkIfInterestExists should return false if interest does not exist" time="0.002">
    </testcase>
    <testcase classname="GroupInterestsService createGroupInterest should create a group interest if it does not exist" name="GroupInterestsService createGroupInterest should create a group interest if it does not exist" time="0.003">
    </testcase>
    <testcase classname="GroupInterestsService createGroupInterest should throw BadRequestException if interest already exists" name="GroupInterestsService createGroupInterest should throw BadRequestException if interest already exists" time="0.017">
    </testcase>
    <testcase classname="GroupInterestsService deleteGroupInterest should delete a group interest if it exists" name="GroupInterestsService deleteGroupInterest should delete a group interest if it exists" time="0.003">
    </testcase>
    <testcase classname="GroupInterestsService deleteGroupInterest should throw BadRequestException if interest does not exist" name="GroupInterestsService deleteGroupInterest should throw BadRequestException if interest does not exist" time="0.003">
    </testcase>
    <testcase classname="GroupInterestsService getGroupInterests should return group interests" name="GroupInterestsService getGroupInterests should return group interests" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="LFPService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:26" time="0.345" tests="7">
    <testcase classname="LFPService createLFP should create an LFP post" name="LFPService createLFP should create an LFP post" time="0.02">
    </testcase>
    <testcase classname="LFPService updateLFP should update an LFP post when it exists" name="LFPService updateLFP should update an LFP post when it exists" time="0.003">
    </testcase>
    <testcase classname="LFPService updateLFP should throw NotFoundException when LFP does not exist" name="LFPService updateLFP should throw NotFoundException when LFP does not exist" time="0.014">
    </testcase>
    <testcase classname="LFPService getForGroup should get LFP posts for a group" name="LFPService getForGroup should get LFP posts for a group" time="0.003">
    </testcase>
    <testcase classname="LFPService getGroups should get groups based on query parameters" name="LFPService getGroups should get groups based on query parameters" time="0.007">
    </testcase>
    <testcase classname="LFPService deleteLFP should delete an LFP post when it exists" name="LFPService deleteLFP should delete an LFP post when it exists" time="0.003">
    </testcase>
    <testcase classname="LFPService deleteLFP should throw NotFoundException when LFP does not exist" name="LFPService deleteLFP should throw NotFoundException when LFP does not exist" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="BaseQuery" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:26" time="0.329" tests="5">
    <testcase classname="BaseQuery should pass validation of valid BaseQuery object" name="BaseQuery should pass validation of valid BaseQuery object" time="0.003">
    </testcase>
    <testcase classname="BaseQuery should fail validation of BaseQuery object with negative page number" name="BaseQuery should fail validation of BaseQuery object with negative page number" time="0.001">
    </testcase>
    <testcase classname="BaseQuery should fail validation of BaseQuery object with negative pageSize number" name="BaseQuery should fail validation of BaseQuery object with negative pageSize number" time="0.001">
    </testcase>
    <testcase classname="BaseQuery should fail validation of BaseQuery object with pageSize more than 100" name="BaseQuery should fail validation of BaseQuery object with pageSize more than 100" time="0">
    </testcase>
    <testcase classname="BaseQuery should fail validation of BaseQuery object with invalid order" name="BaseQuery should fail validation of BaseQuery object with invalid order" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="EmailService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:26" time="0.508" tests="9">
    <testcase classname="EmailService should throw an error if email credentials are not set" name="EmailService should throw an error if email credentials are not set" time="0.053">
    </testcase>
    <testcase classname="EmailService should generate Mailgun message data" name="EmailService should generate Mailgun message data" time="0.003">
    </testcase>
    <testcase classname="EmailService should return the correct template" name="EmailService should return the correct template" time="0.003">
    </testcase>
    <testcase classname="EmailService should throw an error if the template is not found" name="EmailService should throw an error if the template is not found" time="0.029">
    </testcase>
    <testcase classname="EmailService should validate the data correctly" name="EmailService should validate the data correctly" time="0.003">
    </testcase>
    <testcase classname="EmailService should render the template correctly" name="EmailService should render the template correctly" time="0.002">
    </testcase>
    <testcase classname="EmailService should return the rendered email" name="EmailService should return the rendered email" time="0.003">
    </testcase>
    <testcase classname="EmailService should send the email correctly" name="EmailService should send the email correctly" time="0.019">
    </testcase>
    <testcase classname="EmailService should throw an error if the email could not be sent" name="EmailService should throw an error if the email could not be sent" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="BlockedGroupsService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:26" time="0.411" tests="7">
    <testcase classname="BlockedGroupsService checkIfGroupIsBlocked should return true if group is blocked" name="BlockedGroupsService checkIfGroupIsBlocked should return true if group is blocked" time="0.009">
    </testcase>
    <testcase classname="BlockedGroupsService checkIfGroupIsBlocked should return false if group is not blocked" name="BlockedGroupsService checkIfGroupIsBlocked should return false if group is not blocked" time="0.004">
    </testcase>
    <testcase classname="BlockedGroupsService blockGroup should block a group if not already blocked" name="BlockedGroupsService blockGroup should block a group if not already blocked" time="0.002">
    </testcase>
    <testcase classname="BlockedGroupsService blockGroup should throw BadRequestException if group is already blocked" name="BlockedGroupsService blockGroup should throw BadRequestException if group is already blocked" time="0.023">
    </testcase>
    <testcase classname="BlockedGroupsService unblockGroup should unblock a group if blocked" name="BlockedGroupsService unblockGroup should unblock a group if blocked" time="0.009">
    </testcase>
    <testcase classname="BlockedGroupsService unblockGroup should throw BadRequestException if group is not blocked" name="BlockedGroupsService unblockGroup should throw BadRequestException if group is not blocked" time="0.003">
    </testcase>
    <testcase classname="BlockedGroupsService getBlockedGroups should return blocked groups" name="BlockedGroupsService getBlockedGroups should return blocked groups" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="GroupInviteQuery" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:26" time="0.309" tests="13">
    <testcase classname="GroupInviteQuery should pass validation with valid data" name="GroupInviteQuery should pass validation with valid data" time="0.002">
    </testcase>
    <testcase classname="GroupInviteQuery should pass validation with partial data" name="GroupInviteQuery should pass validation with partial data" time="0">
    </testcase>
    <testcase classname="GroupInviteQuery should fail validation with invalid userId type" name="GroupInviteQuery should fail validation with invalid userId type" time="0.001">
    </testcase>
    <testcase classname="GroupInviteQuery should fail validation with invalid groupId type" name="GroupInviteQuery should fail validation with invalid groupId type" time="0.001">
    </testcase>
    <testcase classname="CreateGroupInviteDto should pass validation with valid data" name="CreateGroupInviteDto should pass validation with valid data" time="0.001">
    </testcase>
    <testcase classname="CreateGroupInviteDto should pass validation without optional relatedLFPId" name="CreateGroupInviteDto should pass validation without optional relatedLFPId" time="0">
    </testcase>
    <testcase classname="CreateGroupInviteDto should fail validation without required message" name="CreateGroupInviteDto should fail validation without required message" time="0.001">
    </testcase>
    <testcase classname="CreateGroupInviteDto should fail validation with invalid message type" name="CreateGroupInviteDto should fail validation with invalid message type" time="0.001">
    </testcase>
    <testcase classname="UpdateGroupInviteDto should pass validation with valid data" name="UpdateGroupInviteDto should pass validation with valid data" time="0.001">
    </testcase>
    <testcase classname="UpdateGroupInviteDto should pass validation with partial data" name="UpdateGroupInviteDto should pass validation with partial data" time="0">
    </testcase>
    <testcase classname="UpdateGroupInviteDto should pass validation with empty object" name="UpdateGroupInviteDto should pass validation with empty object" time="0.001">
    </testcase>
    <testcase classname="UpdateGroupInviteDto should fail validation with invalid message type" name="UpdateGroupInviteDto should fail validation with invalid message type" time="0">
    </testcase>
    <testcase classname="UpdateGroupInviteDto should fail validation with invalid relatedLFPId type" name="UpdateGroupInviteDto should fail validation with invalid relatedLFPId type" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="StageRequestsDtos" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:26" time="0.406" tests="10">
    <testcase classname="StageRequestsDtos CreateStageRequest should fail validation with empty object" name="StageRequestsDtos CreateStageRequest should fail validation with empty object" time="0.002">
    </testcase>
    <testcase classname="StageRequestsDtos CreateStageRequest should fail validation with invalid data types" name="StageRequestsDtos CreateStageRequest should fail validation with invalid data types" time="0.001">
    </testcase>
    <testcase classname="StageRequestsDtos CreateStageRequest should fail validation with invalid string lengths" name="StageRequestsDtos CreateStageRequest should fail validation with invalid string lengths" time="0.001">
    </testcase>
    <testcase classname="StageRequestsDtos CreateStageRequest should pass validation with valid data" name="StageRequestsDtos CreateStageRequest should pass validation with valid data" time="0">
    </testcase>
    <testcase classname="StageRequestsDtos UpdateStageRequest should pass validation with empty object" name="StageRequestsDtos UpdateStageRequest should pass validation with empty object" time="0.001">
    </testcase>
    <testcase classname="StageRequestsDtos UpdateStageRequest should fail validation with invalid data types" name="StageRequestsDtos UpdateStageRequest should fail validation with invalid data types" time="0.001">
    </testcase>
    <testcase classname="StageRequestsDtos UpdateStageRequest should pass validation with valid data" name="StageRequestsDtos UpdateStageRequest should pass validation with valid data" time="0">
    </testcase>
    <testcase classname="StageRequestsDtos StageQuery should pass validation with empty object" name="StageRequestsDtos StageQuery should pass validation with empty object" time="0">
    </testcase>
    <testcase classname="StageRequestsDtos StageQuery should fail validation with invalid data types" name="StageRequestsDtos StageQuery should fail validation with invalid data types" time="0.001">
    </testcase>
    <testcase classname="StageRequestsDtos StageQuery should pass validation with valid data" name="StageRequestsDtos StageQuery should pass validation with valid data" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Quiz Attempt DTOs" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:26" time="0.334" tests="10">
    <testcase classname="Quiz Attempt DTOs SubmitQuizAttemptRequest should pass validation with valid data" name="Quiz Attempt DTOs SubmitQuizAttemptRequest should pass validation with valid data" time="0.005">
    </testcase>
    <testcase classname="Quiz Attempt DTOs SubmitQuizAttemptRequest should fail validation with missing isSubmitted" name="Quiz Attempt DTOs SubmitQuizAttemptRequest should fail validation with missing isSubmitted" time="0.002">
    </testcase>
    <testcase classname="Quiz Attempt DTOs CreateQuizAnswerRequest should pass validation with valid data (multiple choice)" name="Quiz Attempt DTOs CreateQuizAnswerRequest should pass validation with valid data (multiple choice)" time="0.001">
    </testcase>
    <testcase classname="Quiz Attempt DTOs CreateQuizAnswerRequest should pass validation with valid data (text answer)" name="Quiz Attempt DTOs CreateQuizAnswerRequest should pass validation with valid data (text answer)" time="0">
    </testcase>
    <testcase classname="Quiz Attempt DTOs UpdateQuizAnswerRequest should pass validation with valid data (updated answer)" name="Quiz Attempt DTOs UpdateQuizAnswerRequest should pass validation with valid data (updated answer)" time="0">
    </testcase>
    <testcase classname="Quiz Attempt DTOs UpdateQuizAnswerRequest should pass validation with valid data (updated option)" name="Quiz Attempt DTOs UpdateQuizAnswerRequest should pass validation with valid data (updated option)" time="0.001">
    </testcase>
    <testcase classname="Quiz Attempt DTOs UpdateQuizAnswerRequest should pass validation with valid data (both fields)" name="Quiz Attempt DTOs UpdateQuizAnswerRequest should pass validation with valid data (both fields)" time="0.001">
    </testcase>
    <testcase classname="Quiz Attempt DTOs UpdateQuizAnswerRequest should pass validation with empty dto (all fields optional)" name="Quiz Attempt DTOs UpdateQuizAnswerRequest should pass validation with empty dto (all fields optional)" time="0">
    </testcase>
    <testcase classname="Quiz Attempt DTOs QuizAttemptQuery should pass validation with valid data" name="Quiz Attempt DTOs QuizAttemptQuery should pass validation with valid data" time="0.001">
    </testcase>
    <testcase classname="Quiz Attempt DTOs QuizAttemptQuery should pass validation with no data (all fields optional)" name="Quiz Attempt DTOs QuizAttemptQuery should pass validation with no data (all fields optional)" time="0">
    </testcase>
  </testsuite>
  <testsuite name="FollowerQuery" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:26" time="0.25" tests="4">
    <testcase classname="FollowerQuery should pass validation with valid data" name="FollowerQuery should pass validation with valid data" time="0.006">
    </testcase>
    <testcase classname="FollowerQuery should fail validation with invalid userId" name="FollowerQuery should fail validation with invalid userId" time="0.002">
    </testcase>
    <testcase classname="FollowerQuery should fail validation with invalid followerId" name="FollowerQuery should fail validation with invalid followerId" time="0.001">
    </testcase>
    <testcase classname="FollowerQuery should pass validation with no optional fields" name="FollowerQuery should pass validation with no optional fields" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="LfgService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:26" time="0.3" tests="6">
    <testcase classname="LfgService should be defined" name="LfgService should be defined" time="0.008">
    </testcase>
    <testcase classname="LfgService create should create an LFG post" name="LfgService create should create an LFG post" time="0.003">
    </testcase>
    <testcase classname="LfgService update should update an LFG post" name="LfgService update should update an LFG post" time="0.002">
    </testcase>
    <testcase classname="LfgService delete should delete an LFG post" name="LfgService delete should delete an LFG post" time="0.002">
    </testcase>
    <testcase classname="LfgService findMyLfg should find user LFG posts" name="LfgService findMyLfg should find user LFG posts" time="0.003">
    </testcase>
    <testcase classname="LfgService findPlayers should find players for a group" name="LfgService findPlayers should find players for a group" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="DoubleParticipationGuard" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:26" time="0.389" tests="4">
    <testcase classname="DoubleParticipationGuard canActivate should allow participation when user has not participated before" name="DoubleParticipationGuard canActivate should allow participation when user has not participated before" time="0.007">
    </testcase>
    <testcase classname="DoubleParticipationGuard canActivate should deny participation when user has already participated" name="DoubleParticipationGuard canActivate should deny participation when user has already participated" time="0.019">
    </testcase>
    <testcase classname="DoubleParticipationGuard canActivate should allow group participation when group has not participated before" name="DoubleParticipationGuard canActivate should allow group participation when group has not participated before" time="0.002">
    </testcase>
    <testcase classname="DoubleParticipationGuard canActivate should deny group participation when group has already participated" name="DoubleParticipationGuard canActivate should deny group participation when group has already participated" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="TournamentStartDateGuard" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:26" time="0.268" tests="4">
    <testcase classname="TournamentStartDateGuard canActivate should allow participation before tournament start date" name="TournamentStartDateGuard canActivate should allow participation before tournament start date" time="0.007">
    </testcase>
    <testcase classname="TournamentStartDateGuard canActivate should deny participation after tournament start date" name="TournamentStartDateGuard canActivate should deny participation after tournament start date" time="0.016">
    </testcase>
    <testcase classname="TournamentStartDateGuard canActivate should deny participation on tournament start date" name="TournamentStartDateGuard canActivate should deny participation on tournament start date" time="0.004">
    </testcase>
    <testcase classname="TournamentStartDateGuard canActivate should respect parent guard max participants check" name="TournamentStartDateGuard canActivate should respect parent guard max participants check" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="LFG Request DTOs" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.236" tests="10">
    <testcase classname="LFG Request DTOs CreateLFGRequest should validate a valid create request" name="LFG Request DTOs CreateLFGRequest should validate a valid create request" time="0.002">
    </testcase>
    <testcase classname="LFG Request DTOs CreateLFGRequest should fail with too short message" name="LFG Request DTOs CreateLFGRequest should fail with too short message" time="0.001">
    </testcase>
    <testcase classname="LFG Request DTOs CreateLFGRequest should fail with too long message" name="LFG Request DTOs CreateLFGRequest should fail with too long message" time="0.001">
    </testcase>
    <testcase classname="LFG Request DTOs CreateLFGRequest should fail without categoryIds" name="LFG Request DTOs CreateLFGRequest should fail without categoryIds" time="0.001">
    </testcase>
    <testcase classname="LFG Request DTOs CreateLFGRequest should transform string categoryIds to numbers" name="LFG Request DTOs CreateLFGRequest should transform string categoryIds to numbers" time="0">
    </testcase>
    <testcase classname="LFG Request DTOs UpdateLFGRequest should validate a valid update request with all fields" name="LFG Request DTOs UpdateLFGRequest should validate a valid update request with all fields" time="0.003">
    </testcase>
    <testcase classname="LFG Request DTOs UpdateLFGRequest should validate a valid update request with partial fields" name="LFG Request DTOs UpdateLFGRequest should validate a valid update request with partial fields" time="0.001">
    </testcase>
    <testcase classname="LFG Request DTOs UpdateLFGRequest should fail with too short message if provided" name="LFG Request DTOs UpdateLFGRequest should fail with too short message if provided" time="0.001">
    </testcase>
    <testcase classname="LFG Request DTOs UpdateLFGRequest should transform string categoryIds to numbers when provided" name="LFG Request DTOs UpdateLFGRequest should transform string categoryIds to numbers when provided" time="0">
    </testcase>
    <testcase classname="LFG Request DTOs UpdateLFGRequest should validate an empty update request" name="LFG Request DTOs UpdateLFGRequest should validate an empty update request" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="CanAccessAttemptGuard" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.217" tests="5">
    <testcase classname="CanAccessAttemptGuard should be defined" name="CanAccessAttemptGuard should be defined" time="0.007">
    </testcase>
    <testcase classname="CanAccessAttemptGuard canActivate should allow admin users without checking attempt" name="CanAccessAttemptGuard canActivate should allow admin users without checking attempt" time="0.002">
    </testcase>
    <testcase classname="CanAccessAttemptGuard canActivate should check attempt access for non-admin users" name="CanAccessAttemptGuard canActivate should check attempt access for non-admin users" time="0.002">
    </testcase>
    <testcase classname="CanAccessAttemptGuard canActivate should throw NotFoundException when attempt ID is missing" name="CanAccessAttemptGuard canActivate should throw NotFoundException when attempt ID is missing" time="0.016">
    </testcase>
    <testcase classname="CanAccessAttemptGuard canActivate should throw error when attempt access check fails" name="CanAccessAttemptGuard canActivate should throw error when attempt access check fails" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="GroupJoinRequestQuery" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.333" tests="11">
    <testcase classname="GroupJoinRequestQuery should pass validation with valid data" name="GroupJoinRequestQuery should pass validation with valid data" time="0.002">
    </testcase>
    <testcase classname="GroupJoinRequestQuery should pass validation with partial data" name="GroupJoinRequestQuery should pass validation with partial data" time="0.001">
    </testcase>
    <testcase classname="GroupJoinRequestQuery should fail validation with invalid userId type" name="GroupJoinRequestQuery should fail validation with invalid userId type" time="0.001">
    </testcase>
    <testcase classname="CreateGroupJoinRequestDto should pass validation with valid data" name="CreateGroupJoinRequestDto should pass validation with valid data" time="0.001">
    </testcase>
    <testcase classname="CreateGroupJoinRequestDto should pass validation without optional relatedLFPId" name="CreateGroupJoinRequestDto should pass validation without optional relatedLFPId" time="0.001">
    </testcase>
    <testcase classname="CreateGroupJoinRequestDto should fail validation without required message" name="CreateGroupJoinRequestDto should fail validation without required message" time="0">
    </testcase>
    <testcase classname="CreateGroupJoinRequestDto should fail validation with invalid message type" name="CreateGroupJoinRequestDto should fail validation with invalid message type" time="0.008">
    </testcase>
    <testcase classname="UpdateGroupJoinRequestDto should pass validation with valid data" name="UpdateGroupJoinRequestDto should pass validation with valid data" time="0.001">
    </testcase>
    <testcase classname="UpdateGroupJoinRequestDto should pass validation with empty object (all fields optional)" name="UpdateGroupJoinRequestDto should pass validation with empty object (all fields optional)" time="0">
    </testcase>
    <testcase classname="UpdateGroupJoinRequestDto should fail validation with invalid message type" name="UpdateGroupJoinRequestDto should fail validation with invalid message type" time="0.001">
    </testcase>
    <testcase classname="UpdateGroupJoinRequestDto should fail validation with invalid relatedLFPId type" name="UpdateGroupJoinRequestDto should fail validation with invalid relatedLFPId type" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="GroupMembershipRequestsDtos" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.278" tests="4">
    <testcase classname="GroupMembershipRequestsDtos GroupMembershipQuery should pass validation of empty GroupMembershipQuery object" name="GroupMembershipRequestsDtos GroupMembershipQuery should pass validation of empty GroupMembershipQuery object" time="0.001">
    </testcase>
    <testcase classname="GroupMembershipRequestsDtos GroupMembershipQuery should fail validation of invalid GroupMembershipQuery object" name="GroupMembershipRequestsDtos GroupMembershipQuery should fail validation of invalid GroupMembershipQuery object" time="0.002">
    </testcase>
    <testcase classname="GroupMembershipRequestsDtos GroupMembershipQuery should pass validation of valid GroupMembershipQuery object" name="GroupMembershipRequestsDtos GroupMembershipQuery should pass validation of valid GroupMembershipQuery object" time="0.001">
    </testcase>
    <testcase classname="GroupMembershipRequestsDtos GroupMembershipQuery should fail validation with partial valid fields" name="GroupMembershipRequestsDtos GroupMembershipQuery should fail validation with partial valid fields" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="RefreshTokenStrategy" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.19" tests="3">
    <testcase classname="RefreshTokenStrategy should be defined" name="RefreshTokenStrategy should be defined" time="0.007">
    </testcase>
    <testcase classname="RefreshTokenStrategy validate should return payload with refresh token" name="RefreshTokenStrategy validate should return payload with refresh token" time="0.003">
    </testcase>
    <testcase classname="RefreshTokenStrategy validate should handle malformed Authorization header" name="RefreshTokenStrategy validate should handle malformed Authorization header" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="GroupRequestsDtos" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.297" tests="9">
    <testcase classname="GroupRequestsDtos CreateGroupRequest should fail validation of empty CreateGroupRequest object" name="GroupRequestsDtos CreateGroupRequest should fail validation of empty CreateGroupRequest object" time="0.003">
    </testcase>
    <testcase classname="GroupRequestsDtos CreateGroupRequest should fail validation of invalid CreateGroupRequest object" name="GroupRequestsDtos CreateGroupRequest should fail validation of invalid CreateGroupRequest object" time="0.002">
    </testcase>
    <testcase classname="GroupRequestsDtos CreateGroupRequest should pass validation of valid CreateGroupRequest object" name="GroupRequestsDtos CreateGroupRequest should pass validation of valid CreateGroupRequest object" time="0.001">
    </testcase>
    <testcase classname="GroupRequestsDtos UpdateGroupRequest should pass validation of empty UpdateGroupRequest object" name="GroupRequestsDtos UpdateGroupRequest should pass validation of empty UpdateGroupRequest object" time="0.001">
    </testcase>
    <testcase classname="GroupRequestsDtos UpdateGroupRequest should fail validation of invalid UpdateGroupRequest object" name="GroupRequestsDtos UpdateGroupRequest should fail validation of invalid UpdateGroupRequest object" time="0.001">
    </testcase>
    <testcase classname="GroupRequestsDtos UpdateGroupRequest should pass validation of valid UpdateGroupRequest object" name="GroupRequestsDtos UpdateGroupRequest should pass validation of valid UpdateGroupRequest object" time="0.001">
    </testcase>
    <testcase classname="GroupRequestsDtos GroupQuery should pass validation of empty GroupQuery object" name="GroupRequestsDtos GroupQuery should pass validation of empty GroupQuery object" time="0">
    </testcase>
    <testcase classname="GroupRequestsDtos GroupQuery should fail validation of invalid GroupQuery object" name="GroupRequestsDtos GroupQuery should fail validation of invalid GroupQuery object" time="0.001">
    </testcase>
    <testcase classname="GroupRequestsDtos GroupQuery should pass validation of valid GroupQuery object" name="GroupRequestsDtos GroupQuery should pass validation of valid GroupQuery object" time="0">
    </testcase>
  </testsuite>
  <testsuite name="TeamTypeTournamentParticipationGuard" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.185" tests="7">
    <testcase classname="TeamTypeTournamentParticipationGuard getTeamTypeFromUrl should return SOLO for solo application URL" name="TeamTypeTournamentParticipationGuard getTeamTypeFromUrl should return SOLO for solo application URL" time="0.006">
    </testcase>
    <testcase classname="TeamTypeTournamentParticipationGuard getTeamTypeFromUrl should return TEAM for team application URL" name="TeamTypeTournamentParticipationGuard getTeamTypeFromUrl should return TEAM for team application URL" time="0.003">
    </testcase>
    <testcase classname="TeamTypeTournamentParticipationGuard getTeamTypeFromUrl should throw error for invalid URL" name="TeamTypeTournamentParticipationGuard getTeamTypeFromUrl should throw error for invalid URL" time="0.034">
    </testcase>
    <testcase classname="TeamTypeTournamentParticipationGuard canActivate should allow solo participation in solo tournament" name="TeamTypeTournamentParticipationGuard canActivate should allow solo participation in solo tournament" time="0.002">
    </testcase>
    <testcase classname="TeamTypeTournamentParticipationGuard canActivate should allow team participation in team tournament" name="TeamTypeTournamentParticipationGuard canActivate should allow team participation in team tournament" time="0.002">
    </testcase>
    <testcase classname="TeamTypeTournamentParticipationGuard canActivate should deny solo participation in team tournament" name="TeamTypeTournamentParticipationGuard canActivate should deny solo participation in team tournament" time="0.011">
    </testcase>
    <testcase classname="TeamTypeTournamentParticipationGuard canActivate should deny team participation in solo tournament" name="TeamTypeTournamentParticipationGuard canActivate should deny team participation in solo tournament" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="PostgresExceptionFilter" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.126" tests="8">
    <testcase classname="PostgresExceptionFilter should handle PostgresError with code 23505" name="PostgresExceptionFilter should handle PostgresError with code 23505" time="0.007">
    </testcase>
    <testcase classname="PostgresExceptionFilter should handle PostgresError with code 23503" name="PostgresExceptionFilter should handle PostgresError with code 23503" time="0.002">
    </testcase>
    <testcase classname="PostgresExceptionFilter should handle PostgresError with code 42P01" name="PostgresExceptionFilter should handle PostgresError with code 42P01" time="0.001">
    </testcase>
    <testcase classname="PostgresExceptionFilter should handle PostgresError with code 42703" name="PostgresExceptionFilter should handle PostgresError with code 42703" time="0.002">
    </testcase>
    <testcase classname="PostgresExceptionFilter should handle PostgresError with code 08006" name="PostgresExceptionFilter should handle PostgresError with code 08006" time="0.001">
    </testcase>
    <testcase classname="PostgresExceptionFilter should handle PostgresError with code 53300" name="PostgresExceptionFilter should handle PostgresError with code 53300" time="0.002">
    </testcase>
    <testcase classname="PostgresExceptionFilter should handle PostgresError with code 57014" name="PostgresExceptionFilter should handle PostgresError with code 57014" time="0.001">
    </testcase>
    <testcase classname="PostgresExceptionFilter should handle unknown PostgresError code" name="PostgresExceptionFilter should handle unknown PostgresError code" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="DTO Validation Tests" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.272" tests="5">
    <testcase classname="DTO Validation Tests should validate LoginRequest" name="DTO Validation Tests should validate LoginRequest" time="0.005">
    </testcase>
    <testcase classname="DTO Validation Tests should validate ChangePasswordRequest" name="DTO Validation Tests should validate ChangePasswordRequest" time="0.001">
    </testcase>
    <testcase classname="DTO Validation Tests should validate SendResetPasswordEmailRequest" name="DTO Validation Tests should validate SendResetPasswordEmailRequest" time="0.002">
    </testcase>
    <testcase classname="DTO Validation Tests should validate ResetPasswordRequest" name="DTO Validation Tests should validate ResetPasswordRequest" time="0.001">
    </testcase>
    <testcase classname="DTO Validation Tests should validate UpdateEmailRequest" name="DTO Validation Tests should validate UpdateEmailRequest" time="0">
    </testcase>
  </testsuite>
  <testsuite name="AppController" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.13" tests="1">
    <testcase classname="AppController root should return &quot;Hello World!&quot;" name="AppController root should return &quot;Hello World!&quot;" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="GroupRequirements DTOs" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.141" tests="12">
    <testcase classname="GroupRequirements DTOs EloRequirementDto should validate a valid elo requirement" name="GroupRequirements DTOs EloRequirementDto should validate a valid elo requirement" time="0.002">
    </testcase>
    <testcase classname="GroupRequirements DTOs EloRequirementDto should fail validation with negative elo values" name="GroupRequirements DTOs EloRequirementDto should fail validation with negative elo values" time="0.001">
    </testcase>
    <testcase classname="GroupRequirements DTOs EloRequirementDto should fail validation with elo values above 5000" name="GroupRequirements DTOs EloRequirementDto should fail validation with elo values above 5000" time="0">
    </testcase>
    <testcase classname="GroupRequirements DTOs EloRequirementDto should fail validation without required fields" name="GroupRequirements DTOs EloRequirementDto should fail validation without required fields" time="0.001">
    </testcase>
    <testcase classname="GroupRequirements DTOs CreateGroupRequirementsDto should validate a valid create request" name="GroupRequirements DTOs CreateGroupRequirementsDto should validate a valid create request" time="0.001">
    </testcase>
    <testcase classname="GroupRequirements DTOs CreateGroupRequirementsDto should validate with no optional fields" name="GroupRequirements DTOs CreateGroupRequirementsDto should validate with no optional fields" time="0">
    </testcase>
    <testcase classname="GroupRequirements DTOs CreateGroupRequirementsDto should fail validation with invalid age ranges" name="GroupRequirements DTOs CreateGroupRequirementsDto should fail validation with invalid age ranges" time="0.001">
    </testcase>
    <testcase classname="GroupRequirements DTOs CreateGroupRequirementsDto should validate nested elo requirements" name="GroupRequirements DTOs CreateGroupRequirementsDto should validate nested elo requirements" time="0.001">
    </testcase>
    <testcase classname="GroupRequirements DTOs UpdateGroupRequirementsDto should validate a valid update request" name="GroupRequirements DTOs UpdateGroupRequirementsDto should validate a valid update request" time="0.001">
    </testcase>
    <testcase classname="GroupRequirements DTOs UpdateGroupRequirementsDto should validate partial updates" name="GroupRequirements DTOs UpdateGroupRequirementsDto should validate partial updates" time="0.001">
    </testcase>
    <testcase classname="GroupRequirements DTOs UpdateGroupRequirementsDto should fail validation with invalid age ranges" name="GroupRequirements DTOs UpdateGroupRequirementsDto should fail validation with invalid age ranges" time="0.001">
    </testcase>
    <testcase classname="GroupRequirements DTOs UpdateGroupRequirementsDto should validate nested elo requirements" name="GroupRequirements DTOs UpdateGroupRequirementsDto should validate nested elo requirements" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="RefreshToken" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.114" tests="2">
    <testcase classname="RefreshToken should return refreshToken from request" name="RefreshToken should return refreshToken from request" time="0.001">
    </testcase>
    <testcase classname="RefreshToken should return null if user is not present in request" name="RefreshToken should return null if user is not present in request" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="NotificationTemplatesFiller" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.144" tests="5">
    <testcase classname="NotificationTemplatesFiller compileTemplates should compile all templates" name="NotificationTemplatesFiller compileTemplates should compile all templates" time="0.002">
    </testcase>
    <testcase classname="NotificationTemplatesFiller getTemplate should return the compiled template" name="NotificationTemplatesFiller getTemplate should return the compiled template" time="0.001">
    </testcase>
    <testcase classname="NotificationTemplatesFiller getTemplate should throw an error if template not found" name="NotificationTemplatesFiller getTemplate should throw an error if template not found" time="0.034">
    </testcase>
    <testcase classname="NotificationTemplatesFiller fill should fill the template with provided data" name="NotificationTemplatesFiller fill should fill the template with provided data" time="0.001">
    </testcase>
    <testcase classname="NotificationTemplatesFiller fill should throw an error if required keys are missing" name="NotificationTemplatesFiller fill should throw an error if required keys are missing" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="MyNumber" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.114" tests="3">
    <testcase classname="MyNumber should pass validation when maximum is greater than minimum" name="MyNumber should pass validation when maximum is greater than minimum" time="0.004">
    </testcase>
    <testcase classname="MyNumber should fail validation when maximum is less than minimum" name="MyNumber should fail validation when maximum is less than minimum" time="0.001">
    </testcase>
    <testcase classname="MyNumber should fail validation when maximum is equal to minimum" name="MyNumber should fail validation when maximum is equal to minimum" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="PublicTournamentParticipationGuard" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.271" tests="3">
    <testcase classname="PublicTournamentParticipationGuard canActivate should allow participation when tournament is public" name="PublicTournamentParticipationGuard canActivate should allow participation when tournament is public" time="0.053">
    </testcase>
    <testcase classname="PublicTournamentParticipationGuard canActivate should deny participation when tournament is not public" name="PublicTournamentParticipationGuard canActivate should deny participation when tournament is not public" time="0.009">
    </testcase>
    <testcase classname="PublicTournamentParticipationGuard canActivate should deny participation when tournament is undefined" name="PublicTournamentParticipationGuard canActivate should deny participation when tournament is undefined" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="TeamTypeExtractor" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.145" tests="7">
    <testcase classname="TeamTypeExtractor getTeamTypeFromUrl should return SOLO for /apply-solo URLs" name="TeamTypeExtractor getTeamTypeFromUrl should return SOLO for /apply-solo URLs" time="0.001">
    </testcase>
    <testcase classname="TeamTypeExtractor getTeamTypeFromUrl should return TEAM for /apply-group URLs" name="TeamTypeExtractor getTeamTypeFromUrl should return TEAM for /apply-group URLs" time="0.015">
    </testcase>
    <testcase classname="TeamTypeExtractor getTeamTypeFromUrl should return SOLO for /admin/apply-solo URLs" name="TeamTypeExtractor getTeamTypeFromUrl should return SOLO for /admin/apply-solo URLs" time="0">
    </testcase>
    <testcase classname="TeamTypeExtractor getTeamTypeFromUrl should return TEAM for /admin/apply-group URLs" name="TeamTypeExtractor getTeamTypeFromUrl should return TEAM for /admin/apply-group URLs" time="0.001">
    </testcase>
    <testcase classname="TeamTypeExtractor getTeamTypeFromUrl should handle URLs with additional path segments" name="TeamTypeExtractor getTeamTypeFromUrl should handle URLs with additional path segments" time="0">
    </testcase>
    <testcase classname="TeamTypeExtractor getTeamTypeFromUrl should handle URLs with query parameters" name="TeamTypeExtractor getTeamTypeFromUrl should handle URLs with query parameters" time="0">
    </testcase>
    <testcase classname="TeamTypeExtractor getTeamTypeFromUrl should throw error for invalid URLs" name="TeamTypeExtractor getTeamTypeFromUrl should throw error for invalid URLs" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="CurrentUser" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.115" tests="2">
    <testcase classname="CurrentUser should return user from request" name="CurrentUser should return user from request" time="0.001">
    </testcase>
    <testcase classname="CurrentUser should return null if user is not present in request" name="CurrentUser should return null if user is not present in request" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="MetadataMaker" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.062" tests="5">
    <testcase classname="MetadataMaker makeMetadataFromQuery should return the correct metadata" name="MetadataMaker makeMetadataFromQuery should return the correct metadata" time="0.002">
    </testcase>
    <testcase classname="MetadataMaker makeLinks should return the correct links" name="MetadataMaker makeLinks should return the correct links" time="0.001">
    </testcase>
    <testcase classname="MetadataMaker makeLinks should handle URLs without page query parameter" name="MetadataMaker makeLinks should handle URLs without page query parameter" time="0">
    </testcase>
    <testcase classname="MetadataMaker makePagination should return the correct pagination" name="MetadataMaker makePagination should return the correct pagination" time="0.001">
    </testcase>
    <testcase classname="MetadataMaker makePagination should return the correct pagination when returnFullCount is false" name="MetadataMaker makePagination should return the correct pagination when returnFullCount is false" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="EloHelper" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.073" tests="14">
    <testcase classname="EloHelper expectedScore should calculate expected score correctly for equal ratings" name="EloHelper expectedScore should calculate expected score correctly for equal ratings" time="0.001">
    </testcase>
    <testcase classname="EloHelper expectedScore should calculate expected score correctly for higher rated player" name="EloHelper expectedScore should calculate expected score correctly for higher rated player" time="0.001">
    </testcase>
    <testcase classname="EloHelper expectedScore should calculate expected score correctly for lower rated player" name="EloHelper expectedScore should calculate expected score correctly for lower rated player" time="0">
    </testcase>
    <testcase classname="EloHelper getKFactor should return HIGH_VOLATILITY_K for new players" name="EloHelper getKFactor should return HIGH_VOLATILITY_K for new players" time="0.001">
    </testcase>
    <testcase classname="EloHelper getKFactor should return HIGH_VOLATILITY_K for players under high volatility threshold" name="EloHelper getKFactor should return HIGH_VOLATILITY_K for players under high volatility threshold" time="0">
    </testcase>
    <testcase classname="EloHelper getKFactor should return MEDIUM_VOLATILITY_K for players in medium range" name="EloHelper getKFactor should return MEDIUM_VOLATILITY_K for players in medium range" time="0">
    </testcase>
    <testcase classname="EloHelper getKFactor should return LOW_VOLATILITY_K for experienced players" name="EloHelper getKFactor should return LOW_VOLATILITY_K for experienced players" time="0.001">
    </testcase>
    <testcase classname="EloHelper updateRating should increase rating for a win against equal opponent" name="EloHelper updateRating should increase rating for a win against equal opponent" time="0">
    </testcase>
    <testcase classname="EloHelper updateRating should decrease rating for a loss against equal opponent" name="EloHelper updateRating should decrease rating for a loss against equal opponent" time="0.001">
    </testcase>
    <testcase classname="EloHelper updateRating should increase rating more for winning against higher rated opponent" name="EloHelper updateRating should increase rating more for winning against higher rated opponent" time="0">
    </testcase>
    <testcase classname="EloHelper updateRating should decrease rating less for losing against higher rated opponent" name="EloHelper updateRating should decrease rating less for losing against higher rated opponent" time="0.001">
    </testcase>
    <testcase classname="EloHelper updateRating should never return a negative rating" name="EloHelper updateRating should never return a negative rating" time="0">
    </testcase>
    <testcase classname="EloHelper updateRating should return rounded integers" name="EloHelper updateRating should return rounded integers" time="0">
    </testcase>
    <testcase classname="EloHelper updateRating should apply different K factors based on matches played" name="EloHelper updateRating should apply different K factors based on matches played" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="MyDateRange" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="0.105" tests="2">
    <testcase classname="MyDateRange should pass validation when endDate is greater than startDate" name="MyDateRange should pass validation when endDate is greater than startDate" time="0.002">
    </testcase>
    <testcase classname="MyDateRange should fail validation when endDate same as startDate" name="MyDateRange should fail validation when endDate same as startDate" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="TournamentService" errors="0" failures="0" skipped="0" timestamp="2025-04-09T05:16:27" time="1.958" tests="13">
    <testcase classname="TournamentService create should successfully create a tournament" name="TournamentService create should successfully create a tournament" time="0.011">
    </testcase>
    <testcase classname="TournamentService create should throw UnprocessableEntityException when creation fails" name="TournamentService create should throw UnprocessableEntityException when creation fails" time="0.01">
    </testcase>
    <testcase classname="TournamentService findAll should return an array of tournaments" name="TournamentService findAll should return an array of tournaments" time="0.002">
    </testcase>
    <testcase classname="TournamentService findAll should return empty array when no tournaments found" name="TournamentService findAll should return empty array when no tournaments found" time="0.002">
    </testcase>
    <testcase classname="TournamentService findOne should return a single tournament" name="TournamentService findOne should return a single tournament" time="0.001">
    </testcase>
    <testcase classname="TournamentService findOne should throw NotFoundException when tournament not found" name="TournamentService findOne should throw NotFoundException when tournament not found" time="0.002">
    </testcase>
    <testcase classname="TournamentService update should successfully update a tournament" name="TournamentService update should successfully update a tournament" time="0.002">
    </testcase>
    <testcase classname="TournamentService update should throw NotFoundException when tournament not found" name="TournamentService update should throw NotFoundException when tournament not found" time="0.003">
    </testcase>
    <testcase classname="TournamentService remove should successfully remove a tournament" name="TournamentService remove should successfully remove a tournament" time="0.001">
    </testcase>
    <testcase classname="TournamentService remove should throw NotFoundException when tournament not found" name="TournamentService remove should throw NotFoundException when tournament not found" time="0.002">
    </testcase>
    <testcase classname="TournamentService getManagedTournaments should return tournaments managed by the user" name="TournamentService getManagedTournaments should return tournaments managed by the user" time="0.001">
    </testcase>
    <testcase classname="TournamentService getManagedTournaments should return empty array when no tournaments are managed by the user" name="TournamentService getManagedTournaments should return empty array when no tournaments are managed by the user" time="0.001">
    </testcase>
    <testcase classname="TournamentService getManagedTournaments should work without pagination parameter" name="TournamentService getManagedTournaments should work without pagination parameter" time="0.002">
    </testcase>
  </testsuite>
</testsuites>