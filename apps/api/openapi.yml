openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        "200":
          description: ""
  /users/fake:
    post:
      operationId: UsersController_createFake
      parameters: []
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: &a1
        - users
      security:
        - bearer: []
  /users/auto-complete/{search}:
    get:
      operationId: UsersController_userAutoComplete
      parameters:
        - name: search
          required: true
          in: path
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MiniUserResponseWithProfilePicture"
      tags: *a1
  /users:
    post:
      operationId: UsersController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a1
    patch:
      operationId: UsersController_updateMe
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserInfo"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a1
      security:
        - bearer: []
    delete:
      operationId: UsersController_deleteMe
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MiniUserResponse"
      tags: *a1
      security:
        - bearer: []
    get:
      operationId: UsersController_findAll
      parameters:
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: name
          required: false
          in: query
          schema:
            type: string
        - name: username
          required: false
          in: query
          schema:
            type: string
        - name: email
          required: false
          in: query
          schema:
            type: string
        - name: country
          required: false
          in: query
          schema:
            type: string
        - name: location
          required: false
          in: query
          schema:
            type: string
        - name: age
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          content:
            application/json:
              examples:
                UserResponse:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: https://example.com/api/users?page=1
                        prev: https://example.com/api/users?page=0
                        next: https://example.com/api/users?page=2
                      query:
                        page: 1
                        pageSize: 10
                        username: john_doe
                        country: USA
                        field: username
                        order: asc
                        responseType: mini
                    results:
                      - id: 1
                        username: john_doe
                        isFake: false
                        profilePicture: https://example.com/image.jpg
                        country: USA
                        bio: I am a cool person
                        email: john.doe@example.com
                        followers: 0
                        level: 0
                        name: John Doe
                        age: 20
                        updatedAt: &a2 2025-04-08T09:45:44.222Z
                MiniUserResponse:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: https://example.com/api/users?page=1
                        prev: https://example.com/api/users?page=0
                        next: https://example.com/api/users?page=2
                      query:
                        page: 1
                        pageSize: 10
                        username: john_doe
                        country: USA
                        field: username
                        order: asc
                        responseType: mini
                    results:
                      - id: 1
                        username: john_doe
                MiniUserResponseWithCountry:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: https://example.com/api/users?page=1
                        prev: https://example.com/api/users?page=0
                        next: https://example.com/api/users?page=2
                      query:
                        page: 1
                        pageSize: 10
                        username: john_doe
                        country: USA
                        field: username
                        order: asc
                        responseType: mini
                    results:
                      - id: 1
                        username: john_doe
                        isFake: false
                        profilePicture: https://example.com/image.jpg
                        country: USA
                MiniUserResponseWithProfilePicture:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: https://example.com/api/users?page=1
                        prev: https://example.com/api/users?page=0
                        next: https://example.com/api/users?page=2
                      query:
                        page: 1
                        pageSize: 10
                        username: john_doe
                        country: USA
                        field: username
                        order: asc
                        responseType: mini
                    results:
                      - id: 1
                        username: john_doe
                        isFake: false
                        profilePicture: https://example.com/image.jpg
                ExtendedUserResponse:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: https://example.com/api/users?page=1
                        prev: https://example.com/api/users?page=0
                        next: https://example.com/api/users?page=2
                      query:
                        page: 1
                        pageSize: 10
                        username: john_doe
                        country: USA
                        field: username
                        order: asc
                        responseType: mini
                    results:
                      - id: 1
                        username: john_doe
                        isFake: false
                        profilePicture: https://example.com/image.jpg
                        country: USA
                        bio: I am a cool person
                        email: john.doe@example.com
                        followers: 0
                        level: 0
                        name: John Doe
                        age: 20
                        updatedAt: *a2
                        createdAt: 2025-04-08T09:45:44.222Z
                        following: 0
                        location: New York
          description: ""
      tags: *a1
  /users/me:
    get:
      operationId: UsersController_findMe
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtendedUserResponse"
      tags: *a1
      security:
        - bearer: []
  /users/{id}:
    get:
      operationId: UsersController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
        - name: responseType
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/MiniUserResponse"
                  - $ref: "#/components/schemas/UserResponse"
                  - $ref: "#/components/schemas/ExtendedUserResponse"
                  - $ref: "#/components/schemas/MiniUserResponseWithCountry"
                  - $ref: "#/components/schemas/MiniUserResponseWithProfilePicture"
              examples:
                UserResponse:
                  value:
                    id: 1
                    username: john_doe
                    isFake: false
                    profilePicture: https://example.com/image.jpg
                    country: USA
                    bio: I am a cool person
                    email: john.doe@example.com
                    followers: 0
                    level: 0
                    name: John Doe
                    age: 20
                    updatedAt: &a3 2025-04-08T09:45:44.222Z
                MiniUserResponse:
                  value:
                    id: 1
                    username: john_doe
                MiniUserResponseWithCountry:
                  value:
                    id: 1
                    username: john_doe
                    isFake: false
                    profilePicture: https://example.com/image.jpg
                    country: USA
                MiniUserResponseWithProfilePicture:
                  value:
                    id: 1
                    username: john_doe
                    isFake: false
                    profilePicture: https://example.com/image.jpg
                ExtendedUserResponse:
                  value:
                    id: 1
                    username: john_doe
                    isFake: false
                    profilePicture: https://example.com/image.jpg
                    country: USA
                    bio: I am a cool person
                    email: john.doe@example.com
                    followers: 0
                    level: 0
                    name: John Doe
                    age: 20
                    updatedAt: *a3
                    createdAt: 2025-04-08T09:45:44.222Z
                    following: 0
                    location: New York
          description: ""
      tags: *a1
    patch:
      operationId: UsersController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserInfo"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a1
      security:
        - bearer: []
    delete:
      operationId: UsersController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a1
      security:
        - bearer: []
  /auth/password-reset-request/{email}:
    get:
      operationId: AuthController_passwordResetRequest
      parameters:
        - name: email
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: &a4
        - auth
  /auth/password-reset/{token}:
    post:
      operationId: AuthController_passwordReset
      parameters:
        - name: token
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetRequest"
      responses:
        "201":
          description: ""
      tags: *a4
  /auth/email-confirmation/{token}:
    post:
      operationId: AuthController_emailConfirmation
      parameters:
        - name: token
          required: true
          in: path
          schema:
            type: string
      responses:
        "201":
          description: ""
      tags: *a4
  /auth/sse-token:
    get:
      operationId: AuthController_getSseToken
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a4
      security:
        - bearer: []
  /auth/login:
    post:
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokensResponse"
      tags: *a4
  /auth/refresh:
    get:
      operationId: AuthController_refresh
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokensResponse"
        "401":
          description: ""
      tags: *a4
      security:
        - bearer: []
  /auth/google:
    get:
      operationId: AuthController_auth
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a4
  /auth/google/callback:
    get:
      operationId: AuthController_authCallback
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokensResponse"
      tags: *a4
      security:
        - bearer: []
  /groups/auto-complete/{search}:
    get:
      operationId: GroupController_groupAutoComplete
      parameters:
        - name: search
          required: true
          in: path
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MiniGroupResponseWithLogo"
      tags: &a5
        - groups
  /groups/for-roster/{tournamentId}:
    get:
      operationId: GroupController_getGroupsEligibleForRosterCreation
      parameters:
        - name: tournamentId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MiniGroupResponseWithLogo"
      tags: *a5
      security:
        - bearer: []
  /groups:
    get:
      operationId: GroupController_findAll
      parameters:
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: name
          required: false
          in: query
          schema:
            type: string
        - name: abbreviation
          required: false
          in: query
          schema:
            type: string
        - name: type
          required: false
          in: query
          schema:
            type: string
        - name: focus
          required: false
          in: query
          schema:
            type: string
        - name: location
          required: false
          in: query
          schema:
            type: string
        - name: country
          required: false
          in: query
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                mini:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /groups?page=1
                        prev: /groups?page=0
                        next: /groups?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: MINI
                    results:
                      - id: 1
                        name: Chess Club
                        abbreviation: CC
                mini-with-logo:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /groups?page=1
                        prev: /groups?page=0
                        next: /groups?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: MINI-WITH-LOGO
                    results:
                      - id: 1
                        name: Chess Club
                        abbreviation: CC
                        logo: https://example.com/chess-club-logo.jpg
                mini-with-country:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /groups?page=1
                        prev: /groups?page=0
                        next: /groups?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: MINI-WITH-COUNTRY
                    results:
                      - id: 1
                        name: Chess Club
                        abbreviation: CC
                        country: Croatia
                        logo: https://example.com/chess-club-logo.jpg
                base:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /groups?page=1
                        prev: /groups?page=0
                        next: /groups?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: BASE
                    results:
                      - id: 1
                        name: Chess Club
                        abbreviation: CC
                        country: Croatia
                        logo: https://example.com/chess-club-logo.jpg
                        description: A community of chess enthusiasts
                        type: Sports Club
                        focus: Chess
                        updatedAt: 2025-04-08T09:45:44.468Z
                        memberCount: 50
                extended:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /groups?page=1
                        prev: /groups?page=0
                        next: /groups?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: EXTENDED
                    results:
                      - id: 1
                        name: Chess Club
                        abbreviation: CC
                        country: Croatia
                        logo: https://example.com/chess-club-logo.jpg
                        description: A community of chess enthusiasts
                        type: Sports Club
                        focus: Chess
                        updatedAt: 2025-04-08T09:45:44.468Z
                        memberCount: 50
                        createdAt: 2025-04-08T09:45:44.468Z
                        tournamentCount: 10
                        subscriberCount: 100
          description: ""
      tags: *a5
    post:
      operationId: GroupController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGroupRequest"
      responses:
        "200":
          content:
            application/json:
              example:
                id: 1
                name: Chess Club
                abbreviation: CC
                country: Croatia
                logo: https://example.com/chess-club-logo.jpg
                description: A community of chess enthusiasts
                type: Sports Club
                focus: Chess
                updatedAt: 2025-04-08T09:45:44.468Z
                memberCount: 50
          description: ""
      tags: *a5
      security:
        - bearer: []
  /groups/{groupId}:
    get:
      operationId: GroupController_findOne
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
        - name: responseType
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                mini:
                  value:
                    id: 1
                    name: Chess Club
                    abbreviation: CC
                mini-with-logo:
                  value:
                    id: 1
                    name: Chess Club
                    abbreviation: CC
                    logo: https://example.com/chess-club-logo.jpg
                mini-with-country:
                  value:
                    id: 1
                    name: Chess Club
                    abbreviation: CC
                    country: Croatia
                    logo: https://example.com/chess-club-logo.jpg
                base:
                  value:
                    id: 1
                    name: Chess Club
                    abbreviation: CC
                    country: Croatia
                    logo: https://example.com/chess-club-logo.jpg
                    description: A community of chess enthusiasts
                    type: Sports Club
                    focus: Chess
                    updatedAt: 2025-04-08T09:45:44.468Z
                    memberCount: 50
                extended:
                  value:
                    id: 1
                    name: Chess Club
                    abbreviation: CC
                    country: Croatia
                    logo: https://example.com/chess-club-logo.jpg
                    description: A community of chess enthusiasts
                    type: Sports Club
                    focus: Chess
                    updatedAt: 2025-04-08T09:45:44.468Z
                    memberCount: 50
                    createdAt: 2025-04-08T09:45:44.468Z
                    tournamentCount: 10
                    subscriberCount: 100
              schema:
                anyOf:
                  - $ref: "#/components/schemas/MiniGroupResponse"
                  - $ref: "#/components/schemas/MiniGroupResponseWithLogo"
                  - $ref: "#/components/schemas/MiniGroupResponseWithCountry"
                  - $ref: "#/components/schemas/GroupResponse"
                  - $ref: "#/components/schemas/GroupResponseExtended"
          description: ""
      tags: *a5
    patch:
      operationId: GroupController_update
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGroupRequest"
      responses:
        "200":
          content:
            application/json:
              example:
                id: 1
                name: Chess Club
                abbreviation: CC
                country: Croatia
                logo: https://example.com/chess-club-logo.jpg
                description: A community of chess enthusiasts
                type: Sports Club
                focus: Chess
                updatedAt: 2025-04-08T09:45:44.468Z
                memberCount: 50
          description: ""
      tags: *a5
      security:
        - bearer: []
    delete:
      operationId: GroupController_remove
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a5
      security:
        - bearer: []
  /groups/fake:
    post:
      operationId: GroupController_createFake
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFakeGroupRequest"
      responses:
        "201":
          content:
            application/json:
              example:
                success: true
                id: 1
          description: ""
      tags: *a5
      security:
        - bearer: []
  /groups/{groupId}/members:
    get:
      operationId: GroupController_getGroupMembers
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          content:
            application/json:
              example:
                group:
                  id: 1
                  name: Chess Club
                  abbreviation: CC
                  country: Croatia
                  logo: https://example.com/chess-club-logo.jpg
                  description: A community of chess enthusiasts
                  type: Sports Club
                  focus: Chess
                  updatedAt: 2025-04-08T09:45:44.468Z
                  memberCount: 50
                members: []
          description: ""
      tags: *a5
  /groups/{groupId}/tournaments:
    get:
      operationId: GroupController_getGroupTournaments
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          content:
            application/json:
              example:
                group:
                  id: 1
                  name: Chess Club
                  abbreviation: CC
                  country: Croatia
                  logo: https://example.com/chess-club-logo.jpg
                  description: A community of chess enthusiasts
                  type: Sports Club
                  focus: Chess
                  updatedAt: 2025-04-08T09:45:44.468Z
                  memberCount: 50
                tournaments: []
          description: ""
      tags: *a5
  /groups/{groupId}/followers:
    get:
      operationId: GroupController_getGroupFollowers
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          content:
            application/json:
              example:
                group:
                  id: 1
                  name: Chess Club
                  abbreviation: CC
                  country: Croatia
                  logo: https://example.com/chess-club-logo.jpg
                  description: A community of chess enthusiasts
                  type: Sports Club
                  focus: Chess
                  updatedAt: 2025-04-08T09:45:44.468Z
                  memberCount: 50
                followers: []
          description: ""
      tags: *a5
  /group-membership/auto-complete/users/{groupId}/{search}:
    get:
      operationId: GroupMembershipController_autoComplete
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
        - name: search
          required: true
          in: path
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MiniUserResponseWithProfilePicture"
      tags: &a6
        - group-membership
      security:
        - bearer: []
  /group-membership/auto-complete/groups/{search}:
    get:
      operationId: GroupMembershipController_autoCompleteGroups
      parameters:
        - name: search
          required: true
          in: path
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MiniGroupResponseWithLogo"
      tags: *a6
      security:
        - bearer: []
  /group-membership:
    get:
      operationId: GroupMembershipController_findAll
      parameters:
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: userId
          required: false
          in: query
          schema:
            type: number
        - name: groupId
          required: false
          in: query
          schema:
            type: number
        - name: role
          required: false
          in: query
          schema:
            enum:
              - owner
              - member
              - admin
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                MinimalMembershipResponse:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: https://example.com/api/group-membership?page=1
                        prev: https://example.com/api/group-membership?page=0
                        next: https://example.com/api/group-membership?page=2
                      query:
                        page: 1
                        pageSize: 10
                        userId: 1
                        groupId: 1
                        role: member
                        field: createdAt
                        order: desc
                        responseType: MINIMALMEMBERSHIPRESPONSE
                    results:
                      - userId: 1
                        groupId: 1
                        role: member
                GroupMembershipResponse:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: https://example.com/api/group-membership?page=1
                        prev: https://example.com/api/group-membership?page=0
                        next: https://example.com/api/group-membership?page=2
                      query:
                        page: 1
                        pageSize: 10
                        userId: 1
                        groupId: 1
                        role: member
                        field: createdAt
                        order: desc
                        responseType: GROUPMEMBERSHIPRESPONSE
                    results:
                      - userId: 1
                        groupId: 1
                        role: member
                        user: &a7
                          id: 1
                          isFake: false
                          username: john_doe
                          profilePicture: https://example.com/image.jpg
                        group: &a8
                          id: 1
                          name: Cool Group
                          logo: https://example.com/logo.jpg
                          abbreviation: CG
                        createdAt: 2025-04-08T09:45:44.480Z
                UserMembershipResponseWithDates:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: https://example.com/api/group-membership?page=1
                        prev: https://example.com/api/group-membership?page=0
                        next: https://example.com/api/group-membership?page=2
                      query:
                        page: 1
                        pageSize: 10
                        userId: 1
                        groupId: 1
                        role: member
                        field: createdAt
                        order: desc
                        responseType: USERMEMBERSHIPRESPONSEWITHDATES
                    results:
                      - createdAt: 2025-04-08T09:45:44.480Z
                        isFake: false
                        role: member
                        country: country
                        id: 1
                        username: username
                        profilePicture: profilePicture
                GroupMembershipResponseWithDates:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: https://example.com/api/group-membership?page=1
                        prev: https://example.com/api/group-membership?page=0
                        next: https://example.com/api/group-membership?page=2
                      query:
                        page: 1
                        pageSize: 10
                        userId: 1
                        groupId: 1
                        role: member
                        field: createdAt
                        order: desc
                        responseType: GROUPMEMBERSHIPRESPONSEWITHDATES
                    results:
                      - userId: 1
                        groupId: 1
                        role: member
                        user: *a7
                        group: *a8
                        createdAt: 2025-04-08T09:45:44.480Z
                        country: country
                        name: name
                        logo: logo
                        id: 1
                        abbreviation: abbreviation
                GroupMembershipKey:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: https://example.com/api/group-membership?page=1
                        prev: https://example.com/api/group-membership?page=0
                        next: https://example.com/api/group-membership?page=2
                      query:
                        page: 1
                        pageSize: 10
                        userId: 1
                        groupId: 1
                        role: member
                        field: createdAt
                        order: desc
                        responseType: GROUPMEMBERSHIPKEY
                    results:
                      - userId: 1
                        groupId: 1
          description: ""
      tags: *a6
  /group-membership/{groupId}/leave:
    delete:
      operationId: GroupMembershipController_removeMyself
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a6
      security:
        - bearer: []
  /group-membership/{groupId}/{userId}:
    get:
      operationId: GroupMembershipController_findOne
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
        - name: userId
          required: true
          in: path
          schema:
            type: number
        - name: responseType
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                MinimalMembershipResponse:
                  value:
                    userId: 1
                    groupId: 1
                    role: member
                GroupMembershipResponse:
                  value:
                    userId: 1
                    groupId: 1
                    role: member
                    user: &a9
                      id: 1
                      isFake: false
                      username: john_doe
                      profilePicture: https://example.com/image.jpg
                    group: &a10
                      id: 1
                      name: Cool Group
                      logo: https://example.com/logo.jpg
                      abbreviation: CG
                    createdAt: 2025-04-08T09:45:44.480Z
                UserMembershipResponseWithDates:
                  value:
                    createdAt: 2025-04-08T09:45:44.480Z
                    isFake: false
                    role: member
                    country: country
                    id: 1
                    username: username
                    profilePicture: profilePicture
                GroupMembershipResponseWithDates:
                  value:
                    userId: 1
                    groupId: 1
                    role: member
                    user: *a9
                    group: *a10
                    createdAt: 2025-04-08T09:45:44.480Z
                    country: country
                    name: name
                    logo: logo
                    id: 1
                    abbreviation: abbreviation
                GroupMembershipKey:
                  value:
                    userId: 1
                    groupId: 1
              schema:
                anyOf:
                  - $ref: "#/components/schemas/MinimalMembershipResponse"
                  - $ref: "#/components/schemas/GroupMembershipResponse"
                  - $ref: "#/components/schemas/UserMembershipResponseWithDates"
                  - $ref: "#/components/schemas/GroupMembershipResponseWithDates"
                  - $ref: "#/components/schemas/GroupMembershipKey"
          description: ""
      tags: *a6
    post:
      operationId: GroupMembershipController_create
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
        - name: userId
          required: true
          in: path
          schema:
            type: number
      responses:
        "201":
          description: ""
      tags: *a6
      security:
        - bearer: []
    delete:
      operationId: GroupMembershipController_remove
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
        - name: userId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a6
      security:
        - bearer: []
    patch:
      operationId: GroupMembershipController_update
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
        - name: userId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupMembershipUpdateRequest"
      responses:
        "200":
          description: ""
      tags: *a6
      security:
        - bearer: []
  /notifications:
    get:
      operationId: SseNotificationsController_findAll
      parameters:
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: isRead
          required: false
          in: query
          schema:
            type: boolean
        - name: userId
          required: false
          in: query
          schema:
            type: number
        - name: types
          required: false
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NotificationsResponse"
      tags: &a11
        - SSE Notifications
      security:
        - bearer: []
  /notifications/token:
    post:
      operationId: SseNotificationsController_requestNewToken
      parameters: []
      responses:
        "201":
          description: ""
      tags: *a11
      security:
        - bearer: []
  /notifications/{id}/read:
    patch:
      operationId: SseNotificationsController_markAsRead
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "204":
          description: ""
      tags: *a11
      security:
        - bearer: []
  /notifications/read/all:
    patch:
      operationId: SseNotificationsController_markAllAsRead
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a11
      security:
        - bearer: []
  /notifications/read/bulk:
    patch:
      operationId: SseNotificationsController_markBulkAsRead
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a11
      security:
        - bearer: []
  /notifications/{id}:
    delete:
      operationId: SseNotificationsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a11
      security:
        - bearer: []
  /notifications/stream:
    get:
      operationId: SseNotificationsController_getNotificationStream
      parameters:
        - name: token
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a11
  /followers/auto-complete/followers/{search}:
    get:
      operationId: FollowersController_autoCompleteFollowers
      parameters:
        - name: search
          required: true
          in: path
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MiniUserResponseWithProfilePicture"
      tags: &a12
        - followers
      security:
        - bearer: []
  /followers/auto-complete/following/{search}:
    get:
      operationId: FollowersController_autoCompleteFollowing
      parameters:
        - name: search
          required: true
          in: path
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MiniUserResponseWithProfilePicture"
      tags: *a12
      security:
        - bearer: []
  /followers:
    get:
      operationId: FollowersController_findAll
      parameters:
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: userId
          required: false
          in: query
          schema:
            type: number
        - name: followerId
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          content:
            application/json:
              examples:
                base:
                  value:
                    id: 1
                    username: john_doe
                    createdAt: 2025-04-08T09:45:44.491Z
                    bio: I am a user
                    profilePicture: https://example.com/image.jpg
                    country: USA
                    name: John Doe
                    email: john@doe.com
                    followers: 0
                    level: 0
                    isFake: false
                    updatedAt: 2025-04-08T09:45:44.491Z
                    age: 20
                mini:
                  value:
                    createdAt: 2025-04-08T09:45:44.491Z
                    id: 1
                    isFake: false
                    username: john_doe
          description: ""
      tags: *a12
  /followers/{userId}/{followerId}:
    get:
      operationId: FollowersController_findOne
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: number
        - name: followerId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FollowerMiniResponse"
      tags: *a12
  /followers/{userId}:
    post:
      operationId: FollowersController_create
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: number
      responses:
        "201":
          description: ""
      tags: *a12
      security:
        - bearer: []
    delete:
      operationId: FollowersController_remove
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a12
      security:
        - bearer: []
  /group-join-requests:
    get:
      operationId: GroupJoinRequestsController_findAll
      parameters:
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: userId
          required: false
          in: query
          schema:
            type: number
        - name: groupId
          required: false
          in: query
          schema:
            type: number
        - name: relatedLFPId
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          content:
            application/json:
              examples:
                with-user:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /group-join-requests?page=1
                        prev: /group-join-requests?page=0
                        next: /group-join-requests?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: WITH-USER
                    results:
                      - id: 1
                        username: john_doe
                        isFake: false
                        profilePicture: https://example.com/image.jpg
                        country: USA
                        bio: I am a cool person
                        email: john.doe@example.com
                        followers: 0
                        level: 0
                        name: John Doe
                        age: 20
                        updatedAt: 2025-04-08T09:45:44.222Z
                        groupId: 1
                        message: I would like to join this group
                with-mini-user:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /group-join-requests?page=1
                        prev: /group-join-requests?page=0
                        next: /group-join-requests?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: WITH-MINI-USER
                    results:
                      - id: 1
                        username: john_doe
                        isFake: false
                        profilePicture: https://example.com/image.jpg
                        createdAt: 2025-04-08T09:45:44.499Z
                with-group:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /group-join-requests?page=1
                        prev: /group-join-requests?page=0
                        next: /group-join-requests?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: WITH-GROUP
                    results:
                      - id: 1
                        name: Chess Club
                        abbreviation: CC
                        country: Croatia
                        logo: https://example.com/chess-club-logo.jpg
                        description: A community of chess enthusiasts
                        type: Sports Club
                        focus: Chess
                        updatedAt: 2025-04-08T09:45:44.468Z
                        memberCount: 50
                        userId: 1
                        message: I would like to join this group
                with-mini-group:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /group-join-requests?page=1
                        prev: /group-join-requests?page=0
                        next: /group-join-requests?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: WITH-MINI-GROUP
                    results:
                      - id: 1
                        name: Chess Club
                        abbreviation: CC
                        logo: https://example.com/chess-club-logo.jpg
                        createdAt: 2025-04-08T09:45:44.499Z
          description: ""
      tags: &a13
        - group-join-requests
      security: &a15
        - &a14
          bearer: []
  /group-join-requests/{groupId}:
    post:
      operationId: GroupJoinRequestsController_create
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGroupJoinRequestDto"
      responses:
        "201":
          description: ""
      tags: *a13
      security:
        - *a14
        - bearer: []
    patch:
      operationId: GroupJoinRequestsController_update
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGroupJoinRequestDto"
      responses:
        "200":
          description: ""
      tags: *a13
      security:
        - *a14
        - bearer: []
    delete:
      operationId: GroupJoinRequestsController_remove
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a13
      security:
        - *a14
        - bearer: []
  /group-join-requests/{groupId}/{userId}:
    get:
      operationId: GroupJoinRequestsController_findOne
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
        - name: userId
          required: true
          in: path
          schema:
            type: number
        - name: responseType
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Returns a specific group join request
          content:
            application/json:
              examples:
                with-user:
                  value:
                    id: 1
                    username: john_doe
                    isFake: false
                    profilePicture: https://example.com/image.jpg
                    country: USA
                    bio: I am a cool person
                    email: john.doe@example.com
                    followers: 0
                    level: 0
                    name: John Doe
                    age: 20
                    updatedAt: 2025-04-08T09:45:44.222Z
                    groupId: 1
                    message: I would like to join this group
                with-mini-user:
                  value:
                    id: 1
                    username: john_doe
                    isFake: false
                    profilePicture: https://example.com/image.jpg
                    createdAt: 2025-04-08T09:45:44.499Z
                with-group:
                  value:
                    id: 1
                    name: Chess Club
                    abbreviation: CC
                    country: Croatia
                    logo: https://example.com/chess-club-logo.jpg
                    description: A community of chess enthusiasts
                    type: Sports Club
                    focus: Chess
                    updatedAt: 2025-04-08T09:45:44.468Z
                    memberCount: 50
                    userId: 1
                    message: I would like to join this group
                with-mini-group:
                  value:
                    id: 1
                    name: Chess Club
                    abbreviation: CC
                    logo: https://example.com/chess-club-logo.jpg
                    createdAt: 2025-04-08T09:45:44.499Z
              schema:
                anyOf:
                  - $ref: "#/components/schemas/GroupJoinRequestWithUserResponse"
                  - $ref: "#/components/schemas/GroupJoinRequestWithMiniUserResponse"
                  - $ref: "#/components/schemas/GroupJoinRequestWithGroupResponse"
                  - $ref: "#/components/schemas/GroupJoinRequestWithMiniGroupResponse"
      tags: *a13
      security: *a15
  /group-join-requests/{groupId}/{userId}/accept:
    post:
      operationId: GroupJoinRequestsController_accept
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
        - name: userId
          required: true
          in: path
          schema:
            type: number
      responses:
        "201":
          description: ""
      tags: *a13
      security: *a15
  /group-join-requests/{groupId}/{userId}/reject:
    delete:
      operationId: GroupJoinRequestsController_reject
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
        - name: userId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a13
      security: *a15
  /group-invites:
    get:
      operationId: GroupInvitesController_findAll
      parameters:
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: userId
          required: false
          in: query
          schema:
            type: number
        - name: groupId
          required: false
          in: query
          schema:
            type: number
        - name: relatedLFPId
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          content:
            application/json:
              examples:
                with-user:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /group-invites?page=1
                        prev: /group-invites?page=0
                        next: /group-invites?page=2
                      query:
                        page: 1
                        pageSize: 10
                        userId: 1
                        groupId: 1
                        responseType: WITH-USER
                    results:
                      - id: 1
                        username: john_doe
                        bio: I am a user
                        profilePicture: https://example.com/image.jpg
                        country: USA
                        name: John Doe
                        email: john@doe.com
                        followers: 0
                        isFake: false
                        level: 0
                        updatedAt: 2025-04-08T09:45:44.507Z
                        message: Would you like to join our group?
                        groupId: 1
                        age: 20
                with-mini-user:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /group-invites?page=1
                        prev: /group-invites?page=0
                        next: /group-invites?page=2
                      query:
                        page: 1
                        pageSize: 10
                        userId: 1
                        groupId: 1
                        responseType: WITH-MINI-USER
                    results:
                      - id: 1
                        username: john_doe
                        profilePicture: https://example.com/image.jpg
                        createdAt: 2025-04-08T09:45:44.507Z
                        isFake: false
                with-group:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /group-invites?page=1
                        prev: /group-invites?page=0
                        next: /group-invites?page=2
                      query:
                        page: 1
                        pageSize: 10
                        userId: 1
                        groupId: 1
                        responseType: WITH-GROUP
                    results:
                      - id: 1
                        name: Example Group
                        description: This is an example group
                        logo: https://example.com/logo.jpg
                        memberCount: 10
                        message: Would you like to join our group?
                        userId: 1
                        abbreviation: EG
                        country: USA
                        focus: Hybrid
                        locationId: 1
                        type: Public
                        updatedAt: 4/8/2025
                with-mini-group:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /group-invites?page=1
                        prev: /group-invites?page=0
                        next: /group-invites?page=2
                      query:
                        page: 1
                        pageSize: 10
                        userId: 1
                        groupId: 1
                        responseType: WITH-MINI-GROUP
                    results:
                      - id: 1
                        name: Example Group
                        abbreviation: EG
                        logo: https://example.com/logo.jpg
                        createdAt: 2025-04-08T09:45:44.508Z
          description: ""
      tags: &a16
        - group-invites
  /group-invites/{groupId}/accept:
    post:
      operationId: GroupInvitesController_accept
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "201":
          description: ""
      tags: *a16
      security:
        - bearer: []
  /group-invites/{groupId}/reject:
    delete:
      operationId: GroupInvitesController_reject
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a16
      security:
        - bearer: []
  /group-invites/{groupId}/{userId}:
    post:
      operationId: GroupInvitesController_create
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
        - name: userId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGroupInviteDto"
      responses:
        "201":
          description: ""
      tags: *a16
      security:
        - bearer: []
    get:
      operationId: GroupInvitesController_findOne
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: number
        - name: groupId
          required: true
          in: path
          schema:
            type: number
        - name: responseType
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                with-user:
                  value:
                    id: 1
                    username: john_doe
                    bio: I am a user
                    profilePicture: https://example.com/image.jpg
                    country: USA
                    name: John Doe
                    email: john@doe.com
                    followers: 0
                    isFake: false
                    level: 0
                    updatedAt: 2025-04-08T09:45:44.507Z
                    message: Would you like to join our group?
                    groupId: 1
                    age: 20
                with-mini-user:
                  value:
                    id: 1
                    username: john_doe
                    profilePicture: https://example.com/image.jpg
                    createdAt: 2025-04-08T09:45:44.507Z
                    isFake: false
                with-group:
                  value:
                    id: 1
                    name: Example Group
                    description: This is an example group
                    logo: https://example.com/logo.jpg
                    memberCount: 10
                    message: Would you like to join our group?
                    userId: 1
                    abbreviation: EG
                    country: USA
                    focus: Hybrid
                    locationId: 1
                    type: Public
                    updatedAt: 4/8/2025
                with-mini-group:
                  value:
                    id: 1
                    name: Example Group
                    abbreviation: EG
                    logo: https://example.com/logo.jpg
                    createdAt: 2025-04-08T09:45:44.508Z
          description: ""
      tags: *a16
    patch:
      operationId: GroupInvitesController_update
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: number
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGroupInviteDto"
      responses:
        "200":
          description: ""
      tags: *a16
      security:
        - bearer: []
    delete:
      operationId: GroupInvitesController_remove
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: number
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a16
      security:
        - bearer: []
  /categories/auto-complete/{search}:
    get:
      operationId: CategoryController_categoryAutoComplete
      parameters:
        - name: search
          required: true
          in: path
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryMiniResponseWithLogo"
      tags: &a17
        - categories
  /categories:
    get:
      operationId: CategoryController_findAll
      parameters:
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: name
          required: false
          in: query
          schema:
            type: string
        - name: type
          required: false
          in: query
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                mini:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /categories?page=1
                        prev: /categories?page=0
                        next: /categories?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: MINI
                    results:
                      - id: 1
                        name: Chess
                mini-with-logo:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /categories?page=1
                        prev: /categories?page=0
                        next: /categories?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: MINI-WITH-LOGO
                    results:
                      - id: 1
                        name: Chess
                        logo: https://example.com/chess-category-logo.jpg
                base:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /categories?page=1
                        prev: /categories?page=0
                        next: /categories?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: BASE
                    results:
                      - id: 1
                        name: Chess
                        logo: https://example.com/chess-category-logo.jpg
                        description: Chess tournaments and competitions
                        type: programming
                        tournamentCount: 5
                        activeTournamentCount: 3
                extended:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /categories?page=1
                        prev: /categories?page=0
                        next: /categories?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: EXTENDED
                    results:
                      - id: 1
                        name: Chess
                        logo: https://example.com/chess-category-logo.jpg
                        description: Chess tournaments and competitions
                        type: programming
                        tournamentCount: 5
                        activeTournamentCount: 3
                        createdAt: 2024-01-07T14:00:00.000Z
                        updatedAt: 2024-01-07T14:00:00.000Z
          description: ""
      tags: *a17
    post:
      operationId: CategoryController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCategoryRequest"
      responses:
        "200":
          description: Creates a new category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a17
      security:
        - bearer: []
  /categories/{categoryId}:
    get:
      operationId: CategoryController_findOne
      parameters:
        - name: categoryId
          required: true
          in: path
          schema:
            type: number
        - name: responseType
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Returns a single category
          content:
            application/json:
              schema:
                examples:
                  mini:
                    value:
                      id: 1
                      name: Chess
                  mini-with-logo:
                    value:
                      id: 1
                      name: Chess
                      logo: https://example.com/chess-category-logo.jpg
                  base:
                    value:
                      id: 1
                      name: Chess
                      logo: https://example.com/chess-category-logo.jpg
                      description: Chess tournaments and competitions
                      type: programming
                      tournamentCount: 5
                      activeTournamentCount: 3
                  extended:
                    value:
                      id: 1
                      name: Chess
                      logo: https://example.com/chess-category-logo.jpg
                      description: Chess tournaments and competitions
                      type: programming
                      tournamentCount: 5
                      activeTournamentCount: 3
                      createdAt: 2024-01-07T14:00:00.000Z
                      updatedAt: 2024-01-07T14:00:00.000Z
      tags: *a17
    patch:
      operationId: CategoryController_update
      parameters:
        - name: categoryId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCategoryRequest"
      responses:
        "200":
          description: Updates a category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a17
      security:
        - bearer: []
    delete:
      operationId: CategoryController_remove
      parameters:
        - name: categoryId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: Deletes a category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a17
      security:
        - bearer: []
  /tournaments/auto-complete/{search}:
    get:
      operationId: TournamentController_autoComplete
      parameters:
        - name: search
          required: true
          in: path
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: Returns a list of tournaments that can be auto-completed
      tags: &a27
        - tournaments
  /tournaments:
    get:
      operationId: TournamentController_findAll
      parameters:
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: name
          required: false
          in: query
          schema:
            type: string
        - name: type
          required: false
          in: query
          schema:
            type: string
        - name: location
          required: false
          in: query
          schema:
            type: string
        - name: locationId
          required: false
          in: query
          schema:
            type: number
        - name: teamType
          required: false
          in: query
          schema:
            type: string
        - name: startDate
          required: false
          in: query
          schema:
            format: date-time
            type: string
        - name: endDate
          required: false
          in: query
          schema:
            format: date-time
            type: string
        - name: isRanked
          required: false
          in: query
          schema:
            type: boolean
        - name: minimumMMR
          required: false
          in: query
          schema:
            type: number
        - name: maximumMMR
          required: false
          in: query
          schema:
            type: number
        - name: isMultipleTeamsPerGroupAllowed
          required: false
          in: query
          schema:
            type: boolean
        - name: categoryId
          required: false
          in: query
          schema:
            type: number
        - name: affiliatedGroupId
          required: false
          in: query
          schema:
            type: number
        - name: creatorId
          required: false
          in: query
          schema:
            type: number
        - name: minParticipants
          required: false
          in: query
          schema:
            type: number
        - name: maxParticipants
          required: false
          in: query
          schema:
            type: number
        - name: isPublic
          required: false
          in: query
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              examples:
                mini:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /tournaments?page=1
                        prev: /tournaments?page=0
                        next: /tournaments?page=2
                      query:
                        name: Chess
                        type: league
                        location: online
                        teamType: solo
                        startDate: &a18 2025-02-01T10:00:00.000Z
                        endDate: &a19 2025-03-01T18:00:00.000Z
                        isRanked: true
                        minimumMMR: 1500
                        maximumMMR: 2500
                        categoryId: 1
                        minParticipants: 32
                        maxParticipants: 128
                        isPublic: true
                        responseType: MINI
                    results:
                      - id: 1
                        name: Chess Championship 2025
                        type: league
                        startDate: &a20 2025-02-01T10:00:00.000Z
                mini-with-logo:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /tournaments?page=1
                        prev: /tournaments?page=0
                        next: /tournaments?page=2
                      query:
                        name: Chess
                        type: league
                        location: online
                        teamType: solo
                        startDate: *a18
                        endDate: *a19
                        isRanked: true
                        minimumMMR: 1500
                        maximumMMR: 2500
                        categoryId: 1
                        minParticipants: 32
                        maxParticipants: 128
                        isPublic: true
                        responseType: MINI-WITH-LOGO
                    results:
                      - &a26
                        id: 1
                        name: Chess Championship 2025
                        type: league
                        startDate: *a20
                        location: online
                        logo: https://example.com/chess-tournament-logo.jpg
                        country: DE
                base:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /tournaments?page=1
                        prev: /tournaments?page=0
                        next: /tournaments?page=2
                      query:
                        name: Chess
                        type: league
                        location: online
                        teamType: solo
                        startDate: *a18
                        endDate: *a19
                        isRanked: true
                        minimumMMR: 1500
                        maximumMMR: 2500
                        categoryId: 1
                        minParticipants: 32
                        maxParticipants: 128
                        isPublic: true
                        responseType: BASE
                    results:
                      - id: 1
                        name: Chess Championship 2025
                        type: league
                        startDate: *a20
                        location: online
                        logo: https://example.com/chess-tournament-logo.jpg
                        country: DE
                        description: International Chess Championship 2025
                        teamType: solo
                        creator: &a21
                          id: 1
                          username: chessmaster
                          isFake: false
                        affiliatedGroup: &a22
                          id: 1
                          name: Chess Club
                          abbreviation: CC
                        endDate: &a23 2025-03-01T18:00:00.000Z
                        maxParticipants: 64
                        currentParticipants: 32
                        isPublic: true
                        category: &a24
                          id: 1
                          name: Chess
                          logo: https://example.com/chess-category-logo.jpg
                        links: https://chess.com/tournament/123
                        actualLocation: &a25
                          id: 1
                          name: Chess Club
                          coordinates:
                            - 12.345678
                            - 12.345678
                          apiId: chess-club
                extended:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /tournaments?page=1
                        prev: /tournaments?page=0
                        next: /tournaments?page=2
                      query:
                        name: Chess
                        type: league
                        location: online
                        teamType: solo
                        startDate: *a18
                        endDate: *a19
                        isRanked: true
                        minimumMMR: 1500
                        maximumMMR: 2500
                        categoryId: 1
                        minParticipants: 32
                        maxParticipants: 128
                        isPublic: true
                        responseType: EXTENDED
                    results:
                      - id: 1
                        name: Chess Championship 2025
                        type: league
                        startDate: *a20
                        location: online
                        logo: https://example.com/chess-tournament-logo.jpg
                        country: DE
                        description: International Chess Championship 2025
                        teamType: solo
                        creator: *a21
                        affiliatedGroup: *a22
                        endDate: *a23
                        maxParticipants: 64
                        currentParticipants: 32
                        isPublic: true
                        category: *a24
                        links: https://chess.com/tournament/123
                        actualLocation: *a25
                        createdAt: 2025-01-01T00:00:00.000Z
                        updatedAt: 2025-01-07T14:00:00.000Z
                        isMultipleTeamsPerGroupAllowed: false
                        isFakePlayersAllowed: false
                        parentTournament: *a26
                        conversionRuleId: 1
                        isRanked: true
                        maximumMMR: 2500
                        minimumMMR: 1500
          description: ""
      tags: *a27
    post:
      operationId: TournamentController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTournamentRequest"
      responses:
        "200":
          description: Creates a new tournament
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a27
      security:
        - bearer: []
  /tournaments/managed:
    get:
      operationId: TournamentController_getManagedTournaments
      parameters:
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a27
      security:
        - bearer: []
  /tournaments/{tournamentId}:
    get:
      operationId: TournamentController_findOne
      parameters:
        - name: tournamentId
          required: true
          in: path
          schema:
            type: number
        - name: responseType
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Returns a single tournament
          content:
            application/json:
              schema:
                examples:
                  mini:
                    value:
                      id: 1
                      name: Chess Championship 2025
                      type: league
                      startDate: &a28 2025-02-01T10:00:00.000Z
                  mini-with-logo:
                    value: &a34
                      id: 1
                      name: Chess Championship 2025
                      type: league
                      startDate: *a28
                      location: online
                      logo: https://example.com/chess-tournament-logo.jpg
                      country: DE
                  base:
                    value:
                      id: 1
                      name: Chess Championship 2025
                      type: league
                      startDate: *a28
                      location: online
                      logo: https://example.com/chess-tournament-logo.jpg
                      country: DE
                      description: International Chess Championship 2025
                      teamType: solo
                      creator: &a29
                        id: 1
                        username: chessmaster
                        isFake: false
                      affiliatedGroup: &a30
                        id: 1
                        name: Chess Club
                        abbreviation: CC
                      endDate: &a31 2025-03-01T18:00:00.000Z
                      maxParticipants: 64
                      currentParticipants: 32
                      isPublic: true
                      category: &a32
                        id: 1
                        name: Chess
                        logo: https://example.com/chess-category-logo.jpg
                      links: https://chess.com/tournament/123
                      actualLocation: &a33
                        id: 1
                        name: Chess Club
                        coordinates:
                          - 12.345678
                          - 12.345678
                        apiId: chess-club
                  extended:
                    value:
                      id: 1
                      name: Chess Championship 2025
                      type: league
                      startDate: *a28
                      location: online
                      logo: https://example.com/chess-tournament-logo.jpg
                      country: DE
                      description: International Chess Championship 2025
                      teamType: solo
                      creator: *a29
                      affiliatedGroup: *a30
                      endDate: *a31
                      maxParticipants: 64
                      currentParticipants: 32
                      isPublic: true
                      category: *a32
                      links: https://chess.com/tournament/123
                      actualLocation: *a33
                      createdAt: 2025-01-01T00:00:00.000Z
                      updatedAt: 2025-01-07T14:00:00.000Z
                      isMultipleTeamsPerGroupAllowed: false
                      isFakePlayersAllowed: false
                      parentTournament: *a34
                      conversionRuleId: 1
                      isRanked: true
                      maximumMMR: 2500
                      minimumMMR: 1500
      tags: *a27
    patch:
      operationId: TournamentController_update
      parameters:
        - name: tournamentId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTournamentRequest"
      responses:
        "200":
          description: Updates a tournament
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a27
      security:
        - bearer: []
    delete:
      operationId: TournamentController_remove
      parameters:
        - name: tournamentId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: Deletes a tournament
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a27
      security:
        - bearer: []
  /stages:
    get:
      operationId: StageController_findAll
      parameters:
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: name
          required: false
          in: query
          schema:
            type: string
        - name: stageType
          required: false
          in: query
          schema:
            type: string
        - name: stageStatus
          required: false
          in: query
          schema:
            type: string
        - name: stageLocation
          required: false
          in: query
          schema:
            type: string
        - name: startDate
          required: false
          in: query
          schema:
            format: date-time
            type: string
        - name: endDate
          required: false
          in: query
          schema:
            format: date-time
            type: string
        - name: tournamentId
          required: false
          in: query
          schema:
            type: number
        - name: minPlayersPerTeam
          required: false
          in: query
          schema:
            type: number
        - name: maxPlayersPerTeam
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          content:
            application/json:
              examples:
                mini:
                  value:
                    id: 1
                    name: Group Stage
                    tournamentId: 1
                    stageStatus: ongoing
                base:
                  value:
                    id: 1
                    name: Group Stage
                    tournamentId: 1
                    stageStatus: ongoing
                    rostersParticipating: 0
                    startDate: &a35 2025-04-08T09:45:44.554Z
                    endDate: &a36 2025-04-08T09:45:44.554Z
                    stageType: round_robin
                    description: Initial group stage of the tournament
                    logo: https://example.com/stage-logo.jpg
                    locationId: 1
                    location: &a37
                      id: 1
                      name: Chess Club
                      coordinates:
                        - 12.345678
                        - 12.345678
                      apiId: chess-club
                withTournament:
                  value:
                    id: 1
                    name: Group Stage
                    tournamentId: 1
                    stageStatus: ongoing
                    rostersParticipating: 0
                    startDate: *a35
                    endDate: *a36
                    stageType: round_robin
                    description: Initial group stage of the tournament
                    logo: https://example.com/stage-logo.jpg
                    locationId: 1
                    location: *a37
                    tournament:
                      id: 1
                      name: Chess Championship 2025
                      type: contest
                      startDate: &a40 2025-02-01T10:00:00.000Z
                      location: online
                      logo: https://example.com/tournament-logo.jpg
                      country: DE
                      locationId: 1
                extended:
                  value:
                    id: 1
                    name: Group Stage
                    tournamentId: 1
                    stageStatus: ongoing
                    rostersParticipating: 0
                    startDate: &a38 2025-02-01T10:00:00.000Z
                    endDate: &a39 2025-02-15T18:00:00.000Z
                    stageType: round_robin
                    description: Initial group stage of the tournament
                    logo: https://example.com/stage-logo.jpg
                    locationId: 1
                    location: *a37
                    minPlayersPerTeam: 1
                    maxPlayersPerTeam: 1
                    maxSubstitutes: 1
                    maxChanges: 1
                withExtendedTournament:
                  value:
                    id: 1
                    name: Group Stage
                    tournamentId: 1
                    stageStatus: ongoing
                    rostersParticipating: 0
                    startDate: *a38
                    endDate: *a39
                    stageType: round_robin
                    description: Initial group stage of the tournament
                    logo: https://example.com/stage-logo.jpg
                    locationId: 1
                    location: *a37
                    minPlayersPerTeam: 1
                    maxPlayersPerTeam: 1
                    maxSubstitutes: 1
                    maxChanges: 1
                    tournament:
                      id: 1
                      name: Chess Championship 2025
                      type: contest
                      startDate: *a40
                      location: online
                      logo: https://example.com/tournament-logo.jpg
                      country: DE
                      locationId: 1
                      description: International Chess Championship 2025
                      teamType: mixed
                      creator:
                        id: 1
                        username: chessmaster
                        isFake: false
                      actualLocation:
                        id: 1
                        name: Chess Club
                        coordinates:
                          - 12.345678
                          - 12.345678
                        apiId: chess-club
                      affiliatedGroup:
                        id: 1
                        name: Chess Club
                        abbreviation: CC
                      endDate: 2025-03-01T18:00:00.000Z
                      maxParticipants: 64
                      currentParticipants: 32
                      isPublic: true
                      category:
                        id: 1
                        name: Chess
                        logo: https://example.com/chess-category-logo.jpg
                      links: https://chess.com/tournament/123
          description: ""
      tags: &a41
        - stages
  /stages/managed:
    get:
      operationId: StageController_getManagedStages
      parameters:
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a41
      security:
        - bearer: []
  /stages/start/{stageId}:
    patch:
      operationId: StageController_startStage
      parameters:
        - name: stageId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a41
      security:
        - bearer: []
  /stages/{stageId}:
    get:
      operationId: StageController_findOne
      parameters:
        - name: stageId
          required: true
          in: path
          schema:
            type: number
        - name: responseType
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Returns a single stage
          content:
            application/json:
              examples:
                mini:
                  value:
                    id: 1
                    name: Group Stage
                    tournamentId: 1
                    stageStatus: ongoing
                base:
                  value:
                    id: 1
                    name: Group Stage
                    tournamentId: 1
                    stageStatus: ongoing
                    rostersParticipating: 0
                    startDate: &a42 2025-04-08T09:45:44.554Z
                    endDate: &a43 2025-04-08T09:45:44.554Z
                    stageType: round_robin
                    description: Initial group stage of the tournament
                    logo: https://example.com/stage-logo.jpg
                    locationId: 1
                    location: &a44
                      id: 1
                      name: Chess Club
                      coordinates:
                        - 12.345678
                        - 12.345678
                      apiId: chess-club
                withTournament:
                  value:
                    id: 1
                    name: Group Stage
                    tournamentId: 1
                    stageStatus: ongoing
                    rostersParticipating: 0
                    startDate: *a42
                    endDate: *a43
                    stageType: round_robin
                    description: Initial group stage of the tournament
                    logo: https://example.com/stage-logo.jpg
                    locationId: 1
                    location: *a44
                    tournament:
                      id: 1
                      name: Chess Championship 2025
                      type: contest
                      startDate: &a47 2025-02-01T10:00:00.000Z
                      location: online
                      logo: https://example.com/tournament-logo.jpg
                      country: DE
                      locationId: 1
                extended:
                  value:
                    id: 1
                    name: Group Stage
                    tournamentId: 1
                    stageStatus: ongoing
                    rostersParticipating: 0
                    startDate: &a45 2025-02-01T10:00:00.000Z
                    endDate: &a46 2025-02-15T18:00:00.000Z
                    stageType: round_robin
                    description: Initial group stage of the tournament
                    logo: https://example.com/stage-logo.jpg
                    locationId: 1
                    location: *a44
                    minPlayersPerTeam: 1
                    maxPlayersPerTeam: 1
                    maxSubstitutes: 1
                    maxChanges: 1
                withExtendedTournament:
                  value:
                    id: 1
                    name: Group Stage
                    tournamentId: 1
                    stageStatus: ongoing
                    rostersParticipating: 0
                    startDate: *a45
                    endDate: *a46
                    stageType: round_robin
                    description: Initial group stage of the tournament
                    logo: https://example.com/stage-logo.jpg
                    locationId: 1
                    location: *a44
                    minPlayersPerTeam: 1
                    maxPlayersPerTeam: 1
                    maxSubstitutes: 1
                    maxChanges: 1
                    tournament:
                      id: 1
                      name: Chess Championship 2025
                      type: contest
                      startDate: *a47
                      location: online
                      logo: https://example.com/tournament-logo.jpg
                      country: DE
                      locationId: 1
                      description: International Chess Championship 2025
                      teamType: mixed
                      creator:
                        id: 1
                        username: chessmaster
                        isFake: false
                      actualLocation:
                        id: 1
                        name: Chess Club
                        coordinates:
                          - 12.345678
                          - 12.345678
                        apiId: chess-club
                      affiliatedGroup:
                        id: 1
                        name: Chess Club
                        abbreviation: CC
                      endDate: 2025-03-01T18:00:00.000Z
                      maxParticipants: 64
                      currentParticipants: 32
                      isPublic: true
                      category:
                        id: 1
                        name: Chess
                        logo: https://example.com/chess-category-logo.jpg
                      links: https://chess.com/tournament/123
      tags: *a41
  /stages/{tournamentId}:
    post:
      operationId: StageController_create
      parameters:
        - name: tournamentId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStageRequest"
      responses:
        "200":
          description: Creates a new stage
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a41
      security:
        - bearer: []
  /stages/{tournamentId}/{stageId}:
    patch:
      operationId: StageController_update
      parameters:
        - name: stageId
          required: true
          in: path
          schema:
            type: number
        - name: tournamentId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateStageRequest"
      responses:
        "200":
          description: Updates a stage
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a41
      security:
        - bearer: []
    delete:
      operationId: StageController_remove
      parameters:
        - name: stageId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: Deletes a stage
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a41
      security:
        - bearer: []
  /roster/managed-by-user/{stageId}:
    get:
      operationId: RosterController_getManagedRostersForStage
      summary: Get all managed rosters for a specific user
      parameters:
        - name: stageId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: &a53
        - roster
      security:
        - bearer: []
  /roster:
    get:
      operationId: RosterController_findAll
      summary: Get all rosters with optional filtering
      parameters:
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: stageId
          required: false
          in: query
          schema:
            type: number
        - name: participationId
          required: false
          in: query
          schema:
            type: number
        - name: groupId
          required: false
          in: query
          schema:
            type: number
        - name: userId
          required: false
          in: query
          schema:
            type: number
        - name: isSubstitute
          required: false
          in: query
          schema:
            type: boolean
        - name: rosterId
          required: false
          in: query
          schema:
            type: number
        - name: memberId
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          content:
            application/json:
              examples:
                mini:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /roster?page=1
                        prev: /roster?page=0
                        next: /roster?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: MINI
                    results:
                      - id: 1
                        stageId: 1
                        participationId: 1
                        group: &a48
                          id: 1
                          name: Team Alpha
                          logo: https://example.com/team-alpha-logo.png
                          abbreviation: TA
                        user: &a49
                          id: 1
                          username: player1
                          profilePicture: https://example.com/player1-avatar.png
                          isFake: false
                base:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /roster?page=1
                        prev: /roster?page=0
                        next: /roster?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: BASE
                    results:
                      - id: 1
                        stageId: 1
                        participationId: 1
                        group: *a48
                        user: *a49
                        players: &a50
                          - user:
                              id: 1
                              username: player1
                              country: US
                              profilePicture: https://example.com/player1-avatar.png
                              isFake: false
                            isSubstitute: false
                            career:
                              - category:
                                  id: 1
                                  name: Category 1
                                  logo: https://example.com/category1-image.png
                                elo: 1000
                                createdAt: 2023-01-15T12:00:00.000Z
                                userId: 1
                                categoryId: 1
                          - user:
                              id: 2
                              username: substitute1
                              country: CA
                              profilePicture: https://example.com/player2-avatar.png
                              isFake: false
                            isSubstitute: true
                            career:
                              - category:
                                  id: 1
                                  name: Category 1
                                  logo: https://example.com/category1-image.png
                                elo: 1000
                                createdAt: 2023-01-15T12:00:00.000Z
                                userId: 2
                                categoryId: 1
                        createdAt: &a51 2023-01-15T12:00:00.000Z
                        updatedAt: &a52 2023-01-15T12:00:00.000Z
                extended:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /roster?page=1
                        prev: /roster?page=0
                        next: /roster?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: EXTENDED
                    results:
                      - id: 1
                        stageId: 1
                        participationId: 1
                        group: *a48
                        user: *a49
                        players: *a50
                        createdAt: *a51
                        updatedAt: *a52
          description: ""
      tags: *a53
  /roster/{id}:
    get:
      operationId: RosterController_findOne
      summary: Get a specific roster by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
        - name: responseType
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Returns a specific roster
          content:
            application/json:
              examples:
                mini:
                  value:
                    id: 1
                    stageId: 1
                    participationId: 1
                    group: &a54
                      id: 1
                      name: Team Alpha
                      logo: https://example.com/team-alpha-logo.png
                      abbreviation: TA
                    user: &a55
                      id: 1
                      username: player1
                      profilePicture: https://example.com/player1-avatar.png
                      isFake: false
                base:
                  value:
                    id: 1
                    stageId: 1
                    participationId: 1
                    group: *a54
                    user: *a55
                    players: &a56
                      - user:
                          id: 1
                          username: player1
                          country: US
                          profilePicture: https://example.com/player1-avatar.png
                          isFake: false
                        isSubstitute: false
                        career:
                          - category:
                              id: 1
                              name: Category 1
                              logo: https://example.com/category1-image.png
                            elo: 1000
                            createdAt: 2023-01-15T12:00:00.000Z
                            userId: 1
                            categoryId: 1
                      - user:
                          id: 2
                          username: substitute1
                          country: CA
                          profilePicture: https://example.com/player2-avatar.png
                          isFake: false
                        isSubstitute: true
                        career:
                          - category:
                              id: 1
                              name: Category 1
                              logo: https://example.com/category1-image.png
                            elo: 1000
                            createdAt: 2023-01-15T12:00:00.000Z
                            userId: 2
                            categoryId: 1
                    createdAt: &a57 2023-01-15T12:00:00.000Z
                    updatedAt: &a58 2023-01-15T12:00:00.000Z
                extended:
                  value:
                    id: 1
                    stageId: 1
                    participationId: 1
                    group: *a54
                    user: *a55
                    players: *a56
                    createdAt: *a57
                    updatedAt: *a58
              schema:
                oneOf:
                  - $ref: "#/components/schemas/MiniRosterDto"
                  - $ref: "#/components/schemas/RosterDto"
      tags: *a53
    patch:
      operationId: RosterController_update
      summary: Update a roster
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRosterDto"
      responses:
        "200":
          description: The roster has been successfully updated
          content:
            application/json:
              example:
                id: 1
                stageId: 1
                participationId: 1
                group:
                  id: 1
                  name: Team Alpha
                  logo: https://example.com/team-alpha-logo.png
                  abbreviation: TA
                user:
                  id: 1
                  username: player1
                  profilePicture: https://example.com/player1-avatar.png
                  isFake: false
                players:
                  - user:
                      id: 1
                      username: player1
                      country: US
                      profilePicture: https://example.com/player1-avatar.png
                      isFake: false
                    isSubstitute: false
                    career:
                      - category:
                          id: 1
                          name: Category 1
                          logo: https://example.com/category1-image.png
                        elo: 1000
                        createdAt: 2023-01-15T12:00:00.000Z
                        userId: 1
                        categoryId: 1
                  - user:
                      id: 2
                      username: substitute1
                      country: CA
                      profilePicture: https://example.com/player2-avatar.png
                      isFake: false
                    isSubstitute: true
                    career:
                      - category:
                          id: 1
                          name: Category 1
                          logo: https://example.com/category1-image.png
                        elo: 1000
                        createdAt: 2023-01-15T12:00:00.000Z
                        userId: 2
                        categoryId: 1
                createdAt: 2023-01-15T12:00:00.000Z
                updatedAt: 2023-01-15T12:00:00.000Z
      tags: *a53
      security:
        - bearer: []
  /roster/stage/{stageId}:
    get:
      operationId: RosterController_findByStage
      summary: Get all rosters for a specific stage
      parameters:
        - name: stageId
          required: true
          in: path
          schema:
            type: number
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: stageId
          required: false
          in: query
          schema:
            type: number
        - name: participationId
          required: false
          in: query
          schema:
            type: number
        - name: groupId
          required: false
          in: query
          schema:
            type: number
        - name: userId
          required: false
          in: query
          schema:
            type: number
        - name: isSubstitute
          required: false
          in: query
          schema:
            type: boolean
        - name: rosterId
          required: false
          in: query
          schema:
            type: number
        - name: memberId
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: Returns all rosters for a specific stage
          content:
            application/json:
              examples:
                mini:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /roster?page=1
                        prev: /roster?page=0
                        next: /roster?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: MINI
                    results:
                      - id: 1
                        stageId: 1
                        participationId: 1
                        group: &a59
                          id: 1
                          name: Team Alpha
                          logo: https://example.com/team-alpha-logo.png
                          abbreviation: TA
                        user: &a60
                          id: 1
                          username: player1
                          profilePicture: https://example.com/player1-avatar.png
                          isFake: false
                base:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /roster?page=1
                        prev: /roster?page=0
                        next: /roster?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: BASE
                    results:
                      - id: 1
                        stageId: 1
                        participationId: 1
                        group: *a59
                        user: *a60
                        players: &a61
                          - user:
                              id: 1
                              username: player1
                              country: US
                              profilePicture: https://example.com/player1-avatar.png
                              isFake: false
                            isSubstitute: false
                            career:
                              - category:
                                  id: 1
                                  name: Category 1
                                  logo: https://example.com/category1-image.png
                                elo: 1000
                                createdAt: 2023-01-15T12:00:00.000Z
                                userId: 1
                                categoryId: 1
                          - user:
                              id: 2
                              username: substitute1
                              country: CA
                              profilePicture: https://example.com/player2-avatar.png
                              isFake: false
                            isSubstitute: true
                            career:
                              - category:
                                  id: 1
                                  name: Category 1
                                  logo: https://example.com/category1-image.png
                                elo: 1000
                                createdAt: 2023-01-15T12:00:00.000Z
                                userId: 2
                                categoryId: 1
                        createdAt: &a62 2023-01-15T12:00:00.000Z
                        updatedAt: &a63 2023-01-15T12:00:00.000Z
                extended:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /roster?page=1
                        prev: /roster?page=0
                        next: /roster?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: EXTENDED
                    results:
                      - id: 1
                        stageId: 1
                        participationId: 1
                        group: *a59
                        user: *a60
                        players: *a61
                        createdAt: *a62
                        updatedAt: *a63
      tags: *a53
  /roster/participation/{participationId}:
    get:
      operationId: RosterController_findByParticipation
      summary: Get all rosters for a specific participation
      parameters:
        - name: participationId
          required: true
          in: path
          schema:
            type: number
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: stageId
          required: false
          in: query
          schema:
            type: number
        - name: participationId
          required: false
          in: query
          schema:
            type: number
        - name: groupId
          required: false
          in: query
          schema:
            type: number
        - name: userId
          required: false
          in: query
          schema:
            type: number
        - name: isSubstitute
          required: false
          in: query
          schema:
            type: boolean
        - name: rosterId
          required: false
          in: query
          schema:
            type: number
        - name: memberId
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: Returns all rosters for a specific participation
          content:
            application/json:
              examples:
                mini:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /roster?page=1
                        prev: /roster?page=0
                        next: /roster?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: MINI
                    results:
                      - id: 1
                        stageId: 1
                        participationId: 1
                        group: &a64
                          id: 1
                          name: Team Alpha
                          logo: https://example.com/team-alpha-logo.png
                          abbreviation: TA
                        user: &a65
                          id: 1
                          username: player1
                          profilePicture: https://example.com/player1-avatar.png
                          isFake: false
                base:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /roster?page=1
                        prev: /roster?page=0
                        next: /roster?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: BASE
                    results:
                      - id: 1
                        stageId: 1
                        participationId: 1
                        group: *a64
                        user: *a65
                        players: &a66
                          - user:
                              id: 1
                              username: player1
                              country: US
                              profilePicture: https://example.com/player1-avatar.png
                              isFake: false
                            isSubstitute: false
                            career:
                              - category:
                                  id: 1
                                  name: Category 1
                                  logo: https://example.com/category1-image.png
                                elo: 1000
                                createdAt: 2023-01-15T12:00:00.000Z
                                userId: 1
                                categoryId: 1
                          - user:
                              id: 2
                              username: substitute1
                              country: CA
                              profilePicture: https://example.com/player2-avatar.png
                              isFake: false
                            isSubstitute: true
                            career:
                              - category:
                                  id: 1
                                  name: Category 1
                                  logo: https://example.com/category1-image.png
                                elo: 1000
                                createdAt: 2023-01-15T12:00:00.000Z
                                userId: 2
                                categoryId: 1
                        createdAt: &a67 2023-01-15T12:00:00.000Z
                        updatedAt: &a68 2023-01-15T12:00:00.000Z
                extended:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /roster?page=1
                        prev: /roster?page=0
                        next: /roster?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: EXTENDED
                    results:
                      - id: 1
                        stageId: 1
                        participationId: 1
                        group: *a64
                        user: *a65
                        players: *a66
                        createdAt: *a67
                        updatedAt: *a68
      tags: *a53
  /roster/user/{userId}:
    get:
      operationId: RosterController_findByUser
      summary: Get all rosters for a specific user
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: number
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: stageId
          required: false
          in: query
          schema:
            type: number
        - name: participationId
          required: false
          in: query
          schema:
            type: number
        - name: groupId
          required: false
          in: query
          schema:
            type: number
        - name: userId
          required: false
          in: query
          schema:
            type: number
        - name: isSubstitute
          required: false
          in: query
          schema:
            type: boolean
        - name: rosterId
          required: false
          in: query
          schema:
            type: number
        - name: memberId
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: Returns all rosters that include a specific user
          content:
            application/json:
              examples:
                mini:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /roster?page=1
                        prev: /roster?page=0
                        next: /roster?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: MINI
                    results:
                      - id: 1
                        stageId: 1
                        participationId: 1
                        group: &a69
                          id: 1
                          name: Team Alpha
                          logo: https://example.com/team-alpha-logo.png
                          abbreviation: TA
                        user: &a70
                          id: 1
                          username: player1
                          profilePicture: https://example.com/player1-avatar.png
                          isFake: false
                base:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /roster?page=1
                        prev: /roster?page=0
                        next: /roster?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: BASE
                    results:
                      - id: 1
                        stageId: 1
                        participationId: 1
                        group: *a69
                        user: *a70
                        players: &a71
                          - user:
                              id: 1
                              username: player1
                              country: US
                              profilePicture: https://example.com/player1-avatar.png
                              isFake: false
                            isSubstitute: false
                            career:
                              - category:
                                  id: 1
                                  name: Category 1
                                  logo: https://example.com/category1-image.png
                                elo: 1000
                                createdAt: 2023-01-15T12:00:00.000Z
                                userId: 1
                                categoryId: 1
                          - user:
                              id: 2
                              username: substitute1
                              country: CA
                              profilePicture: https://example.com/player2-avatar.png
                              isFake: false
                            isSubstitute: true
                            career:
                              - category:
                                  id: 1
                                  name: Category 1
                                  logo: https://example.com/category1-image.png
                                elo: 1000
                                createdAt: 2023-01-15T12:00:00.000Z
                                userId: 2
                                categoryId: 1
                        createdAt: &a72 2023-01-15T12:00:00.000Z
                        updatedAt: &a73 2023-01-15T12:00:00.000Z
                extended:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /roster?page=1
                        prev: /roster?page=0
                        next: /roster?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: EXTENDED
                    results:
                      - id: 1
                        stageId: 1
                        participationId: 1
                        group: *a69
                        user: *a70
                        players: *a71
                        createdAt: *a72
                        updatedAt: *a73
      tags: *a53
  /roster/group/{groupId}:
    get:
      operationId: RosterController_findByGroup
      summary: Get all rosters for a specific group
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: stageId
          required: false
          in: query
          schema:
            type: number
        - name: participationId
          required: false
          in: query
          schema:
            type: number
        - name: groupId
          required: false
          in: query
          schema:
            type: number
        - name: userId
          required: false
          in: query
          schema:
            type: number
        - name: isSubstitute
          required: false
          in: query
          schema:
            type: boolean
        - name: rosterId
          required: false
          in: query
          schema:
            type: number
        - name: memberId
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: Returns all rosters for a specific group
          content:
            application/json:
              examples:
                mini:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /roster?page=1
                        prev: /roster?page=0
                        next: /roster?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: MINI
                    results:
                      - id: 1
                        stageId: 1
                        participationId: 1
                        group: &a74
                          id: 1
                          name: Team Alpha
                          logo: https://example.com/team-alpha-logo.png
                          abbreviation: TA
                        user: &a75
                          id: 1
                          username: player1
                          profilePicture: https://example.com/player1-avatar.png
                          isFake: false
                base:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /roster?page=1
                        prev: /roster?page=0
                        next: /roster?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: BASE
                    results:
                      - id: 1
                        stageId: 1
                        participationId: 1
                        group: *a74
                        user: *a75
                        players: &a76
                          - user:
                              id: 1
                              username: player1
                              country: US
                              profilePicture: https://example.com/player1-avatar.png
                              isFake: false
                            isSubstitute: false
                            career:
                              - category:
                                  id: 1
                                  name: Category 1
                                  logo: https://example.com/category1-image.png
                                elo: 1000
                                createdAt: 2023-01-15T12:00:00.000Z
                                userId: 1
                                categoryId: 1
                          - user:
                              id: 2
                              username: substitute1
                              country: CA
                              profilePicture: https://example.com/player2-avatar.png
                              isFake: false
                            isSubstitute: true
                            career:
                              - category:
                                  id: 1
                                  name: Category 1
                                  logo: https://example.com/category1-image.png
                                elo: 1000
                                createdAt: 2023-01-15T12:00:00.000Z
                                userId: 2
                                categoryId: 1
                        createdAt: &a77 2023-01-15T12:00:00.000Z
                        updatedAt: &a78 2023-01-15T12:00:00.000Z
                extended:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /roster?page=1
                        prev: /roster?page=0
                        next: /roster?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: EXTENDED
                    results:
                      - id: 1
                        stageId: 1
                        participationId: 1
                        group: *a74
                        user: *a75
                        players: *a76
                        createdAt: *a77
                        updatedAt: *a78
      tags: *a53
  /roster/{participationId}/{stageId}:
    post:
      operationId: RosterController_create
      summary: Create a new roster
      parameters:
        - name: participationId
          required: true
          in: path
          schema:
            type: number
        - name: stageId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRosterDto"
      responses:
        "201":
          description: ""
      tags: *a53
      security:
        - bearer: []
  /participations:
    get:
      operationId: ParticipationController_findAll
      parameters:
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: tournamentId
          required: false
          in: query
          schema:
            type: number
        - name: userId
          required: false
          in: query
          schema:
            type: number
        - name: groupId
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          content:
            application/json:
              examples:
                mini:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /participations?page=1
                        prev: /participations?page=0
                        next: /participations?page=2
                      query:
                        page: 1
                        pageSize: 10
                        userId: 1
                        groupId: 1
                        responseType: MINI
                    results:
                      - id: 1
                        userId: 1
                        tournamentId: 1
                extended:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /participations?page=1
                        prev: /participations?page=0
                        next: /participations?page=2
                      query:
                        page: 1
                        pageSize: 10
                        userId: 1
                        groupId: 1
                        responseType: EXTENDED
                    results:
                      - {}
                participant:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /participations?page=1
                        prev: /participations?page=0
                        next: /participations?page=2
                      query:
                        page: 1
                        pageSize: 10
                        userId: 1
                        groupId: 1
                        responseType: PARTICIPANT
                    results:
                      - &a79
                        id: 1
                        userId: 1
                        tournamentId: 1
                        tournament:
                          id: 1
                          type: league
                          startDate: 2025-04-08T09:45:44.576Z
                          name: Chess Championship
                        user:
                          id: 1
                          username: john_doe
                          isFake: false
                          profilePicture: https://example.com/image.jpg
                        createdAt: 2025-04-08T09:45:44.576Z
                        updatedAt: 2025-04-08T09:45:44.576Z
                base:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /participations?page=1
                        prev: /participations?page=0
                        next: /participations?page=2
                      query:
                        page: 1
                        pageSize: 10
                        userId: 1
                        groupId: 1
                        responseType: BASE
                    results:
                      - *a79
          description: ""
      tags: &a81
        - participations
  /participations/{participationId}:
    get:
      operationId: ParticipationController_findOne
      parameters:
        - name: participationId
          required: true
          in: path
          schema:
            type: number
        - name: responseType
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                mini:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /participations?page=1
                        prev: /participations?page=0
                        next: /participations?page=2
                      query:
                        page: 1
                        pageSize: 10
                        userId: 1
                        groupId: 1
                        responseType: MINI
                    results:
                      - id: 1
                        userId: 1
                        tournamentId: 1
                extended:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /participations?page=1
                        prev: /participations?page=0
                        next: /participations?page=2
                      query:
                        page: 1
                        pageSize: 10
                        userId: 1
                        groupId: 1
                        responseType: EXTENDED
                    results:
                      - {}
                participant:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /participations?page=1
                        prev: /participations?page=0
                        next: /participations?page=2
                      query:
                        page: 1
                        pageSize: 10
                        userId: 1
                        groupId: 1
                        responseType: PARTICIPANT
                    results:
                      - &a80
                        id: 1
                        userId: 1
                        tournamentId: 1
                        tournament:
                          id: 1
                          type: league
                          startDate: 2025-04-08T09:45:44.576Z
                          name: Chess Championship
                        user:
                          id: 1
                          username: john_doe
                          isFake: false
                          profilePicture: https://example.com/image.jpg
                        createdAt: 2025-04-08T09:45:44.576Z
                        updatedAt: 2025-04-08T09:45:44.576Z
                base:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /participations?page=1
                        prev: /participations?page=0
                        next: /participations?page=2
                      query:
                        page: 1
                        pageSize: 10
                        userId: 1
                        groupId: 1
                        responseType: BASE
                    results:
                      - *a80
          description: ""
      tags: *a81
    delete:
      operationId: ParticipationController_remove
      parameters:
        - name: participationId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a81
      security:
        - bearer: []
  /participations/apply-solo/{tournamentId}:
    post:
      operationId: ParticipationController_createSolo
      parameters:
        - name: tournamentId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a81
      security:
        - bearer: []
  /participations/managed-for-player/{tournamentId}:
    get:
      operationId: ParticipationController_getManagedParticipationsForPlayer
      parameters:
        - name: tournamentId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MiniParticipationWithGroup"
      tags: *a81
      security:
        - bearer: []
  /participations/apply-group/{tournamentId}/{groupId}:
    post:
      operationId: ParticipationController_createTeam
      parameters:
        - name: tournamentId
          required: true
          in: path
          schema:
            type: number
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a81
      security:
        - bearer: []
  /participations/admin/apply-solo/{tournamentId}/{userId}:
    post:
      operationId: ParticipationController_createForFakePlayer
      parameters:
        - name: tournamentId
          required: true
          in: path
          schema:
            type: number
        - name: userId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a81
      security:
        - bearer: []
  /participations/admin/apply-group/{tournamentId}/{groupId}:
    post:
      operationId: ParticipationController_createForFakeTeam
      parameters:
        - name: tournamentId
          required: true
          in: path
          schema:
            type: number
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a81
      security:
        - bearer: []
  /matches/{matchupId}/score:
    post:
      operationId: MatchesController_createScore
      parameters:
        - name: matchupId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EndMatchupRequestDto"
      responses:
        "201":
          description: ""
      tags: &a82
        - matches
      security:
        - bearer: []
  /matches/{matchupId}/update-score:
    put:
      operationId: MatchesController_updateScore
      parameters:
        - name: matchupId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EndMatchupRequestDto"
      responses:
        "200":
          description: ""
      tags: *a82
      security:
        - bearer: []
  /matches/{matchupId}/delete-score:
    delete:
      operationId: MatchesController_deleteMatchScore
      parameters:
        - name: matchupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a82
      security:
        - bearer: []
  /matches/results:
    get:
      operationId: MatchesController_getMatchupsWithResults
      parameters:
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: matchupId
          required: false
          in: query
          description: The ID of the matchup
          schema:
            type: number
        - name: rosterId
          required: false
          in: query
          description: The ID of the roster
          schema:
            type: number
        - name: groupId
          required: false
          in: query
          description: The ID of the group
          schema:
            type: number
        - name: userId
          required: false
          in: query
          description: The ID of the user
          schema:
            type: number
        - name: stageId
          required: false
          in: query
          description: The ID of the stage
          schema:
            type: number
        - name: round
          required: false
          in: query
          description: The round number
          schema:
            type: number
        - name: isFinished
          required: false
          in: query
          description: Whether the matchup is finished
          schema:
            type: boolean
        - name: challongeMatchupId
          required: false
          in: query
          description: The Challonge ID of the matchup
          schema:
            type: string
        - name: hasChallongeId
          required: false
          in: query
          description: Whether the matchup has a challonge id
          schema:
            type: boolean
      responses:
        "200":
          description: Returns matchups with results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MatchupResponseWithResultsDto"
      tags: *a82
  /matches/matchup/{matchupId}/results:
    get:
      operationId: MatchesController_getMatchupWithResultsAndScores
      parameters:
        - name: matchupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: Returns a matchup with results and scores
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchupResponseWithResultsAndScoresDto"
      tags: *a82
  /matches/user/{userId}/results:
    get:
      operationId: MatchesController_getResultsForUser
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: number
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: Returns matchups with results for a user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MatchupResponseWithResultsDto"
      tags: *a82
  /matches/roster/{rosterId}/results:
    get:
      operationId: MatchesController_getResultsForRoster
      parameters:
        - name: rosterId
          required: true
          in: path
          description: Roster ID
          schema:
            type: number
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: Returns matchups with results for a roster
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MatchupResponseWithResultsDto"
      tags: *a82
  /matches/managed:
    get:
      operationId: MatchesController_getManagedMatchups
      parameters:
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: matchupId
          required: false
          in: query
          description: The ID of the matchup
          schema:
            type: number
        - name: rosterId
          required: false
          in: query
          description: The ID of the roster
          schema:
            type: number
        - name: groupId
          required: false
          in: query
          description: The ID of the group
          schema:
            type: number
        - name: userId
          required: false
          in: query
          description: The ID of the user
          schema:
            type: number
        - name: stageId
          required: false
          in: query
          description: The ID of the stage
          schema:
            type: number
        - name: round
          required: false
          in: query
          description: The round number
          schema:
            type: number
        - name: isFinished
          required: false
          in: query
          description: Whether the matchup is finished
          schema:
            type: boolean
        - name: challongeMatchupId
          required: false
          in: query
          description: The Challonge ID of the matchup
          schema:
            type: string
        - name: hasChallongeId
          required: false
          in: query
          description: Whether the matchup has a challonge id
          schema:
            type: boolean
      responses:
        "200":
          description: Returns matchups that a user is managing
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MatchupResponseWithResultsDto"
      tags: *a82
      security:
        - bearer: []
  /matches/group/{groupId}/results:
    get:
      operationId: MatchesController_getResultsForGroup
      parameters:
        - name: groupId
          required: true
          in: path
          description: Group ID
          schema:
            type: number
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: Returns matchups with results for a group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MatchupResponseWithResultsDto"
      tags: *a82
  /blocked-groups/auto-complete/{search}:
    get:
      operationId: BlockedGroupsController_autoComplete
      parameters:
        - name: search
          required: true
          in: path
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MiniGroupResponseWithLogo"
      tags: &a83
        - Blocked Groups
      security:
        - bearer: []
  /blocked-groups:
    get:
      operationId: BlockedGroupsController_findAll
      parameters:
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a83
      security:
        - bearer: []
  /blocked-groups/{groupId}:
    post:
      operationId: BlockedGroupsController_block
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "201":
          description: ""
      tags: *a83
      security:
        - bearer: []
    delete:
      operationId: BlockedGroupsController_unblock
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a83
      security:
        - bearer: []
  /blocked-users/auto-complete/{groupId}/{search}:
    get:
      operationId: BlockedUsersController_autoComplete
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
        - name: search
          required: true
          in: path
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MiniUserResponseWithProfilePicture"
      tags: &a84
        - blocked users
      security:
        - bearer: []
  /blocked-users/{groupId}:
    get:
      operationId: BlockedUsersController_findAll
      parameters:
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a84
      security:
        - bearer: []
  /blocked-users/{groupId}/{userId}:
    post:
      operationId: BlockedUsersController_block
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
        - name: userId
          required: true
          in: path
          schema:
            type: number
      responses:
        "201":
          description: ""
      tags: *a84
      security:
        - bearer: []
    delete:
      operationId: BlockedUsersController_unblock
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
        - name: userId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a84
      security:
        - bearer: []
  /lfg/me:
    get:
      operationId: LfgController_findMyLFG
      summary: Get all LFG posts by the current user
      parameters: []
      responses:
        "200":
          description: Returns all LFG posts by the current user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LFGResponse"
      tags: &a85
        - LFG
      security:
        - bearer: []
  /lfg:
    post:
      operationId: LfgController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLFGRequest"
      responses:
        "201":
          description: ""
      tags: *a85
      security:
        - bearer: []
  /lfg/{groupId}:
    get:
      operationId: LfgController_findPlayers
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a85
      security:
        - bearer: []
  /lfg/{id}:
    patch:
      operationId: LfgController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLFGRequest"
      responses:
        "200":
          description: ""
      tags: *a85
      security:
        - bearer: []
    delete:
      operationId: LfgController_delete
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a85
      security:
        - bearer: []
  /interest/{categoryId}:
    post:
      operationId: InterestController_createInterest
      parameters:
        - name: categoryId
          required: true
          in: path
          schema:
            type: number
      responses:
        "201":
          description: ""
      tags: &a86
        - interest
      security:
        - bearer: []
    delete:
      operationId: InterestController_deleteInterest
      parameters:
        - name: categoryId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a86
      security:
        - bearer: []
  /interest:
    get:
      operationId: InterestController_getInterestCategories
      parameters:
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a86
      security:
        - bearer: []
  /group-interests/{groupId}:
    get:
      operationId: GroupInterestsController_findAll
      parameters:
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: &a87
        - group interests
      security:
        - bearer: []
  /group-interests/{groupId}/{categoryId}:
    post:
      operationId: GroupInterestsController_addInterest
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
        - name: categoryId
          required: true
          in: path
          schema:
            type: number
      responses:
        "201":
          description: ""
      tags: *a87
      security:
        - bearer: []
    delete:
      operationId: GroupInterestsController_removeInterest
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
        - name: categoryId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a87
      security:
        - bearer: []
  /lfp/groups:
    get:
      operationId: LFPController_getGroups
      summary: Get groups for user
      parameters:
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: groupId
          required: false
          in: query
          schema:
            type: number
        - name: message
          required: false
          in: query
          schema:
            type: string
        - name: lat
          required: false
          in: query
          schema:
            type: number
        - name: lng
          required: false
          in: query
          schema:
            type: number
        - name: distance
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: Groups retrieved successfully
      tags: &a88
        - lfp
      security:
        - bearer: []
  /lfp/{groupId}:
    post:
      operationId: LFPController_createLFP
      summary: Create LFP post
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLFPDto"
      responses:
        "201":
          description: LFP post created successfully
      tags: *a88
      security:
        - bearer: []
    get:
      operationId: LFPController_getForGroup
      summary: Get LFP posts for a group
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: LFP posts retrieved successfully
      tags: *a88
      security:
        - bearer: []
  /lfp/{groupId}/{id}:
    patch:
      operationId: LFPController_updateLFP
      summary: Update LFP post
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLFPDto"
      responses:
        "200":
          description: LFP post updated successfully
      tags: *a88
      security:
        - bearer: []
    delete:
      operationId: LFPController_deleteLFP
      summary: Delete LFP post
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: LFP post deleted successfully
      tags: *a88
      security:
        - bearer: []
  /locations/map:
    get:
      operationId: LocationController_getMap
      parameters: []
      responses:
        "200":
          description: "Returns all locations unpaginated "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: &a89
        - locations
  /locations:
    get:
      operationId: LocationController_findAll
      parameters:
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: name
          required: false
          in: query
          schema:
            type: string
        - name: apiId
          required: false
          in: query
          schema:
            type: string
        - name: lat
          required: false
          in: query
          schema:
            type: number
        - name: lng
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          content:
            application/json:
              examples:
                mini:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /locations?page=1
                        prev: /locations?page=0
                        next: /locations?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: MINI
                    results:
                      - id: 1
                        apiId: location123
                base:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /locations?page=1
                        prev: /locations?page=0
                        next: /locations?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: BASE
                    results:
                      - id: 1
                        apiId: location123
                        name: New York
                        lat: 40.7128
                        lng: -74.006
                extended:
                  value:
                    metadata:
                      pagination:
                        page: 1
                        pageSize: 10
                      links:
                        first: /locations?page=1
                        prev: /locations?page=0
                        next: /locations?page=2
                      query:
                        page: 1
                        pageSize: 10
                        responseType: EXTENDED
                    results:
                      - id: 1
                        apiId: location123
                        name: New York
                        lat: 40.7128
                        lng: -74.006
                        createdAt: 2025-04-08T09:45:44.447Z
          description: ""
      tags: *a89
    post:
      operationId: LocationController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLocationDto"
      responses:
        "200":
          description: Creates a new location
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a89
      security:
        - bearer: []
  /locations/{locationId}:
    get:
      operationId: LocationController_findOne
      parameters:
        - name: locationId
          required: true
          in: path
          schema:
            type: number
        - name: responseType
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Returns a single location
          content:
            application/json:
              schema:
                examples:
                  mini:
                    value:
                      id: 1
                      apiId: location123
                  base:
                    value:
                      id: 1
                      apiId: location123
                      name: New York
                      lat: 40.7128
                      lng: -74.006
                  extended:
                    value:
                      id: 1
                      apiId: location123
                      name: New York
                      lat: 40.7128
                      lng: -74.006
                      createdAt: 2025-04-08T09:45:44.447Z
      tags: *a89
    patch:
      operationId: LocationController_update
      parameters:
        - name: locationId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLocationDto"
      responses:
        "200":
          description: Updates a location
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a89
      security:
        - bearer: []
    delete:
      operationId: LocationController_remove
      parameters:
        - name: locationId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: Deletes a location
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a89
      security:
        - bearer: []
  /group-requirements/{groupId}:
    post:
      operationId: GroupRequirementsController_createRequirements
      summary: Create group requirements
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGroupRequirementsDto"
      responses:
        "201":
          description: Requirements created successfully
      tags: &a90
        - group requirements
      security:
        - bearer: []
    get:
      operationId: GroupRequirementsController_getRequirements
      summary: Get group requirements
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: Requirements retrieved successfully
      tags: *a90
      security:
        - bearer: []
    put:
      operationId: GroupRequirementsController_updateRequirements
      summary: Update group requirements
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGroupRequirementsDto"
      responses:
        "200":
          description: Requirements updated successfully
      tags: *a90
      security:
        - bearer: []
    delete:
      operationId: GroupRequirementsController_deleteRequirements
      summary: Delete group requirements
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: Requirements deleted successfully
      tags: *a90
      security:
        - bearer: []
  /quiz/auto-complete/{search}:
    get:
      operationId: QuizController_autoComplete
      parameters:
        - name: search
          required: true
          in: path
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: Returns a list of quizzes that can be auto-completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuizResponse"
      tags: &a91
        - quiz
  /quiz/detailed/{quizId}:
    get:
      operationId: QuizController_getDetailedQuiz
      parameters:
        - name: quizId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: Returns a detailed quiz
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuizResponseExtended"
      tags: *a91
      security:
        - bearer: []
  /quiz:
    get:
      operationId: QuizController_findAll
      parameters:
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: name
          required: false
          in: query
          description: Quiz name search
          schema:
            type: string
        - name: authorId
          required: false
          in: query
          description: Created by user ID
          schema:
            type: number
        - name: matchupId
          required: false
          in: query
          description: Associated matchup ID
          schema:
            type: number
        - name: stageId
          required: false
          in: query
          description: Associated stage ID
          schema:
            type: number
        - name: isTest
          required: false
          in: query
          description: Is test quiz
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              examples:
                Basic Response:
                  value:
                    results:
                      - id: 1
                        name: Pre-tournament Knowledge Check
                        startDate: 2023-09-15T10:00:00Z
                        timeLimitTotal: 600
                        passingScore: 70
                        isRetakeable: true
                        isAnonymousAllowed: false
                        description: A quiz to test your knowledge before the tournament
                        matchupId: 101
                        stageId: 5
                        coverImage: https://example.com/images/quiz1.jpg
                        tags:
                          - id: 1
                            name: Tournament Rules
                          - id: 2
                            name: Game Knowledge
                        createdAt: 2023-09-01T08:30:00Z
                        updatedAt: 2023-09-10T14:15:00Z
                        authorId: 42
                    metadata:
                      page: 1
                      pageSize: 10
                      totalCount: 25
                      totalPages: 3
          description: ""
      tags: *a91
    post:
      operationId: QuizController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQuizRequest"
      responses:
        "200":
          description: Creates a new quiz
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a91
      security:
        - bearer: []
  /quiz/authored:
    get:
      operationId: QuizController_getAuthoredQuizzes
      parameters:
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: Returns a list of quizzes authored by the current user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuizResponse"
      tags: *a91
      security:
        - bearer: []
  /quiz/{quizId}:
    get:
      operationId: QuizController_findOne
      parameters:
        - name: quizId
          required: true
          in: path
          schema:
            type: number
        - name: responseType
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                examples:
                  BASE:
                    value:
                      id: 1
                      name: Pre-tournament Knowledge Check
                      startDate: 2023-09-15T10:00:00Z
                      timeLimitTotal: 600
                      passingScore: 70
                      isRetakeable: true
                      isAnonymousAllowed: false
                      description: A quiz to test your knowledge before the tournament
                      matchupId: 101
                      stageId: 5
                      coverImage: https://example.com/images/quiz1.jpg
                      tags:
                        - id: 1
                          name: Tournament Rules
                        - id: 2
                          name: Game Knowledge
                      createdAt: 2023-09-01T08:30:00Z
                      updatedAt: 2023-09-10T14:15:00Z
                      authorId: 42
                  EXTENDED:
                    value:
                      id: 1
                      name: Pre-tournament Knowledge Check
                      startDate: 2023-09-15T10:00:00Z
                      timeLimitTotal: 600
                      passingScore: 70
                      isRetakeable: true
                      isAnonymousAllowed: false
                      description: A quiz to test your knowledge before the tournament
                      matchupId: 101
                      stageId: 5
                      coverImage: https://example.com/images/quiz1.jpg
                      tags:
                        - id: 1
                          name: Tournament Rules
                        - id: 2
                          name: Game Knowledge
                      createdAt: 2023-09-01T08:30:00Z
                      updatedAt: 2023-09-10T14:15:00Z
                      authorId: 42
                      attempts: 150
                      averageScore: 78.5
                      medianScore: 82
                      passingRate: 85.3
                      questions:
                        - id: 1
                          name: What is the maximum number of players allowed?
                          order: 1
                          timeLimit: 30
                          points: 10
                          createdAt: 2023-09-01T08:35:00Z
                          updatedAt: 2023-09-01T08:35:00Z
                          type: multiple_choice
                          image: null
                          isImmediateFeedback: true
                          correctAnswers:
                            - "4"
                          explanation: Tournament rules state that each team must have exactly 4 players.
                          options:
                            - id: 1
                              text: "2"
                              order: 1
                              count: 10
                              isCorrect: false
                            - id: 2
                              text: "3"
                              order: 2
                              count: 25
                              isCorrect: false
                            - id: 3
                              text: "4"
                              order: 3
                              count: 105
                              isCorrect: true
                            - id: 4
                              text: "5"
                              order: 4
                              count: 10
                              isCorrect: false
                          answers: []
      tags: *a91
    put:
      operationId: QuizController_update
      parameters:
        - name: quizId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateQuizRequest"
      responses:
        "200":
          description: Updates a quiz
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a91
      security:
        - bearer: []
    delete:
      operationId: QuizController_remove
      parameters:
        - name: quizId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a91
      security:
        - bearer: []
  /quiz-attempt:
    get:
      operationId: QuizAttemptController_findAll
      parameters:
        - name: field
          required: false
          in: query
          schema:
            type: string
        - name: order
          required: false
          in: query
          schema:
            type: string
        - name: returnFullCount
          required: false
          in: query
          schema:
            type: boolean
        - name: responseType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
        - name: search
          required: false
          in: query
          schema:
            type: string
        - name: quizId
          required: false
          in: query
          description: Quiz ID
          schema:
            type: number
        - name: userId
          required: false
          in: query
          schema:
            type: number
        - name: isSubmitted
          required: false
          in: query
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              examples:
                basic:
                  value:
                    id: 1
                    userId: 42
                    quizId: 7
                    currentQuestion: 2
                    endTime: 2023-05-30T15:30:00Z
                    score: 80
                    isSubmitted: true
                    createdAt: 2023-05-30T14:30:00Z
          description: ""
      tags: &a92
        - quiz-attempt
      security:
        - bearer: []
  /quiz-attempt/my-attempts:
    get:
      operationId: QuizAttemptController_getMyAttempts
      parameters:
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: Returns a list of quiz attempts made by the current user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuizAttemptResponse"
      tags: *a92
      security:
        - bearer: []
  /quiz-attempt/{attemptId}:
    get:
      operationId: QuizAttemptController_findOne
      parameters:
        - name: attemptId
          required: true
          in: path
          schema:
            type: number
        - name: responseType
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Returns a quiz attempt by ID
          content:
            application/json:
              schema:
                example:
                  id: 1
                  userId: 42
                  quizId: 7
                  currentQuestion: 2
                  endTime: 2023-05-30T15:30:00Z
                  score: 80
                  isSubmitted: true
                  createdAt: 2023-05-30T14:30:00Z
      tags: *a92
      security:
        - bearer: []
  /quiz-attempt/{quizId}:
    post:
      operationId: QuizAttemptController_create
      parameters:
        - name: quizId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: Creates a new quiz attempt
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a92
      security:
        - bearer: []
  /quiz-attempt/{attemptId}/submit:
    put:
      operationId: QuizAttemptController_submitAttempt
      parameters:
        - name: attemptId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitQuizAttemptRequest"
      responses:
        "200":
          description: Submits a quiz attempt
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a92
      security:
        - bearer: []
  /quiz-attempt/answers/{attemptId}/{questionId}:
    post:
      operationId: QuizAttemptController_createAnswer
      parameters:
        - name: attemptId
          required: true
          in: path
          schema:
            type: number
        - name: questionId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQuizAnswerRequest"
      responses:
        "200":
          description: Creates a new answer for a quiz attempt
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a92
      security:
        - bearer: []
  /quiz-attempt/answers/{attemptId}/{answerId}:
    put:
      operationId: QuizAttemptController_updateAnswer
      parameters:
        - name: answerId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateQuizAnswerRequest"
      responses:
        "200":
          description: Updates an answer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponsePrimary"
      tags: *a92
      security:
        - bearer: []
  /quiz-attempt/leaderboard/{quizId}:
    get:
      operationId: QuizAttemptController_getQuizLeaderboard
      parameters:
        - name: quizId
          required: true
          in: path
          schema:
            type: number
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          schema:
            type: number
      responses:
        "200":
          description: Returns a leaderboard of users who have completed the quiz, sorted
            by score and time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuizLeaderboardResponse"
      tags: *a92
info:
  title: winning.sh API
  description: The Winning.sh API description
  version: 1.0 alpha
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    ActionResponsePrimary:
      type: object
      properties:
        id:
          type: number
          readOnly: true
      required:
        - id
    MiniUserResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        username:
          type: string
          readOnly: true
        isFake:
          type: boolean
          readOnly: true
      required:
        - id
        - username
        - isFake
    MiniUserResponseWithProfilePicture:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        username:
          type: string
          readOnly: true
        isFake:
          type: boolean
          readOnly: true
        profilePicture:
          type: string
          readOnly: true
      required:
        - id
        - username
        - isFake
        - profilePicture
    MiniUserResponseWithCountry:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        username:
          type: string
          readOnly: true
        isFake:
          type: boolean
          readOnly: true
        profilePicture:
          type: string
          readOnly: true
        country:
          type: string
          readOnly: true
      required:
        - id
        - username
        - isFake
        - profilePicture
        - country
    UserResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        username:
          type: string
          readOnly: true
        isFake:
          type: boolean
          readOnly: true
        profilePicture:
          type: string
          readOnly: true
        country:
          type: string
          readOnly: true
        email:
          type: string
          readOnly: true
        bio:
          type: string
          readOnly: true
        level:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        age:
          type: number
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        followers:
          type: number
          readOnly: true
      required:
        - id
        - username
        - isFake
        - profilePicture
        - country
        - email
        - bio
        - level
        - name
        - age
        - updatedAt
        - followers
    ExtendedUserResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        username:
          type: string
          readOnly: true
        isFake:
          type: boolean
          readOnly: true
        profilePicture:
          type: string
          readOnly: true
        country:
          type: string
          readOnly: true
        email:
          type: string
          readOnly: true
        bio:
          type: string
          readOnly: true
        level:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        age:
          type: number
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        followers:
          type: number
          readOnly: true
        location:
          type: string
          readOnly: true
        following:
          type: number
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
      required:
        - id
        - username
        - isFake
        - profilePicture
        - country
        - email
        - bio
        - level
        - name
        - age
        - updatedAt
        - followers
        - location
        - following
        - createdAt
    AdminUserResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        username:
          type: string
          readOnly: true
        isFake:
          type: boolean
          readOnly: true
        profilePicture:
          type: string
          readOnly: true
        country:
          type: string
          readOnly: true
        email:
          type: string
          readOnly: true
        bio:
          type: string
          readOnly: true
        level:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        age:
          type: number
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        followers:
          type: number
          readOnly: true
        location:
          type: string
          readOnly: true
        following:
          type: number
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        subscription:
          type: string
          readOnly: true
          enum:
            - free
            - pro
            - premium
        role:
          type: string
          readOnly: true
          enum:
            - admin
            - user
      required:
        - id
        - username
        - isFake
        - profilePicture
        - country
        - email
        - bio
        - level
        - name
        - age
        - updatedAt
        - followers
        - location
        - following
        - createdAt
        - subscription
        - role
    PaginationInstance:
      type: object
      properties:
        page:
          type: number
          readOnly: true
        pageSize:
          type: number
          readOnly: true
        total:
          type: number
      required:
        - page
        - pageSize
    LinksInstance:
      type: object
      properties:
        first:
          type: string
          readOnly: true
        prev:
          type: string
          readOnly: true
        next:
          type: string
          readOnly: true
      required:
        - first
        - prev
        - next
    QueryMetadata:
      type: object
      properties:
        pagination:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/PaginationInstance"
        links:
          $ref: "#/components/schemas/LinksInstance"
        query:
          type: object
      required:
        - pagination
    BaseQueryResponse:
      type: object
      properties:
        results:
          type: array
          items:
            type: array
        metadata:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/QueryMetadata"
      required:
        - results
        - metadata
    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
        username:
          type: string
        bio:
          type: string
        email:
          type: string
        password:
          type: string
        profilePicture:
          type: string
        country:
          type: string
        dateOfBirth:
          format: date-time
          type: string
      required:
        - name
        - username
        - email
        - password
        - country
        - dateOfBirth
    UpdateUserInfo:
      type: object
      properties:
        profilePicture:
          type: string
        country:
          type: string
        username:
          type: string
        name:
          type: string
        bio:
          type: string
        dateOfBirth:
          format: date-time
          type: string
        location:
          type: string
    PasswordResetRequest:
      type: object
      properties:
        password:
          type: string
      required:
        - password
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    TokensResponse:
      type: object
      properties:
        accessToken:
          type: string
          readOnly: true
        refreshToken:
          type: string
          readOnly: true
      required:
        - accessToken
        - refreshToken
    MiniGroupResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        abbreviation:
          type: string
          readOnly: true
        locationId:
          type: number
          readOnly: true
      required:
        - id
        - name
        - abbreviation
        - locationId
    MiniGroupResponseWithLogo:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        abbreviation:
          type: string
          readOnly: true
        locationId:
          type: number
          readOnly: true
        logo:
          type: string
          readOnly: true
      required:
        - id
        - name
        - abbreviation
        - locationId
        - logo
    MiniGroupResponseWithCountry:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        abbreviation:
          type: string
          readOnly: true
        locationId:
          type: number
          readOnly: true
        logo:
          type: string
          readOnly: true
        country:
          type: string
          readOnly: true
      required:
        - id
        - name
        - abbreviation
        - locationId
        - logo
        - country
    LocationResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        apiId:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        coordinates:
          readOnly: true
          type: array
          items:
            type: string
      required:
        - id
        - apiId
        - name
        - coordinates
    GroupResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        abbreviation:
          type: string
          readOnly: true
        locationId:
          type: number
          readOnly: true
        logo:
          type: string
          readOnly: true
        country:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
        focus:
          type: string
          readOnly: true
        location:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/LocationResponse"
        updatedAt:
          type: string
          readOnly: true
        memberCount:
          type: number
          readOnly: true
      required:
        - id
        - name
        - abbreviation
        - locationId
        - logo
        - country
        - description
        - type
        - focus
        - location
        - updatedAt
        - memberCount
    GroupResponseExtended:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        abbreviation:
          type: string
          readOnly: true
        locationId:
          type: number
          readOnly: true
        logo:
          type: string
          readOnly: true
        country:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
        focus:
          type: string
          readOnly: true
        location:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/LocationResponse"
        updatedAt:
          type: string
          readOnly: true
        memberCount:
          type: number
          readOnly: true
        createdAt:
          type: string
          readOnly: true
        tournamentCount:
          type: number
          readOnly: true
        subscriberCount:
          type: number
          readOnly: true
      required:
        - id
        - name
        - abbreviation
        - locationId
        - logo
        - country
        - description
        - type
        - focus
        - location
        - updatedAt
        - memberCount
        - createdAt
        - tournamentCount
        - subscriberCount
    CreateFakeGroupRequest:
      type: object
      properties:
        name:
          type: string
        abbreviation:
          type: string
        logo:
          type: string
        country:
          type: string
      required:
        - name
        - abbreviation
        - logo
    CreateGroupRequest:
      type: object
      properties:
        name:
          type: string
        abbreviation:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - private
            - public
            - fake
        focus:
          type: string
          enum:
            - participation
            - organization
            - hybrid
        logo:
          type: string
        locationId:
          type: number
        country:
          type: string
      required:
        - name
        - abbreviation
        - description
        - type
        - focus
        - logo
    UpdateGroupRequest:
      type: object
      properties:
        name:
          type: string
        abbreviation:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - private
            - public
            - fake
        focus:
          type: string
          enum:
            - participation
            - organization
            - hybrid
        logo:
          type: string
        locationId:
          type: number
        country:
          type: string
    MinimalMembershipResponse:
      type: object
      properties:
        groupId:
          type: number
          readOnly: true
        userId:
          type: number
          readOnly: true
        role:
          type: string
          readOnly: true
          enum:
            - owner
            - member
            - admin
      required:
        - groupId
        - userId
        - role
    GroupMembershipResponse:
      type: object
      properties:
        groupId:
          type: number
          readOnly: true
        userId:
          type: number
          readOnly: true
        role:
          type: string
          readOnly: true
          enum:
            - owner
            - member
            - admin
        user:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/MiniUserResponseWithProfilePicture"
        group:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/MiniGroupResponseWithLogo"
        createdAt:
          type: string
          readOnly: true
      required:
        - groupId
        - userId
        - role
        - user
        - group
        - createdAt
    UserMembershipResponseWithDates:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        username:
          type: string
          readOnly: true
        isFake:
          type: boolean
          readOnly: true
        profilePicture:
          type: string
          readOnly: true
        country:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        role:
          type: string
          readOnly: true
          enum:
            - owner
            - member
            - admin
      required:
        - id
        - username
        - isFake
        - profilePicture
        - country
        - createdAt
        - role
    GroupMembershipResponseWithDates:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        abbreviation:
          type: string
          readOnly: true
        locationId:
          type: number
          readOnly: true
        logo:
          type: string
          readOnly: true
        country:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        role:
          type: string
          readOnly: true
          enum:
            - owner
            - member
            - admin
      required:
        - id
        - name
        - abbreviation
        - locationId
        - logo
        - country
        - createdAt
        - role
    GroupMembershipKey:
      type: object
      properties:
        userId:
          type: number
          readOnly: true
        groupId:
          type: number
          readOnly: true
      required:
        - userId
        - groupId
    GroupMembershipUpdateRequest:
      type: object
      properties:
        role:
          type: string
    NotificationsResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        userId:
          type: number
          readOnly: true
        message:
          type: string
          readOnly: true
        link:
          type: string
          readOnly: true
        image:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        read:
          type: boolean
          readOnly: true
      required:
        - id
        - userId
        - message
        - link
        - image
        - type
        - createdAt
        - read
    FollowerResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        username:
          type: string
          readOnly: true
        isFake:
          type: boolean
          readOnly: true
        profilePicture:
          type: string
          readOnly: true
        country:
          type: string
          readOnly: true
        email:
          type: string
          readOnly: true
        bio:
          type: string
          readOnly: true
        level:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        age:
          type: number
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        followers:
          type: number
          readOnly: true
        createdAt:
          format: date-time
          type: string
      required:
        - id
        - username
        - isFake
        - profilePicture
        - country
        - email
        - bio
        - level
        - name
        - age
        - updatedAt
        - followers
        - createdAt
    FollowerMiniResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        username:
          type: string
          readOnly: true
        isFake:
          type: boolean
          readOnly: true
        createdAt:
          format: date-time
          type: string
      required:
        - id
        - username
        - isFake
        - createdAt
    GroupJoinRequestWithUserResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        username:
          type: string
          readOnly: true
        isFake:
          type: boolean
          readOnly: true
        profilePicture:
          type: string
          readOnly: true
        country:
          type: string
          readOnly: true
        email:
          type: string
          readOnly: true
        bio:
          type: string
          readOnly: true
        level:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        age:
          type: number
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        followers:
          type: number
          readOnly: true
        groupId:
          type: number
        message:
          type: string
      required:
        - id
        - username
        - isFake
        - profilePicture
        - country
        - email
        - bio
        - level
        - name
        - age
        - updatedAt
        - followers
        - groupId
        - message
    GroupJoinRequestWithMiniUserResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        username:
          type: string
          readOnly: true
        isFake:
          type: boolean
          readOnly: true
        profilePicture:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
      required:
        - id
        - username
        - isFake
        - profilePicture
        - createdAt
    GroupJoinRequestWithGroupResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        abbreviation:
          type: string
          readOnly: true
        locationId:
          type: number
          readOnly: true
        logo:
          type: string
          readOnly: true
        country:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
        focus:
          type: string
          readOnly: true
        location:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/LocationResponse"
        updatedAt:
          type: string
          readOnly: true
        memberCount:
          type: number
          readOnly: true
        userId:
          type: number
        message:
          type: string
      required:
        - id
        - name
        - abbreviation
        - locationId
        - logo
        - country
        - description
        - type
        - focus
        - location
        - updatedAt
        - memberCount
        - userId
        - message
    GroupJoinRequestWithMiniGroupResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        abbreviation:
          type: string
          readOnly: true
        locationId:
          type: number
          readOnly: true
        logo:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
      required:
        - id
        - name
        - abbreviation
        - locationId
        - logo
        - createdAt
    CreateGroupJoinRequestDto:
      type: object
      properties:
        message:
          type: string
        relatedLFPId:
          type: number
      required:
        - message
    UpdateGroupJoinRequestDto:
      type: object
      properties:
        message:
          type: string
        relatedLFPId:
          type: number
    GroupInviteWithUserResponseDto:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        username:
          type: string
          readOnly: true
        isFake:
          type: boolean
          readOnly: true
        profilePicture:
          type: string
          readOnly: true
        country:
          type: string
          readOnly: true
        email:
          type: string
          readOnly: true
        bio:
          type: string
          readOnly: true
        level:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        age:
          type: number
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        followers:
          type: number
          readOnly: true
        message:
          type: string
        groupId:
          type: number
      required:
        - id
        - username
        - isFake
        - profilePicture
        - country
        - email
        - bio
        - level
        - name
        - age
        - updatedAt
        - followers
        - message
        - groupId
    GroupInviteWithMiniUserResponseDto:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        username:
          type: string
          readOnly: true
        isFake:
          type: boolean
          readOnly: true
        profilePicture:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
      required:
        - id
        - username
        - isFake
        - profilePicture
        - createdAt
    GroupInviteWithGroupResponseDto:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        abbreviation:
          type: string
          readOnly: true
        locationId:
          type: number
          readOnly: true
        logo:
          type: string
          readOnly: true
        country:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
        focus:
          type: string
          readOnly: true
        location:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/LocationResponse"
        updatedAt:
          type: string
          readOnly: true
        memberCount:
          type: number
          readOnly: true
        message:
          type: string
        userId:
          type: number
      required:
        - id
        - name
        - abbreviation
        - locationId
        - logo
        - country
        - description
        - type
        - focus
        - location
        - updatedAt
        - memberCount
        - message
        - userId
    GroupInviteWithMiniGroupResponseDto:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        abbreviation:
          type: string
          readOnly: true
        locationId:
          type: number
          readOnly: true
        logo:
          type: string
          readOnly: true
        country:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
        focus:
          type: string
          readOnly: true
        location:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/LocationResponse"
        updatedAt:
          type: string
          readOnly: true
        memberCount:
          type: number
          readOnly: true
        createdAt:
          format: date-time
          type: string
      required:
        - id
        - name
        - abbreviation
        - locationId
        - logo
        - country
        - description
        - type
        - focus
        - location
        - updatedAt
        - memberCount
        - createdAt
    CreateGroupInviteDto:
      type: object
      properties:
        message:
          type: string
        relatedLFPId:
          type: number
      required:
        - message
    UpdateGroupInviteDto:
      type: object
      properties:
        message:
          type: string
        relatedLFPId:
          type: number
    CategoryMiniResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
      required:
        - id
        - name
    CategoryMiniResponseWithLogo:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        logo:
          type: string
          readOnly: true
      required:
        - id
        - name
        - logo
    CategoryResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        logo:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
        tournamentCount:
          type: number
          readOnly: true
        activeTournamentCount:
          type: number
          readOnly: true
      required:
        - id
        - name
        - logo
        - description
        - type
        - tournamentCount
        - activeTournamentCount
    CategoryResponseExtended:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        logo:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
        tournamentCount:
          type: number
          readOnly: true
        activeTournamentCount:
          type: number
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
      required:
        - id
        - name
        - logo
        - description
        - type
        - tournamentCount
        - activeTournamentCount
        - createdAt
        - updatedAt
    CreateCategoryRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        logo:
          type: string
        type:
          type: string
      required:
        - name
        - description
        - logo
        - type
    UpdateCategoryRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
    MiniTournamentResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
        startDate:
          format: date-time
          type: string
          readOnly: true
        locationId:
          type: number
          readOnly: true
      required:
        - id
        - name
        - type
        - startDate
        - locationId
    MiniTournamentResponseWithLogo:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
        startDate:
          format: date-time
          type: string
          readOnly: true
        locationId:
          type: number
          readOnly: true
        location:
          type: string
          readOnly: true
        logo:
          type: string
          readOnly: true
        country:
          type: string
          readOnly: true
      required:
        - id
        - name
        - type
        - startDate
        - locationId
        - location
        - logo
        - country
    TournamentResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
        startDate:
          format: date-time
          type: string
          readOnly: true
        locationId:
          type: number
          readOnly: true
        location:
          type: string
          readOnly: true
        logo:
          type: string
          readOnly: true
        country:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        teamType:
          type: string
          readOnly: true
        creator:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/MiniUserResponse"
        affiliatedGroup:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/MiniGroupResponse"
        endDate:
          format: date-time
          type: string
          readOnly: true
        maxParticipants:
          type: number
          readOnly: true
        currentParticipants:
          type: number
          readOnly: true
        isPublic:
          type: boolean
          readOnly: true
        category:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/CategoryMiniResponseWithLogo"
        links:
          type: string
          readOnly: true
        actualLocation:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/LocationResponse"
      required:
        - id
        - name
        - type
        - startDate
        - locationId
        - location
        - logo
        - country
        - description
        - teamType
        - creator
        - affiliatedGroup
        - endDate
        - maxParticipants
        - currentParticipants
        - isPublic
        - category
        - links
        - actualLocation
    ExtendedTournamentResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
        startDate:
          format: date-time
          type: string
          readOnly: true
        locationId:
          type: number
          readOnly: true
        location:
          type: string
          readOnly: true
        logo:
          type: string
          readOnly: true
        country:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        teamType:
          type: string
          readOnly: true
        creator:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/MiniUserResponse"
        affiliatedGroup:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/MiniGroupResponse"
        endDate:
          format: date-time
          type: string
          readOnly: true
        maxParticipants:
          type: number
          readOnly: true
        currentParticipants:
          type: number
          readOnly: true
        isPublic:
          type: boolean
          readOnly: true
        category:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/CategoryMiniResponseWithLogo"
        links:
          type: string
          readOnly: true
        actualLocation:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/LocationResponse"
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        isMultipleTeamsPerGroupAllowed:
          type: boolean
          readOnly: true
        isFakePlayersAllowed:
          type: boolean
          readOnly: true
        parentTournament:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/MiniTournamentResponseWithLogo"
        conversionRuleId:
          type: number
          readOnly: true
        isRanked:
          type: boolean
          readOnly: true
        maximumMMR:
          type: number
          readOnly: true
        minimumMMR:
          type: number
          readOnly: true
      required:
        - id
        - name
        - type
        - startDate
        - locationId
        - location
        - logo
        - country
        - description
        - teamType
        - creator
        - affiliatedGroup
        - endDate
        - maxParticipants
        - currentParticipants
        - isPublic
        - category
        - links
        - actualLocation
        - createdAt
        - updatedAt
        - isMultipleTeamsPerGroupAllowed
        - isFakePlayersAllowed
        - parentTournament
        - conversionRuleId
        - isRanked
        - maximumMMR
        - minimumMMR
    CreateTournamentRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        country:
          type: string
        tournamentType:
          type: string
          enum:
            - league
            - competition
            - seasonal
            - contest
            - event
        location:
          type: string
          enum:
            - online
            - offline
            - hybrid
        tournamentTeamType:
          type: string
          enum:
            - solo
            - team
            - mixed
        isMultipleTeamsPerGroupAllowed:
          type: boolean
        isFakePlayersAllowed:
          type: boolean
        parentTournamentId:
          type: number
        conversionRuleId:
          type: number
        maxParticipants:
          type: number
        startDate:
          format: date-time
          type: string
        endDate:
          format: date-time
          type: string
        isPublic:
          type: boolean
        isRanked:
          type: boolean
        categoryId:
          type: number
        maximumMMR:
          type: number
        minimumMMR:
          type: number
        affiliatedGroupId:
          type: number
        links:
          type: string
        locationId:
          type: number
        logo:
          type: string
      required:
        - name
        - description
        - country
        - tournamentType
        - location
        - tournamentTeamType
        - maxParticipants
        - startDate
        - endDate
        - isPublic
        - isRanked
        - categoryId
    UpdateTournamentRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        country:
          type: string
        tournamentType:
          type: string
          enum:
            - league
            - competition
            - seasonal
            - contest
            - event
        location:
          type: string
          enum:
            - online
            - offline
            - hybrid
        teamType:
          type: string
          enum:
            - solo
            - team
            - mixed
        isMultipleTeamsPerGroupAllowed:
          type: boolean
        isFakePlayersAllowed:
          type: boolean
        parentTournamentId:
          type: number
        conversionRuleId:
          type: number
        startDate:
          format: date-time
          type: string
        endDate:
          format: date-time
          type: string
        maxParticipants:
          type: number
        isPublic:
          type: boolean
        isRanked:
          type: boolean
        categoryId:
          type: number
        maximumMMR:
          type: number
        minimumMMR:
          type: number
        creatorId:
          type: number
        affiliatedGroupId:
          type: number
        links:
          type: string
        locationId:
          type: number
    MiniStageResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        tournamentId:
          type: number
          readOnly: true
        stageStatus:
          type: string
          readOnly: true
        locationId:
          type: number
          readOnly: true
      required:
        - id
        - name
        - tournamentId
        - stageStatus
        - locationId
    StageResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        tournamentId:
          type: number
          readOnly: true
        stageStatus:
          type: string
          readOnly: true
        locationId:
          type: number
          readOnly: true
        stageType:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        logo:
          type: string
          readOnly: true
        rostersParticipating:
          type: number
          readOnly: true
        startDate:
          format: date-time
          type: string
          readOnly: true
        endDate:
          format: date-time
          type: string
          readOnly: true
        location:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/LocationResponse"
      required:
        - id
        - name
        - tournamentId
        - stageStatus
        - locationId
        - stageType
        - description
        - logo
        - rostersParticipating
        - startDate
        - endDate
        - location
    StageResponseWithTournament:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        tournamentId:
          type: number
          readOnly: true
        stageStatus:
          type: string
          readOnly: true
        locationId:
          type: number
          readOnly: true
        stageType:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        logo:
          type: string
          readOnly: true
        rostersParticipating:
          type: number
          readOnly: true
        startDate:
          format: date-time
          type: string
          readOnly: true
        endDate:
          format: date-time
          type: string
          readOnly: true
        location:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/LocationResponse"
        tournament:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/MiniTournamentResponseWithLogo"
      required:
        - id
        - name
        - tournamentId
        - stageStatus
        - locationId
        - stageType
        - description
        - logo
        - rostersParticipating
        - startDate
        - endDate
        - location
        - tournament
    ExtendedStageResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        tournamentId:
          type: number
          readOnly: true
        stageStatus:
          type: string
          readOnly: true
        locationId:
          type: number
          readOnly: true
        stageType:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        logo:
          type: string
          readOnly: true
        rostersParticipating:
          type: number
          readOnly: true
        startDate:
          format: date-time
          type: string
          readOnly: true
        endDate:
          format: date-time
          type: string
          readOnly: true
        location:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/LocationResponse"
        minPlayersPerTeam:
          type: number
          readOnly: true
        maxPlayersPerTeam:
          type: number
          readOnly: true
        maxChanges:
          type: number
          readOnly: true
        maxSubstitutes:
          type: number
          readOnly: true
        challongeTournamentId:
          type: string
          readOnly: true
      required:
        - id
        - name
        - tournamentId
        - stageStatus
        - locationId
        - stageType
        - description
        - logo
        - rostersParticipating
        - startDate
        - endDate
        - location
        - minPlayersPerTeam
        - maxPlayersPerTeam
        - maxChanges
        - maxSubstitutes
        - challongeTournamentId
    ExtendedStageResponseWithTournament:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        tournamentId:
          type: number
          readOnly: true
        stageStatus:
          type: string
          readOnly: true
        locationId:
          type: number
          readOnly: true
        stageType:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        logo:
          type: string
          readOnly: true
        rostersParticipating:
          type: number
          readOnly: true
        startDate:
          format: date-time
          type: string
          readOnly: true
        endDate:
          format: date-time
          type: string
          readOnly: true
        location:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/LocationResponse"
        minPlayersPerTeam:
          type: number
          readOnly: true
        maxPlayersPerTeam:
          type: number
          readOnly: true
        maxChanges:
          type: number
          readOnly: true
        maxSubstitutes:
          type: number
          readOnly: true
        challongeTournamentId:
          type: string
          readOnly: true
        tournament:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/TournamentResponse"
      required:
        - id
        - name
        - tournamentId
        - stageStatus
        - locationId
        - stageType
        - description
        - logo
        - rostersParticipating
        - startDate
        - endDate
        - location
        - minPlayersPerTeam
        - maxPlayersPerTeam
        - maxChanges
        - maxSubstitutes
        - challongeTournamentId
        - tournament
    CreateStageRequest:
      type: object
      properties:
        conversionRuleId:
          type: number
        stageStatus:
          type: string
          enum:
            - upcoming
            - ongoing
            - finished
            - cancelled
        stageType:
          type: string
          enum:
            - group
            - knockout
            - swiss
            - round_robin
            - fixture
            - double_elimination
            - quiz
            - compass
            - triple_elimination
            - evaluated_competition
        name:
          type: string
        stageLocation:
          type: string
          enum:
            - online
            - offline
            - hybrid
        description:
          type: string
        logo:
          type: string
        startDate:
          format: date-time
          type: string
        endDate:
          format: date-time
          type: string
        locationId:
          type: number
        minPlayersPerTeam:
          type: number
        maxPlayersPerTeam:
          type: number
      required:
        - name
        - startDate
    UpdateStageRequest:
      type: object
      properties:
        conversionRuleId:
          type: number
        stageStatus:
          type: string
          enum:
            - upcoming
            - ongoing
            - finished
            - cancelled
        stageType:
          type: string
          enum:
            - group
            - knockout
            - swiss
            - round_robin
            - fixture
            - double_elimination
            - quiz
            - compass
            - triple_elimination
            - evaluated_competition
        name:
          type: string
        stageLocation:
          type: string
          enum:
            - online
            - offline
            - hybrid
        description:
          type: string
        logo:
          type: string
        locationId:
          type: number
        startDate:
          format: date-time
          type: string
        endDate:
          format: date-time
          type: string
        minPlayersPerTeam:
          type: number
        maxPlayersPerTeam:
          type: number
        maxChanges:
          type: number
        maxSubstitutes:
          type: number
    MiniRosterDto:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        stageId:
          type: number
          readOnly: true
        participationId:
          type: number
          readOnly: true
        group:
          type: object
          readOnly: true
        user:
          type: object
          readOnly: true
      required:
        - id
        - stageId
        - participationId
        - group
        - user
    RosterDto:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        stageId:
          type: number
          readOnly: true
        participationId:
          type: number
          readOnly: true
        group:
          type: object
          readOnly: true
        user:
          type: object
          readOnly: true
        players:
          readOnly: true
          type: array
          items:
            type: string
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
      required:
        - id
        - stageId
        - participationId
        - group
        - user
        - players
        - createdAt
        - updatedAt
    PlayerDto:
      type: object
      properties:
        user:
          type: object
          readOnly: true
        isSubstitute:
          type: boolean
          readOnly: true
        career:
          readOnly: true
          type: array
          items:
            type: string
      required:
        - user
        - isSubstitute
        - career
    CreateRosterDto:
      type: object
      properties:
        members:
          type: array
          items:
            type: string
      required:
        - members
    MiniParticipationResponse:
      type: object
      properties:
        id:
          type: number
        userId:
          type: number
        groupId:
          type: number
        tournamentId:
          type: number
      required:
        - id
        - tournamentId
    ParticipationResponse:
      type: object
      properties:
        id:
          type: number
        userId:
          type: number
        groupId:
          type: number
        tournamentId:
          type: number
        tournament:
          $ref: "#/components/schemas/MiniTournamentResponse"
        group:
          $ref: "#/components/schemas/MiniGroupResponse"
        user:
          $ref: "#/components/schemas/MiniUserResponse"
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - id
        - tournamentId
        - tournament
        - createdAt
        - updatedAt
    ExtendedParticipationResponse:
      type: object
      properties: {}
    MiniParticipationWithGroup:
      type: object
      properties:
        id:
          type: number
        userId:
          type: number
        groupId:
          type: number
        tournamentId:
          type: number
        group:
          $ref: "#/components/schemas/MiniGroupResponseWithLogo"
      required:
        - id
        - tournamentId
        - group
    ResultsResponseDto:
      type: object
      properties:
        id:
          type: number
          description: The ID of the result
        matchupId:
          type: number
          description: The ID of the matchup
        score:
          type: number
          description: The score
        isWinner:
          type: boolean
          description: Whether this result represents a winner
        roster:
          description: The roster associated with this result
          allOf:
            - $ref: "#/components/schemas/MiniRosterDto"
      required:
        - id
        - matchupId
        - score
        - isWinner
        - roster
    MatchupResponseWithResultsDto:
      type: object
      properties:
        id:
          type: number
          description: The ID of the matchup
        stageId:
          type: number
          description: The ID of the stage
        round:
          type: number
          description: The round number
        matchupType:
          type: string
          description: The type of matchup
        startDate:
          format: date-time
          type: string
          description: The start date of the matchup
        isFinished:
          type: boolean
          description: Whether the matchup is finished
        results:
          description: The results for this matchup
          type: array
          items:
            $ref: "#/components/schemas/ResultsResponseDto"
      required:
        - id
        - stageId
        - round
        - matchupType
        - startDate
        - isFinished
        - results
    ScoreResponseDto:
      type: object
      properties:
        matchupId:
          type: number
          description: The ID of the matchup
        roundNumber:
          type: number
          description: The round number
        points:
          type: number
          description: The number of points scored
        isWinner:
          type: boolean
          description: Whether this score represents a winner
      required:
        - matchupId
        - roundNumber
        - points
        - isWinner
    ResultsResponseWithScoresDto:
      type: object
      properties:
        id:
          type: number
          description: The ID of the matchup
        stageId:
          type: number
          description: The ID of the stage
        round:
          type: number
          description: The round number
        matchupType:
          type: string
          description: The type of matchup
        startDate:
          format: date-time
          type: string
          description: The start date of the matchup
        isFinished:
          type: boolean
          description: Whether the matchup is finished
        scores:
          description: The scores for this matchup
          type: array
          items:
            $ref: "#/components/schemas/ScoreResponseDto"
        rosters:
          description: The rosters for this matchup
          type: array
          items:
            $ref: "#/components/schemas/RosterDto"
      required:
        - id
        - stageId
        - round
        - matchupType
        - startDate
        - isFinished
        - scores
        - rosters
    MatchupResponseWithResultsAndScoresDto:
      type: object
      properties:
        id:
          type: number
          description: The ID of the matchup
        stageId:
          type: number
          description: The ID of the stage
        round:
          type: number
          description: The round number
        matchupType:
          type: string
          description: The type of matchup
        startDate:
          format: date-time
          type: string
          description: The start date of the matchup
        isFinished:
          type: boolean
          description: Whether the matchup is finished
        results:
          description: The results with scores for this matchup
          type: array
          items:
            $ref: "#/components/schemas/ResultsResponseWithScoresDto"
      required:
        - id
        - stageId
        - round
        - matchupType
        - startDate
        - isFinished
        - results
    CreateTeamScoreDto:
      type: object
      properties:
        rosterId:
          type: number
          description: The ID of the roster
        points:
          type: number
          description: The number of points scored
        isWinner:
          type: boolean
          description: Whether this team is the winner
      required:
        - rosterId
        - points
        - isWinner
    CreateScoreRequestDto:
      type: object
      properties:
        roundNumber:
          type: number
          description: The round number
        scores:
          description: The scores for each team
          type: array
          items:
            $ref: "#/components/schemas/CreateTeamScoreDto"
      required:
        - roundNumber
        - scores
    SetTeamResultDto:
      type: object
      properties:
        rosterId:
          type: number
          description: The ID of the roster
        isWinner:
          type: boolean
          description: Whether this team is the winner
      required:
        - rosterId
        - isWinner
    EndMatchupRequestDto:
      type: object
      properties:
        scores:
          description: The scores for each round
          type: array
          items:
            $ref: "#/components/schemas/CreateScoreRequestDto"
        results:
          description: The results for each team
          type: array
          items:
            $ref: "#/components/schemas/SetTeamResultDto"
      required:
        - scores
        - results
    CareerCategoryResponse:
      type: object
      properties:
        userId:
          type: number
          readOnly: true
        categoryId:
          type: number
          readOnly: true
        elo:
          type: number
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        category:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/CategoryMiniResponseWithLogo"
      required:
        - userId
        - categoryId
        - elo
        - createdAt
        - category
    LFGResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        userId:
          type: number
          readOnly: true
        categoryId:
          type: number
          readOnly: true
        message:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        user:
          type: object
          readOnly: true
        careers:
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/CareerCategoryResponse"
      required:
        - id
        - userId
        - categoryId
        - message
        - createdAt
        - user
        - careers
    CreateLFGRequest:
      type: object
      properties:
        message:
          type: string
        categoryIds:
          type: array
          items:
            type: string
      required:
        - message
        - categoryIds
    UpdateLFGRequest:
      type: object
      properties:
        message:
          type: string
        categoryIds:
          type: array
          items:
            type: string
    CreateLFPDto:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    UpdateLFPDto:
      type: object
      properties:
        message:
          type: string
    MiniLocationResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        apiId:
          type: string
          readOnly: true
      required:
        - id
        - apiId
    ExtendedLocationResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        apiId:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        coordinates:
          readOnly: true
          type: array
          items:
            type: string
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
      required:
        - id
        - apiId
        - name
        - coordinates
        - createdAt
        - updatedAt
    CreateLocationDto:
      type: object
      properties:
        name:
          type: string
        apiId:
          type: string
        lat:
          type: number
        lng:
          type: number
      required:
        - name
        - apiId
        - lat
        - lng
    UpdateLocationDto:
      type: object
      properties:
        name:
          type: string
        apiId:
          type: string
        lat:
          type: number
        lng:
          type: number
    CreateGroupRequirementsDto:
      type: object
      properties: {}
    UpdateGroupRequirementsDto:
      type: object
      properties: {}
    TagResponse:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
      required:
        - id
        - name
    QuizResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        startDate:
          format: date-time
          type: string
          readOnly: true
        timeLimitTotal:
          type: number
          readOnly: true
        passingScore:
          type: number
          readOnly: true
        isRetakeable:
          type: boolean
          readOnly: true
        isAnonymousAllowed:
          type: boolean
          readOnly: true
        description:
          type: string
          readOnly: true
        matchupId:
          type: number
          readOnly: true
        stageId:
          type: number
          readOnly: true
        coverImage:
          type: string
          readOnly: true
        tags:
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/TagResponse"
        createdAt:
          type: object
          readOnly: true
        updatedAt:
          type: object
          readOnly: true
        authorId:
          type: number
          readOnly: true
      required:
        - id
        - name
        - startDate
        - timeLimitTotal
        - passingScore
        - isRetakeable
        - isAnonymousAllowed
        - description
        - matchupId
        - stageId
        - coverImage
        - tags
        - createdAt
        - updatedAt
        - authorId
    QuizOptionResponse:
      type: object
      properties:
        id:
          type: number
          description: Option ID
        order:
          type: number
          readOnly: true
        option:
          type: string
          readOnly: true
      required:
        - id
        - order
        - option
    QuizQuestionResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        order:
          type: number
          readOnly: true
        timeLimit:
          type: number
          readOnly: true
        points:
          type: number
          readOnly: true
        createdAt:
          type: object
          readOnly: true
        updatedAt:
          type: object
          readOnly: true
        type:
          type: string
          readOnly: true
          enum:
            - multiple_choice
            - true_false
            - short_answer
            - order
            - hotspot
            - programming
        options:
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/QuizOptionResponse"
        image:
          type: string
          readOnly: true
      required:
        - id
        - name
        - order
        - timeLimit
        - points
        - createdAt
        - updatedAt
        - type
        - options
        - image
    QuizResponseExtended:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        startDate:
          format: date-time
          type: string
          readOnly: true
        timeLimitTotal:
          type: number
          readOnly: true
        passingScore:
          type: number
          readOnly: true
        isRetakeable:
          type: boolean
          readOnly: true
        isAnonymousAllowed:
          type: boolean
          readOnly: true
        description:
          type: string
          readOnly: true
        matchupId:
          type: number
          readOnly: true
        stageId:
          type: number
          readOnly: true
        coverImage:
          type: string
          readOnly: true
        tags:
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/TagResponse"
        createdAt:
          type: object
          readOnly: true
        updatedAt:
          type: object
          readOnly: true
        authorId:
          type: number
          readOnly: true
        attempts:
          type: number
          readOnly: true
        averageScore:
          type: number
          readOnly: true
        medianScore:
          type: number
          readOnly: true
        passingRate:
          type: number
          readOnly: true
        questions:
          description: Quiz questions with statistics
          type: array
          items:
            $ref: "#/components/schemas/QuizQuestionResponse"
        isRandomizedQuestions:
          type: boolean
          readOnly: true
        isImmediateFeedback:
          type: boolean
          readOnly: true
        isTest:
          type: boolean
          readOnly: true
      required:
        - id
        - name
        - startDate
        - timeLimitTotal
        - passingScore
        - isRetakeable
        - isAnonymousAllowed
        - description
        - matchupId
        - stageId
        - coverImage
        - tags
        - createdAt
        - updatedAt
        - authorId
        - attempts
        - averageScore
        - medianScore
        - passingRate
        - questions
        - isRandomizedQuestions
        - isImmediateFeedback
        - isTest
    CreateQuizQuestionDto:
      type: object
      properties:
        quizId:
          type: number
        question:
          type: string
        questionType:
          type: string
          enum:
            - multiple_choice
            - true_false
            - short_answer
            - order
            - hotspot
            - programming
        timeLimit:
          type: number
        points:
          type: number
        explanation:
          type: string
        options:
          type: array
          items:
            type: string
        isImmediateFeedback:
          type: boolean
        correctAnswers:
          type: array
          items:
            type: string
        image:
          type: string
      required:
        - question
        - questionType
    CreateQuizRequest:
      type: object
      properties:
        name:
          type: string
          description: Quiz name
        startDate:
          format: date-time
          type: string
        timeLimitTotal:
          type: number
        passingScore:
          type: number
        isImmediateFeedback:
          type: boolean
        isRandomizedQuestions:
          type: boolean
        isAnonymousAllowed:
          type: boolean
        isRetakeable:
          type: boolean
        description:
          type: string
        matchupId:
          type: number
        stageId:
          type: number
        isTest:
          type: boolean
        coverImage:
          type: string
        questions:
          description: Quiz questions
          type: array
          items:
            $ref: "#/components/schemas/CreateQuizQuestionDto"
      required:
        - name
        - startDate
        - questions
    UpdateQuizRequest:
      type: object
      properties:
        name:
          type: string
          description: Quiz name
        startDate:
          format: date-time
          type: string
        timeLimitTotal:
          type: number
        passingScore:
          type: number
        isImmediateFeedback:
          type: boolean
        isRandomizedQuestions:
          type: boolean
        isAnonymousAllowed:
          type: boolean
        isRetakeable:
          type: boolean
        description:
          type: string
        matchupId:
          type: number
        stageId:
          type: number
        isTest:
          type: boolean
        coverImage:
          type: string
        questions:
          description: Quiz questions
          type: array
          items:
            $ref: "#/components/schemas/CreateQuizQuestionDto"
    QuizAttemptResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        userId:
          type: number
          readOnly: true
        quizId:
          type: number
          readOnly: true
        currentQuestion:
          type: number
          readOnly: true
        endTime:
          format: date-time
          type: string
          readOnly: true
        score:
          type: number
          readOnly: true
        isSubmitted:
          type: boolean
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        quiz:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/QuizResponse"
      required:
        - id
        - userId
        - quizId
        - currentQuestion
        - endTime
        - score
        - isSubmitted
        - createdAt
        - quiz
    QuizAnswerResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        isFinal:
          type: boolean
          readOnly: true
        isCorrect:
          type: boolean
          readOnly: true
        userId:
          type: number
          readOnly: true
        quizAttemptId:
          type: number
          readOnly: true
        quizQuestionId:
          type: number
          readOnly: true
        answer:
          type: string
          readOnly: true
        selectedOptionId:
          type: number
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
      required:
        - id
        - isFinal
        - isCorrect
        - userId
        - quizAttemptId
        - quizQuestionId
        - answer
        - selectedOptionId
        - createdAt
    QuizAttemptWithAnswersResponse:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        userId:
          type: number
          readOnly: true
        quizId:
          type: number
          readOnly: true
        currentQuestion:
          type: number
          readOnly: true
        endTime:
          format: date-time
          type: string
          readOnly: true
        score:
          type: number
          readOnly: true
        isSubmitted:
          type: boolean
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        quiz:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/QuizResponse"
        answers:
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/QuizAnswerResponse"
      required:
        - id
        - userId
        - quizId
        - currentQuestion
        - endTime
        - score
        - isSubmitted
        - createdAt
        - quiz
        - answers
    QuizLeaderboardEntry:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        userId:
          type: number
          readOnly: true
        score:
          type: number
          readOnly: true
        endTime:
          format: date-time
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        userName:
          type: string
          readOnly: true
        userProfilePicture:
          type: string
          readOnly: true
        rank:
          type: number
          readOnly: true
      required:
        - id
        - userId
        - score
        - endTime
        - createdAt
        - userName
        - userProfilePicture
        - rank
    QuizLeaderboardResponse:
      type: object
      properties:
        results:
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/QuizLeaderboardEntry"
        metadata:
          type: object
          readOnly: true
      required:
        - results
        - metadata
    SubmitQuizAttemptRequest:
      type: object
      properties:
        isSubmitted:
          type: boolean
      required:
        - isSubmitted
    CreateQuizAnswerRequest:
      type: object
      properties:
        answer:
          type: string
        selectedOptionId:
          type: number
          description: Selected option ID for multiple choice questions
    UpdateQuizAnswerRequest:
      type: object
      properties:
        answer:
          type: string
        selectedOptionId:
          type: number
          description: Selected option ID for multiple choice questions
